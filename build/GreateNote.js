/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/backo2/index.js":
/*!**************************************!*\
  !*** ./node_modules/backo2/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/backo2/index.js?");

/***/ }),

/***/ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(chars){\n  \"use strict\";\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = chars.indexOf(base64[i]);\n      encoded2 = chars.indexOf(base64[i+1]);\n      encoded3 = chars.indexOf(base64[i+2]);\n      encoded4 = chars.indexOf(base64[i+3]);\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js?");

/***/ }),

/***/ "./node_modules/component-emitter/index.js":
/*!*************************************************!*\
  !*** ./node_modules/component-emitter/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (true) {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Remove event specific arrays for event types that no\r\n  // one is subscribed for to avoid memory leak.\r\n  if (callbacks.length === 0) {\r\n    delete this._callbacks['$' + event];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  var args = new Array(arguments.length - 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/component-emitter/index.js?");

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/globalThis.browser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/globalThis.browser.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("module.exports = (() => {\n  if (typeof self !== \"undefined\") {\n    return self;\n  } else if (typeof window !== \"undefined\") {\n    return window;\n  } else {\n    return Function(\"return this\")();\n  }\n})();\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/globalThis.browser.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/engine.io-client/lib/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Socket = __webpack_require__(/*! ./socket */ \"./node_modules/engine.io-client/lib/socket.js\");\n\nmodule.exports = (uri, opts) => new Socket(uri, opts);\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nmodule.exports.Socket = Socket;\nmodule.exports.protocol = Socket.protocol; // this is an int\nmodule.exports.Transport = __webpack_require__(/*! ./transport */ \"./node_modules/engine.io-client/lib/transport.js\");\nmodule.exports.transports = __webpack_require__(/*! ./transports/index */ \"./node_modules/engine.io-client/lib/transports/index.js\");\nmodule.exports.parser = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/lib/index.js\");\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/index.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/socket.js":
/*!*****************************************************!*\
  !*** ./node_modules/engine.io-client/lib/socket.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const transports = __webpack_require__(/*! ./transports/index */ \"./node_modules/engine.io-client/lib/transports/index.js\");\nconst Emitter = __webpack_require__(/*! component-emitter */ \"./node_modules/component-emitter/index.js\");\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"engine.io-client:socket\");\nconst parser = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/lib/index.js\");\nconst parseuri = __webpack_require__(/*! parseuri */ \"./node_modules/parseuri/index.js\");\nconst parseqs = __webpack_require__(/*! parseqs */ \"./node_modules/parseqs/index.js\");\n\nclass Socket extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts = {}) {\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    this.secure =\n      null != opts.secure\n        ? opts.secure\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname =\n      opts.hostname ||\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port =\n      opts.port ||\n      (typeof location !== \"undefined\" && location.port\n        ? location.port\n        : this.secure\n        ? 443\n        : 80);\n\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n\n    this.opts = Object.assign(\n      {\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        jsonp: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: true\n      },\n      opts\n    );\n\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs.decode(this.opts.query);\n    }\n\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\n          \"beforeunload\",\n          () => {\n            if (this.transport) {\n              // silently close the transport\n              this.transport.removeAllListeners();\n              this.transport.close();\n            }\n          },\n          false\n        );\n      }\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\");\n        };\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n\n    this.open();\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query);\n\n    // append engine.io protocol identifier\n    query.EIO = parser.protocol;\n\n    // transport name\n    query.transport = name;\n\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n\n    const opts = Object.assign(\n      {},\n      this.opts.transportOptions[name],\n      this.opts,\n      {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }\n    );\n\n    debug(\"options: %j\", opts);\n\n    return new transports[name](opts);\n  }\n\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n  open() {\n    let transport;\n    if (\n      this.opts.rememberUpgrade &&\n      Socket.priorWebsocketSuccess &&\n      this.transports.indexOf(\"websocket\") !== -1\n    ) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      setTimeout(() => {\n        this.emit(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n\n    // set up transport\n    this.transport = transport;\n\n    // set up transport listeners\n    transport\n      .on(\"drain\", this.onDrain.bind(this))\n      .on(\"packet\", this.onPacket.bind(this))\n      .on(\"error\", this.onError.bind(this))\n      .on(\"close\", () => {\n        this.onClose(\"transport close\");\n      });\n  }\n\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name, { probe: 1 });\n    let failed = false;\n\n    Socket.priorWebsocketSuccess = false;\n\n    const onTransportOpen = () => {\n      if (failed) return;\n\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          this.upgrading = true;\n          this.emit(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n          debug('pausing current transport \"%s\"', this.transport.name);\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n\n            cleanup();\n\n            this.setTransport(transport);\n            transport.send([{ type: \"upgrade\" }]);\n            this.emit(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          this.emit(\"upgradeError\", err);\n        }\n      });\n    };\n\n    function freezeTransport() {\n      if (failed) return;\n\n      // Any callback called by transport should be ignored since now\n      failed = true;\n\n      cleanup();\n\n      transport.close();\n      transport = null;\n    }\n\n    // Handle any error that happens while probing\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n\n      freezeTransport();\n\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n      this.emit(\"upgradeError\", error);\n    };\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n\n    // Remove all listeners on the transport and on self\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.removeListener(\"close\", onclose);\n      this.removeListener(\"upgrading\", onupgrade);\n    };\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n\n    transport.open();\n  }\n\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api public\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emit(\"open\");\n    this.flush();\n\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\n      \"open\" === this.readyState &&\n      this.opts.upgrade &&\n      this.transport.pause\n    ) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n  onPacket(packet) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n      this.emit(\"packet\", packet);\n\n      // Socket is live - any packet counts\n      this.emit(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emit(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} handshake obj\n   * @api private\n   */\n  onHandshake(data) {\n    this.emit(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n  resetPingTimeout() {\n    clearTimeout(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = setTimeout(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emit(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n  flush() {\n    if (\n      \"closed\" !== this.readyState &&\n      this.transport.writable &&\n      !this.upgrading &&\n      this.writeBuffer.length\n    ) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emit(\"flush\");\n    }\n  }\n\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emit(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n\n  /**\n   * Closes the connection.\n   *\n   * @api private\n   */\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      this.transport.close();\n    };\n\n    const cleanupAndClose = () => {\n      this.removeListener(\"upgrade\", cleanupAndClose);\n      this.removeListener(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emit(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose(reason, desc) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket close with reason: \"%s\"', reason);\n\n      // clear timers\n      clearTimeout(this.pingIntervalTimer);\n      clearTimeout(this.pingTimeoutTimer);\n\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n\n      // ensure transport won't stay open\n      this.transport.close();\n\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      }\n\n      // set ready state\n      this.readyState = \"closed\";\n\n      // clear session id\n      this.id = null;\n\n      // emit close event\n      this.emit(\"close\", reason, desc);\n\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i]))\n        filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  const o = {};\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\nmodule.exports = Socket;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/socket.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transport.js":
/*!********************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transport.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const parser = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/lib/index.js\");\nconst Emitter = __webpack_require__(/*! component-emitter */ \"./node_modules/component-emitter/index.js\");\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"engine.io-client:transport\");\n\nclass Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  constructor(opts) {\n    super();\n\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n\n  /**\n   * Emits an error.\n   *\n   * @param {String} str\n   * @return {Transport} for chaining\n   * @api public\n   */\n  onError(msg, desc) {\n    const err = new Error(msg);\n    err.type = \"TransportError\";\n    err.description = desc;\n    this.emit(\"error\", err);\n    return this;\n  }\n\n  /**\n   * Opens the transport.\n   *\n   * @api public\n   */\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n\n    return this;\n  }\n\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {\n      // this might happen if the transport was silently closed in the beforeunload event handler\n      debug(\"transport is not open, discarding packets\");\n    }\n  }\n\n  /**\n   * Called upon open\n   *\n   * @api private\n   */\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    this.emit(\"open\");\n  }\n\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @api private\n   */\n  onData(data) {\n    const packet = parser.decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n\n  /**\n   * Called with a decoded packet.\n   */\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n\n  /**\n   * Called upon close.\n   *\n   * @api private\n   */\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n}\n\nmodule.exports = Transport;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/transport.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const XMLHttpRequest = __webpack_require__(/*! ../../contrib/xmlhttprequest-ssl/XMLHttpRequest */ \"./node_modules/engine.io-client/lib/xmlhttprequest.js\");\nconst XHR = __webpack_require__(/*! ./polling-xhr */ \"./node_modules/engine.io-client/lib/transports/polling-xhr.js\");\nconst JSONP = __webpack_require__(/*! ./polling-jsonp */ \"./node_modules/engine.io-client/lib/transports/polling-jsonp.js\");\nconst websocket = __webpack_require__(/*! ./websocket */ \"./node_modules/engine.io-client/lib/transports/websocket.js\");\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling(opts) {\n  let xhr;\n  let xd = false;\n  let xs = false;\n  const jsonp = false !== opts.jsonp;\n\n  if (typeof location !== \"undefined\") {\n    const isSSL = \"https:\" === location.protocol;\n    let port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if (\"open\" in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error(\"JSONP disabled\");\n    return new JSONP(opts);\n  }\n}\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/transports/index.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling-jsonp.js":
/*!***********************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling-jsonp.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Polling = __webpack_require__(/*! ./polling */ \"./node_modules/engine.io-client/lib/transports/polling.js\");\nconst globalThis = __webpack_require__(/*! ../globalThis */ \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\nconst rNewline = /\\n/g;\nconst rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nlet callbacks;\n\nclass JSONPPolling extends Polling {\n  /**\n   * JSONP Polling constructor.\n   *\n   * @param {Object} opts.\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.query = this.query || {};\n\n    // define global callbacks array if not present\n    // we do this here (lazily) to avoid unneeded global pollution\n    if (!callbacks) {\n      // we need to consider multiple engines in the same page\n      callbacks = globalThis.___eio = globalThis.___eio || [];\n    }\n\n    // callback identifier\n    this.index = callbacks.length;\n\n    // add callback to jsonp global\n    callbacks.push(this.onData.bind(this));\n\n    // append to query string\n    this.query.j = this.index;\n  }\n\n  /**\n   * JSONP only supports binary as base64 encoded strings\n   */\n  get supportsBinary() {\n    return false;\n  }\n\n  /**\n   * Closes the socket.\n   *\n   * @api private\n   */\n  doClose() {\n    if (this.script) {\n      // prevent spurious errors from being emitted when the window is unloaded\n      this.script.onerror = () => {};\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    if (this.form) {\n      this.form.parentNode.removeChild(this.form);\n      this.form = null;\n      this.iframe = null;\n    }\n\n    super.doClose();\n  }\n\n  /**\n   * Starts a poll cycle.\n   *\n   * @api private\n   */\n  doPoll() {\n    const script = document.createElement(\"script\");\n\n    if (this.script) {\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    script.async = true;\n    script.src = this.uri();\n    script.onerror = e => {\n      this.onError(\"jsonp poll error\", e);\n    };\n\n    const insertAt = document.getElementsByTagName(\"script\")[0];\n    if (insertAt) {\n      insertAt.parentNode.insertBefore(script, insertAt);\n    } else {\n      (document.head || document.body).appendChild(script);\n    }\n    this.script = script;\n\n    const isUAgecko =\n      \"undefined\" !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n    if (isUAgecko) {\n      setTimeout(function() {\n        const iframe = document.createElement(\"iframe\");\n        document.body.appendChild(iframe);\n        document.body.removeChild(iframe);\n      }, 100);\n    }\n  }\n\n  /**\n   * Writes with a hidden iframe.\n   *\n   * @param {String} data to send\n   * @param {Function} called upon flush.\n   * @api private\n   */\n  doWrite(data, fn) {\n    let iframe;\n\n    if (!this.form) {\n      const form = document.createElement(\"form\");\n      const area = document.createElement(\"textarea\");\n      const id = (this.iframeId = \"eio_iframe_\" + this.index);\n\n      form.className = \"socketio\";\n      form.style.position = \"absolute\";\n      form.style.top = \"-1000px\";\n      form.style.left = \"-1000px\";\n      form.target = id;\n      form.method = \"POST\";\n      form.setAttribute(\"accept-charset\", \"utf-8\");\n      area.name = \"d\";\n      form.appendChild(area);\n      document.body.appendChild(form);\n\n      this.form = form;\n      this.area = area;\n    }\n\n    this.form.action = this.uri();\n\n    function complete() {\n      initIframe();\n      fn();\n    }\n\n    const initIframe = () => {\n      if (this.iframe) {\n        try {\n          this.form.removeChild(this.iframe);\n        } catch (e) {\n          this.onError(\"jsonp polling iframe removal error\", e);\n        }\n      }\n\n      try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        const html = '<iframe src=\"javascript:0\" name=\"' + this.iframeId + '\">';\n        iframe = document.createElement(html);\n      } catch (e) {\n        iframe = document.createElement(\"iframe\");\n        iframe.name = this.iframeId;\n        iframe.src = \"javascript:0\";\n      }\n\n      iframe.id = this.iframeId;\n\n      this.form.appendChild(iframe);\n      this.iframe = iframe;\n    };\n\n    initIframe();\n\n    // escape \\n to prevent it from being converted into \\r\\n by some UAs\n    // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n    data = data.replace(rEscapedNewline, \"\\\\\\n\");\n    this.area.value = data.replace(rNewline, \"\\\\n\");\n\n    try {\n      this.form.submit();\n    } catch (e) {}\n\n    if (this.iframe.attachEvent) {\n      this.iframe.onreadystatechange = () => {\n        if (this.iframe.readyState === \"complete\") {\n          complete();\n        }\n      };\n    } else {\n      this.iframe.onload = complete;\n    }\n  }\n}\n\nmodule.exports = JSONPPolling;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/transports/polling-jsonp.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling-xhr.js":
/*!*********************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling-xhr.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* global attachEvent */\n\nconst XMLHttpRequest = __webpack_require__(/*! ../../contrib/xmlhttprequest-ssl/XMLHttpRequest */ \"./node_modules/engine.io-client/lib/xmlhttprequest.js\");\nconst Polling = __webpack_require__(/*! ./polling */ \"./node_modules/engine.io-client/lib/transports/polling.js\");\nconst Emitter = __webpack_require__(/*! component-emitter */ \"./node_modules/component-emitter/index.js\");\nconst { pick } = __webpack_require__(/*! ../util */ \"./node_modules/engine.io-client/lib/util.js\");\nconst globalThis = __webpack_require__(/*! ../globalThis */ \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"engine.io-client:polling-xhr\");\n\n/**\n * Empty function\n */\n\nfunction empty() {}\n\nconst hasXHR2 = (function() {\n  const xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\nclass XHR extends Polling {\n  /**\n   * XHR Polling constructor.\n   *\n   * @param {Object} opts\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port;\n\n      // some user agents have empty `location.port`\n      if (!port) {\n        port = isSSL ? 443 : 80;\n      }\n\n      this.xd =\n        (typeof location !== \"undefined\" &&\n          opts.hostname !== location.hostname) ||\n        port !== opts.port;\n      this.xs = opts.secure !== isSSL;\n    }\n    /**\n     * XHR supports binary\n     */\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n\n  /**\n   * Creates a request.\n   *\n   * @param {String} method\n   * @api private\n   */\n  request(opts = {}) {\n    Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\n    return new Request(this.uri(), opts);\n  }\n\n  /**\n   * Sends data.\n   *\n   * @param {String} data to send.\n   * @param {Function} called upon flush.\n   * @api private\n   */\n  doWrite(data, fn) {\n    const req = this.request({\n      method: \"POST\",\n      data: data\n    });\n    req.on(\"success\", fn);\n    req.on(\"error\", err => {\n      this.onError(\"xhr post error\", err);\n    });\n  }\n\n  /**\n   * Starts a poll cycle.\n   *\n   * @api private\n   */\n  doPoll() {\n    debug(\"xhr poll\");\n    const req = this.request();\n    req.on(\"data\", this.onData.bind(this));\n    req.on(\"error\", err => {\n      this.onError(\"xhr poll error\", err);\n    });\n    this.pollXhr = req;\n  }\n}\n\nclass Request extends Emitter {\n  /**\n   * Request constructor\n   *\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts) {\n    super();\n    this.opts = opts;\n\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.async = false !== opts.async;\n    this.data = undefined !== opts.data ? opts.data : null;\n\n    this.create();\n  }\n\n  /**\n   * Creates the XHR object and sends the request.\n   *\n   * @api private\n   */\n  create() {\n    const opts = pick(\n      this.opts,\n      \"agent\",\n      \"enablesXDR\",\n      \"pfx\",\n      \"key\",\n      \"passphrase\",\n      \"cert\",\n      \"ca\",\n      \"ciphers\",\n      \"rejectUnauthorized\",\n      \"autoUnref\"\n    );\n    opts.xdomain = !!this.opts.xd;\n    opts.xscheme = !!this.opts.xs;\n\n    const xhr = (this.xhr = new XMLHttpRequest(opts));\n\n    try {\n      debug(\"xhr open %s: %s\", this.method, this.uri);\n      xhr.open(this.method, this.uri, this.async);\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {}\n\n      if (\"POST\" === this.method) {\n        try {\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (e) {}\n      }\n\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {}\n\n      // ie6 check\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n\n      if (this.hasXDR()) {\n        xhr.onload = () => {\n          this.onLoad();\n        };\n        xhr.onerror = () => {\n          this.onError(xhr.responseText);\n        };\n      } else {\n        xhr.onreadystatechange = () => {\n          if (4 !== xhr.readyState) return;\n          if (200 === xhr.status || 1223 === xhr.status) {\n            this.onLoad();\n          } else {\n            // make sure the `error` event handler that's user-set\n            // does not throw in the same tick and gets caught here\n            setTimeout(() => {\n              this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n            }, 0);\n          }\n        };\n      }\n\n      debug(\"xhr data %s\", this.data);\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      setTimeout(() => {\n        this.onError(e);\n      }, 0);\n      return;\n    }\n\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n\n  /**\n   * Called upon successful response.\n   *\n   * @api private\n   */\n  onSuccess() {\n    this.emit(\"success\");\n    this.cleanup();\n  }\n\n  /**\n   * Called if we have data.\n   *\n   * @api private\n   */\n  onData(data) {\n    this.emit(\"data\", data);\n    this.onSuccess();\n  }\n\n  /**\n   * Called upon error.\n   *\n   * @api private\n   */\n  onError(err) {\n    this.emit(\"error\", err);\n    this.cleanup(true);\n  }\n\n  /**\n   * Cleans up house.\n   *\n   * @api private\n   */\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    }\n    // xmlhttprequest\n    if (this.hasXDR()) {\n      this.xhr.onload = this.xhr.onerror = empty;\n    } else {\n      this.xhr.onreadystatechange = empty;\n    }\n\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n\n    this.xhr = null;\n  }\n\n  /**\n   * Called upon load.\n   *\n   * @api private\n   */\n  onLoad() {\n    const data = this.xhr.responseText;\n    if (data !== null) {\n      this.onData(data);\n    }\n  }\n\n  /**\n   * Check if it has XDomainRequest.\n   *\n   * @api private\n   */\n  hasXDR() {\n    return typeof XDomainRequest !== \"undefined\" && !this.xs && this.enablesXDR;\n  }\n\n  /**\n   * Aborts the request.\n   *\n   * @api public\n   */\n  abort() {\n    this.cleanup();\n  }\n}\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (typeof document !== \"undefined\") {\n  if (typeof attachEvent === \"function\") {\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/transports/polling-xhr.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Transport = __webpack_require__(/*! ../transport */ \"./node_modules/engine.io-client/lib/transport.js\");\nconst parseqs = __webpack_require__(/*! parseqs */ \"./node_modules/parseqs/index.js\");\nconst parser = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/lib/index.js\");\nconst yeast = __webpack_require__(/*! yeast */ \"./node_modules/yeast/index.js\");\n\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"engine.io-client:polling\");\n\nclass Polling extends Transport {\n  /**\n   * Transport name.\n   */\n  get name() {\n    return \"polling\";\n  }\n\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @api private\n   */\n  doOpen() {\n    this.poll();\n  }\n\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} callback upon buffers are flushed and transport is paused\n   * @api private\n   */\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function() {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function() {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n\n  /**\n   * Starts polling cycle.\n   *\n   * @api public\n   */\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emit(\"poll\");\n  }\n\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @api private\n   */\n  onData(data) {\n    debug(\"polling got data %s\", data);\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        this.onClose();\n        return false;\n      }\n\n      // otherwise bypass onData and handle the message\n      this.onPacket(packet);\n    };\n\n    // decode payload\n    parser.decodePayload(data, this.socket.binaryType).forEach(callback);\n\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emit(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n\n  /**\n   * For polling, send a close packet.\n   *\n   * @api private\n   */\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{ type: \"close\" }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} data packets\n   * @param {Function} drain callback\n   * @api private\n   */\n  write(packets) {\n    this.writable = false;\n\n    parser.encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emit(\"drain\");\n      });\n    });\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\";\n\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n        (\"http\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n}\n\nmodule.exports = Polling;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/transports/polling.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const globalThis = __webpack_require__(/*! ../globalThis */ \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\nmodule.exports = {\n  WebSocket: globalThis.WebSocket || globalThis.MozWebSocket,\n  usingBrowserWebSocket: true,\n  defaultBinaryType: \"arraybuffer\"\n};\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/websocket.js":
/*!*******************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/websocket.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Transport = __webpack_require__(/*! ../transport */ \"./node_modules/engine.io-client/lib/transport.js\");\nconst parser = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/lib/index.js\");\nconst parseqs = __webpack_require__(/*! parseqs */ \"./node_modules/parseqs/index.js\");\nconst yeast = __webpack_require__(/*! yeast */ \"./node_modules/yeast/index.js\");\nconst { pick } = __webpack_require__(/*! ../util */ \"./node_modules/engine.io-client/lib/util.js\");\nconst {\n  WebSocket,\n  usingBrowserWebSocket,\n  defaultBinaryType\n} = __webpack_require__(/*! ./websocket-constructor */ \"./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js\");\n\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"engine.io-client:websocket\");\n\n// detect ReactNative environment\nconst isReactNative =\n  typeof navigator !== \"undefined\" &&\n  typeof navigator.product === \"string\" &&\n  navigator.product.toLowerCase() === \"reactnative\";\n\nclass WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.supportsBinary = !opts.forceBase64;\n  }\n\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n  get name() {\n    return \"websocket\";\n  }\n\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols;\n\n    // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n    const opts = isReactNative\n      ? {}\n      : pick(\n          this.opts,\n          \"agent\",\n          \"perMessageDeflate\",\n          \"pfx\",\n          \"key\",\n          \"passphrase\",\n          \"cert\",\n          \"ca\",\n          \"ciphers\",\n          \"rejectUnauthorized\",\n          \"localAddress\",\n          \"protocolVersion\",\n          \"origin\",\n          \"maxPayload\",\n          \"family\",\n          \"checkServerIdentity\"\n        );\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws =\n        usingBrowserWebSocket && !isReactNative\n          ? protocols\n            ? new WebSocket(uri, protocols)\n            : new WebSocket(uri)\n          : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emit(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n\n    this.addEventListeners();\n  }\n\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n      this.onOpen();\n    };\n    this.ws.onclose = this.onClose.bind(this);\n    this.ws.onmessage = ev => this.onData(ev.data);\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n  write(packets) {\n    this.writable = false;\n\n    // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n\n      parser.encodePacket(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n        if (!usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (this.opts.perMessageDeflate) {\n            const len =\n              \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {\n          debug(\"websocket closed before onclose event\");\n        }\n\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          setTimeout(() => {\n            this.writable = true;\n            this.emit(\"drain\");\n          }, 0);\n        }\n      });\n    }\n  }\n\n  /**\n   * Called upon close\n   *\n   * @api private\n   */\n  onClose() {\n    Transport.prototype.onClose.call(this);\n  }\n\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\";\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n        (\"ws\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // append timestamp to URI\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    // communicate binary support capabilities\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n  check() {\n    return (\n      !!WebSocket &&\n      !(\"__initialize\" in WebSocket && this.name === WS.prototype.name)\n    );\n  }\n}\n\nmodule.exports = WS;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/transports/websocket.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/util.js":
/*!***************************************************!*\
  !*** ./node_modules/engine.io-client/lib/util.js ***!
  \***************************************************/
/***/ ((module) => {

eval("module.exports.pick = (obj, ...attr) => {\n  return attr.reduce((acc, k) => {\n    if (obj.hasOwnProperty(k)) {\n      acc[k] = obj[k];\n    }\n    return acc;\n  }, {});\n};\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/util.js?");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/xmlhttprequest.js":
/*!*************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/xmlhttprequest.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// browser shim for xmlhttprequest module\n\nconst hasCORS = __webpack_require__(/*! has-cors */ \"./node_modules/has-cors/index.js\");\nconst globalThis = __webpack_require__(/*! ./globalThis */ \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\nmodule.exports = function(opts) {\n  const xdomain = opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  const xscheme = opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  const enablesXDR = opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) {}\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if (\"undefined\" !== typeof XDomainRequest && !xscheme && enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) {}\n\n  if (!xdomain) {\n    try {\n      return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\n        \"Microsoft.XMLHTTP\"\n      );\n    } catch (e) {}\n  }\n};\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-client/lib/xmlhttprequest.js?");

/***/ }),

/***/ "./node_modules/engine.io-parser/lib/commons.js":
/*!******************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/commons.js ***!
  \******************************************************/
/***/ ((module) => {

eval("const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\n\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n  PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\n\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\n\nmodule.exports = {\n  PACKET_TYPES,\n  PACKET_TYPES_REVERSE,\n  ERROR_PACKET\n};\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-parser/lib/commons.js?");

/***/ }),

/***/ "./node_modules/engine.io-parser/lib/decodePacket.browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/decodePacket.browser.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { PACKET_TYPES_REVERSE, ERROR_PACKET } = __webpack_require__(/*! ./commons */ \"./node_modules/engine.io-parser/lib/commons.js\");\n\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n\nlet base64decoder;\nif (withNativeArrayBuffer) {\n  base64decoder = __webpack_require__(/*! base64-arraybuffer */ \"./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js\");\n}\n\nconst decodePacket = (encodedPacket, binaryType) => {\n  if (typeof encodedPacket !== \"string\") {\n    return {\n      type: \"message\",\n      data: mapBinary(encodedPacket, binaryType)\n    };\n  }\n  const type = encodedPacket.charAt(0);\n  if (type === \"b\") {\n    return {\n      type: \"message\",\n      data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n    };\n  }\n  const packetType = PACKET_TYPES_REVERSE[type];\n  if (!packetType) {\n    return ERROR_PACKET;\n  }\n  return encodedPacket.length > 1\n    ? {\n        type: PACKET_TYPES_REVERSE[type],\n        data: encodedPacket.substring(1)\n      }\n    : {\n        type: PACKET_TYPES_REVERSE[type]\n      };\n};\n\nconst decodeBase64Packet = (data, binaryType) => {\n  if (base64decoder) {\n    const decoded = base64decoder.decode(data);\n    return mapBinary(decoded, binaryType);\n  } else {\n    return { base64: true, data }; // fallback for old browsers\n  }\n};\n\nconst mapBinary = (data, binaryType) => {\n  switch (binaryType) {\n    case \"blob\":\n      return data instanceof ArrayBuffer ? new Blob([data]) : data;\n    case \"arraybuffer\":\n    default:\n      return data; // assuming the data is already an ArrayBuffer\n  }\n};\n\nmodule.exports = decodePacket;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-parser/lib/decodePacket.browser.js?");

/***/ }),

/***/ "./node_modules/engine.io-parser/lib/encodePacket.browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/encodePacket.browser.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { PACKET_TYPES } = __webpack_require__(/*! ./commons */ \"./node_modules/engine.io-parser/lib/commons.js\");\n\nconst withNativeBlob =\n  typeof Blob === \"function\" ||\n  (typeof Blob !== \"undefined\" &&\n    Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n  return typeof ArrayBuffer.isView === \"function\"\n    ? ArrayBuffer.isView(obj)\n    : obj && obj.buffer instanceof ArrayBuffer;\n};\n\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n  if (withNativeBlob && data instanceof Blob) {\n    if (supportsBinary) {\n      return callback(data);\n    } else {\n      return encodeBlobAsBase64(data, callback);\n    }\n  } else if (\n    withNativeArrayBuffer &&\n    (data instanceof ArrayBuffer || isView(data))\n  ) {\n    if (supportsBinary) {\n      return callback(data instanceof ArrayBuffer ? data : data.buffer);\n    } else {\n      return encodeBlobAsBase64(new Blob([data]), callback);\n    }\n  }\n  // plain string\n  return callback(PACKET_TYPES[type] + (data || \"\"));\n};\n\nconst encodeBlobAsBase64 = (data, callback) => {\n  const fileReader = new FileReader();\n  fileReader.onload = function() {\n    const content = fileReader.result.split(\",\")[1];\n    callback(\"b\" + content);\n  };\n  return fileReader.readAsDataURL(data);\n};\n\nmodule.exports = encodePacket;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-parser/lib/encodePacket.browser.js?");

/***/ }),

/***/ "./node_modules/engine.io-parser/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const encodePacket = __webpack_require__(/*! ./encodePacket */ \"./node_modules/engine.io-parser/lib/encodePacket.browser.js\");\nconst decodePacket = __webpack_require__(/*! ./decodePacket */ \"./node_modules/engine.io-parser/lib/decodePacket.browser.js\");\n\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    encodePacket(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\n\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n  return packets;\n};\n\nmodule.exports = {\n  protocol: 4,\n  encodePacket,\n  encodePayload,\n  decodePacket,\n  decodePayload\n};\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/engine.io-parser/lib/index.js?");

/***/ }),

/***/ "./node_modules/has-cors/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-cors/index.js ***!
  \****************************************/
/***/ ((module) => {

eval("\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\n    'withCredentials' in new XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports = false;\n}\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/has-cors/index.js?");

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/parseqs/index.js":
/*!***************************************!*\
  !*** ./node_modules/parseqs/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\n\nexports.encode = function (obj) {\n  var str = '';\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (str.length) str += '&';\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n    }\n  }\n\n  return str;\n};\n\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\n\nexports.decode = function(qs){\n  var qry = {};\n  var pairs = qs.split('&');\n  for (var i = 0, l = pairs.length; i < l; i++) {\n    var pair = pairs[i].split('=');\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n  }\n  return qry;\n};\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/parseqs/index.js?");

/***/ }),

/***/ "./node_modules/parseuri/index.js":
/*!****************************************!*\
  !*** ./node_modules/parseuri/index.js ***!
  \****************************************/
/***/ ((module) => {

eval("/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\n\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports = function parseuri(str) {\n    var src = str,\n        b = str.indexOf('['),\n        e = str.indexOf(']');\n\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n\n    var m = re.exec(str || ''),\n        uri = {},\n        i = 14;\n\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n\n    return uri;\n};\n\nfunction pathNames(obj, path) {\n    var regx = /\\/{2,9}/g,\n        names = path.replace(regx, \"/\").split(\"/\");\n\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n\n    return names;\n}\n\nfunction queryKey(uri, query) {\n    var data = {};\n\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n\n    return data;\n}\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/parseuri/index.js?");

/***/ }),

/***/ "./node_modules/socket.io-client/build/index.js":
/*!******************************************************!*\
  !*** ./node_modules/socket.io-client/build/index.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.io = exports.Socket = exports.Manager = exports.protocol = void 0;\nconst url_1 = __webpack_require__(/*! ./url */ \"./node_modules/socket.io-client/build/url.js\");\nconst manager_1 = __webpack_require__(/*! ./manager */ \"./node_modules/socket.io-client/build/manager.js\");\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"socket.io-client\");\n/**\n * Module exports.\n */\nmodule.exports = exports = lookup;\n/**\n * Managers cache.\n */\nconst cache = (exports.managers = {});\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url_1.url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        debug(\"ignoring socket cache for %s\", source);\n        io = new manager_1.Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            debug(\"new io instance for %s\", source);\n            cache[id] = new manager_1.Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\nexports.io = lookup;\n/**\n * Protocol version.\n *\n * @public\n */\nvar socket_io_parser_1 = __webpack_require__(/*! socket.io-parser */ \"./node_modules/socket.io-parser/dist/index.js\");\nObject.defineProperty(exports, \"protocol\", ({ enumerable: true, get: function () { return socket_io_parser_1.protocol; } }));\n/**\n * `connect`.\n *\n * @param {String} uri\n * @public\n */\nexports.connect = lookup;\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nvar manager_2 = __webpack_require__(/*! ./manager */ \"./node_modules/socket.io-client/build/manager.js\");\nObject.defineProperty(exports, \"Manager\", ({ enumerable: true, get: function () { return manager_2.Manager; } }));\nvar socket_1 = __webpack_require__(/*! ./socket */ \"./node_modules/socket.io-client/build/socket.js\");\nObject.defineProperty(exports, \"Socket\", ({ enumerable: true, get: function () { return socket_1.Socket; } }));\nexports.default = lookup;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-client/build/index.js?");

/***/ }),

/***/ "./node_modules/socket.io-client/build/manager.js":
/*!********************************************************!*\
  !*** ./node_modules/socket.io-client/build/manager.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Manager = void 0;\nconst eio = __webpack_require__(/*! engine.io-client */ \"./node_modules/engine.io-client/lib/index.js\");\nconst socket_1 = __webpack_require__(/*! ./socket */ \"./node_modules/socket.io-client/build/socket.js\");\nconst parser = __webpack_require__(/*! socket.io-parser */ \"./node_modules/socket.io-parser/dist/index.js\");\nconst on_1 = __webpack_require__(/*! ./on */ \"./node_modules/socket.io-client/build/on.js\");\nconst Backoff = __webpack_require__(/*! backo2 */ \"./node_modules/backo2/index.js\");\nconst typed_events_1 = __webpack_require__(/*! ./typed-events */ \"./node_modules/socket.io-client/build/typed-events.js\");\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"socket.io-client:manager\");\nclass Manager extends typed_events_1.StrictEventEmitter {\n    constructor(uri, opts) {\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor(opts.randomizationFactor || 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = eio(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on_1.on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on_1.on(socket, \"error\", (err) => {\n            debug(\"error\");\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            debug(\"connect attempt will timeout after %d\", timeout);\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = setTimeout(() => {\n                debug(\"connect attempt timed out after %d\", timeout);\n                openSubDestroy();\n                socket.close();\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"open\");\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on_1.on(socket, \"ping\", this.onping.bind(this)), on_1.on(socket, \"data\", this.ondata.bind(this)), on_1.on(socket, \"error\", this.onerror.bind(this)), on_1.on(socket, \"close\", this.onclose.bind(this)), on_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        debug(\"error\", err);\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new socket_1.Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                debug(\"socket %s is still active, skipping close\", nsp);\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        debug(\"cleanup\");\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        if (\"opening\" === this._readyState) {\n            // `onclose` will not fire because\n            // an open event never happened\n            this.cleanup();\n        }\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        debug(\"onclose\");\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug(\"reconnect failed\");\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            debug(\"will wait %dms before reconnect attempt\", delay);\n            this._reconnecting = true;\n            const timer = setTimeout(() => {\n                if (self.skipReconnect)\n                    return;\n                debug(\"attempting reconnect\");\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        debug(\"reconnect attempt error\");\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        debug(\"reconnect success\");\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\nexports.Manager = Manager;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-client/build/manager.js?");

/***/ }),

/***/ "./node_modules/socket.io-client/build/on.js":
/*!***************************************************!*\
  !*** ./node_modules/socket.io-client/build/on.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.on = void 0;\nfunction on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\nexports.on = on;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-client/build/on.js?");

/***/ }),

/***/ "./node_modules/socket.io-client/build/socket.js":
/*!*******************************************************!*\
  !*** ./node_modules/socket.io-client/build/socket.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Socket = void 0;\nconst socket_io_parser_1 = __webpack_require__(/*! socket.io-parser */ \"./node_modules/socket.io-parser/dist/index.js\");\nconst on_1 = __webpack_require__(/*! ./on */ \"./node_modules/socket.io-client/build/on.js\");\nconst typed_events_1 = __webpack_require__(/*! ./typed-events */ \"./node_modules/socket.io-client/build/typed-events.js\");\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass Socket extends typed_events_1.StrictEventEmitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        this.ids = 0;\n        this.acks = {};\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.connected = false;\n        this.disconnected = true;\n        this.flags = {};\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_1.on(io, \"open\", this.onopen.bind(this)),\n            on_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_1.on(io, \"error\", this.onerror.bind(this)),\n            on_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            debug(\"emitting packet with ack id %d\", this.ids);\n            this.acks[this.ids] = args.pop();\n            packet.id = this.ids++;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\nexports.Socket = Socket;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-client/build/socket.js?");

/***/ }),

/***/ "./node_modules/socket.io-client/build/typed-events.js":
/*!*************************************************************!*\
  !*** ./node_modules/socket.io-client/build/typed-events.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StrictEventEmitter = void 0;\nconst Emitter = __webpack_require__(/*! component-emitter */ \"./node_modules/component-emitter/index.js\");\n/**\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\n * parameters for mappings of event names to event data types, and strictly\n * types method calls to the `EventEmitter` according to these event maps.\n *\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\n * listened to with `on` or `once`\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\n * emitted with `emit`\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\n * emitted by socket.io with `emitReserved`, and can be listened to with\n * `listen`.\n */\nclass StrictEventEmitter extends Emitter {\n    /**\n     * Adds the `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n    on(ev, listener) {\n        super.on(ev, listener);\n        return this;\n    }\n    /**\n     * Adds a one-time `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n    once(ev, listener) {\n        super.once(ev, listener);\n        return this;\n    }\n    /**\n     * Emits an event.\n     *\n     * @param ev Name of the event\n     * @param args Values to send to listeners of this event\n     */\n    emit(ev, ...args) {\n        super.emit(ev, ...args);\n        return this;\n    }\n    /**\n     * Emits a reserved event.\n     *\n     * This method is `protected`, so that only a class extending\n     * `StrictEventEmitter` can emit its own reserved events.\n     *\n     * @param ev Reserved event name\n     * @param args Arguments to emit along with the event\n     */\n    emitReserved(ev, ...args) {\n        super.emit(ev, ...args);\n        return this;\n    }\n    /**\n     * Returns the listeners listening to an event.\n     *\n     * @param event Event name\n     * @returns Array of listeners subscribed to `event`\n     */\n    listeners(event) {\n        return super.listeners(event);\n    }\n}\nexports.StrictEventEmitter = StrictEventEmitter;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-client/build/typed-events.js?");

/***/ }),

/***/ "./node_modules/socket.io-client/build/url.js":
/*!****************************************************!*\
  !*** ./node_modules/socket.io-client/build/url.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.url = void 0;\nconst parseuri = __webpack_require__(/*! parseuri */ \"./node_modules/parseuri/index.js\");\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"socket.io-client:url\");\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nfunction url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            debug(\"protocol-less url %s\", uri);\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        debug(\"parse %s\", uri);\n        obj = parseuri(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\nexports.url = url;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-client/build/url.js?");

/***/ }),

/***/ "./node_modules/socket.io-parser/dist/binary.js":
/*!******************************************************!*\
  !*** ./node_modules/socket.io-parser/dist/binary.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.reconstructPacket = exports.deconstructPacket = void 0;\nconst is_binary_1 = __webpack_require__(/*! ./is-binary */ \"./node_modules/socket.io-parser/dist/is-binary.js\");\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nfunction deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nexports.deconstructPacket = deconstructPacket;\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (is_binary_1.isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nfunction reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    packet.attachments = undefined; // no longer useful\n    return packet;\n}\nexports.reconstructPacket = reconstructPacket;\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder) {\n        return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-parser/dist/binary.js?");

/***/ }),

/***/ "./node_modules/socket.io-parser/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/socket.io-parser/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nconst Emitter = __webpack_require__(/*! component-emitter */ \"./node_modules/component-emitter/index.js\");\nconst binary_1 = __webpack_require__(/*! ./binary */ \"./node_modules/socket.io-parser/dist/binary.js\");\nconst is_binary_1 = __webpack_require__(/*! ./is-binary */ \"./node_modules/socket.io-parser/dist/is-binary.js\");\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")(\"socket.io-parser\");\n/**\n * Protocol version.\n *\n * @public\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nclass Encoder {\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        debug(\"encoding packet %j\", obj);\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (is_binary_1.hasBinary(obj)) {\n                obj.type =\n                    obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK;\n                return this.encodeAsBinary(obj);\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data);\n        }\n        debug(\"encoded %j as %s\", obj, str);\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = binary_1.deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\nexports.Encoder = Encoder;\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nclass Decoder extends Emitter {\n    constructor() {\n        super();\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emit(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emit(\"decoded\", packet);\n            }\n        }\n        else if (is_binary_1.isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emit(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        debug(\"decoded %s as %j\", str, p);\n        return p;\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n        }\n    }\n}\nexports.Decoder = Decoder;\nfunction tryParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = binary_1.reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-parser/dist/index.js?");

/***/ }),

/***/ "./node_modules/socket.io-parser/dist/is-binary.js":
/*!*********************************************************!*\
  !*** ./node_modules/socket.io-parser/dist/is-binary.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasBinary = exports.isBinary = void 0;\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nfunction isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexports.isBinary = isBinary;\nfunction hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hasBinary = hasBinary;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/socket.io-parser/dist/is-binary.js?");

/***/ }),

/***/ "./node_modules/svg.js/dist/svg.js":
/*!*****************************************!*\
  !*** ./node_modules/svg.js/dist/svg.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){\r\n      return factory(root, root.document)\r\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\r\n  } else {}\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r\n\n//# sourceURL=webpack://reactInAction/./node_modules/svg.js/dist/svg.js?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mainController\": () => (/* binding */ mainController)\n/* harmony export */ });\n/* harmony import */ var _smallTest_mainControllerFolder_mainController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./smallTest/mainControllerFolder/mainController */ \"./src/smallTest/mainControllerFolder/mainController.ts\");\n/* harmony import */ var _smallTest_ToolboxModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./smallTest/ToolboxModel */ \"./src/smallTest/ToolboxModel.ts\");\n/* harmony import */ var _smallTest_socketFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./smallTest/socketFunction */ \"./src/smallTest/socketFunction.ts\");\n\n\n\nvar mainController;\nmainController = new _smallTest_mainControllerFolder_mainController__WEBPACK_IMPORTED_MODULE_0__.MainController();\n// console.log(PageController.highlightCurrentPageInOverviewMode)\nmainController.toolBox = new _smallTest_ToolboxModel__WEBPACK_IMPORTED_MODULE_1__.ToolBoxClass();\n// to create the attributeControllers\nlet urlSplitArray = location.href.split(\"/\");\nlet notebookID = urlSplitArray[urlSplitArray.length - 1];\nmainController.notebookID = notebookID;\nconsole.log(14141414, notebookID);\n_smallTest_socketFunction__WEBPACK_IMPORTED_MODULE_2__.socket.emit(\"initialDataRequest\", notebookID); // processInitialDat\nconsole.log(202020202, mainController.uniqueNodeId);\nsetInterval(function () {\n    if (mainController.changeList.length > 0) {\n        mainController.changeList = mainController.changeList.map(p => {\n            p.metaData.socketId = _smallTest_socketFunction__WEBPACK_IMPORTED_MODULE_2__.socket.id;\n            return p;\n        });\n        console.log(21212121, mainController.changeList);\n        _smallTest_socketFunction__WEBPACK_IMPORTED_MODULE_2__.socket.emit(\"clientSendChangesToServer\", mainController.changeList);\n        mainController.changeList = [];\n    }\n}, 1000);\n\n\n//# sourceURL=webpack://reactInAction/./src/index.ts?");

/***/ }),

/***/ "./src/smallTest/EventFolder/attachToolBoxEventsToLayers.ts":
/*!******************************************************************!*\
  !*** ./src/smallTest/EventFolder/attachToolBoxEventsToLayers.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"attachEventListenerToSvgBoard\": () => (/* binding */ attachEventListenerToSvgBoard),\n/* harmony export */   \"attachEventListenerToDivLayer\": () => (/* binding */ attachEventListenerToDivLayer)\n/* harmony export */ });\n/* harmony import */ var _ToolboxFolder_ToolboxEventFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ToolboxFolder/ToolboxEventFunction */ \"./src/smallTest/ToolboxFolder/ToolboxEventFunction.ts\");\n/* harmony import */ var _ToolboxFolder_eraserFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ToolboxFolder/eraserFunction */ \"./src/smallTest/ToolboxFolder/eraserFunction.ts\");\n/* harmony import */ var _ToolboxFolder_selectionToolFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ToolboxFolder/selectionToolFunction */ \"./src/smallTest/ToolboxFolder/selectionToolFunction.ts\");\n/* harmony import */ var _ToolboxFolder_rectangleSelectionFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ToolboxFolder/rectangleSelectionFunction */ \"./src/smallTest/ToolboxFolder/rectangleSelectionFunction.ts\");\n/* harmony import */ var _ToolboxFolder_addCommentFunction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ToolboxFolder/addCommentFunction */ \"./src/smallTest/ToolboxFolder/addCommentFunction.ts\");\n/* harmony import */ var _ToolboxFolder_moveObjectInDivFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ToolboxFolder/moveObjectInDivFunction */ \"./src/smallTest/ToolboxFolder/moveObjectInDivFunction.ts\");\n/* harmony import */ var _ToolboxFolder_textToolHelperFunction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ToolboxFolder/textToolHelperFunction */ \"./src/smallTest/ToolboxFolder/textToolHelperFunction.ts\");\n/* harmony import */ var _ToolboxFolder_textBoxHelperFunction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ToolboxFolder/textBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/textBoxHelperFunction.ts\");\n/* harmony import */ var _ToolboxFolder_addBookmarkFunction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ToolboxFolder/addBookmarkFunction */ \"./src/smallTest/ToolboxFolder/addBookmarkFunction.ts\");\n\n\n\n\n\n\n\n\n\nfunction attachEventListenerToSvgBoard(mainController, svgBoard) {\n    if (svgBoard.getAttribute(\"eventAttached\") == \"true\")\n        return;\n    svgBoard.setAttribute(\"eventAttached\", \"true\");\n    let polylineMouseDown = {\n        eventNameList: [\"touchstart\"],\n        eventFunction: (e) => {\n            (0,_ToolboxFolder_ToolboxEventFunction__WEBPACK_IMPORTED_MODULE_0__.polylineMouseDownFunction)(e, mainController, svgBoard, \"touchmove\", \"touchend\");\n        }\n    };\n    let eraserMouseDownFunction = {\n        eventNameList: [\"touchstart\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_eraserFunction__WEBPACK_IMPORTED_MODULE_1__.eraserMouseDownFunction(e, mainController, svgBoard, \"touchmove\", \"touchend\");\n        }\n    };\n    let selectionStatusObject = {\n        mode: \"phaseOne\", polyline: null, counter: 0\n    };\n    let selectionToolMouseDownFunction = {\n        eventNameList: [\"touchstart\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_selectionToolFunction__WEBPACK_IMPORTED_MODULE_2__.overallMouseDownFunction(e, mainController, svgBoard, \"touchmove\", \"touchend\", selectionStatusObject);\n        }\n    };\n    let rectangleSelectionStatusObject = {\n        mode: \"phaseOne\", polyline: null, counter: 0\n    };\n    let rectangleSelectionToolMouseDownFunction = {\n        eventNameList: [\"mousedown\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_rectangleSelectionFunction__WEBPACK_IMPORTED_MODULE_3__.overallMouseDownFunction(e, mainController, svgBoard, \"mousemove\", \"mouseup\", rectangleSelectionStatusObject);\n        }\n    };\n    let eventArray = [polylineMouseDown, eraserMouseDownFunction, selectionToolMouseDownFunction];\n    // let eventArray = [polylineMouseDown, eraserMouseDownFunction, selectionToolMouseDownFunction, rectangleSelectionToolMouseDownFunction]\n    eventArray.forEach(toolboxEvent => {\n        toolboxEvent.eventNameList.forEach(eventName => {\n            svgBoard.addEventListener(eventName, toolboxEvent.eventFunction);\n        });\n    });\n}\nfunction attachEventListenerToDivLayer(mainController, divLayer) {\n    let addCommentMouseDownFunction = {\n        eventNameList: [\"mousedown\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_addCommentFunction__WEBPACK_IMPORTED_MODULE_4__.addCommentMouseDownFunction(e, mainController, divLayer, \"mousemove\", \"mouseup\");\n        }\n    }; // addCommentMouseDownFunction\n    let addBookmarkMouseDownFunction = {\n        eventNameList: [\"mousedown\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_addBookmarkFunction__WEBPACK_IMPORTED_MODULE_8__.addBookmarkMouseDownFunction(e, mainController, divLayer, \"mousemove\", \"mouseup\");\n        }\n    }; // addCommentMouseDownFunction\n    let moveObjectInDivMouseDownFunction = {\n        eventNameList: [\"mousedown\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_moveObjectInDivFunction__WEBPACK_IMPORTED_MODULE_5__.moveObejectInDivMouseDownFunction(e, mainController, divLayer, \"mousemove\", \"mouseup\");\n        }\n    };\n    let textToolMouseDownFunction = {\n        eventNameList: [\"mousedown\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_textToolHelperFunction__WEBPACK_IMPORTED_MODULE_6__.textToolMouseDownFunction(e, mainController, divLayer, \"mousemove\", \"mouseup\");\n        }\n    };\n    let textBoxMouseDownFunction = {\n        eventNameList: [\"mousedown\"],\n        eventFunction: (e) => {\n            _ToolboxFolder_textBoxHelperFunction__WEBPACK_IMPORTED_MODULE_7__.textBoxMouseDownFunction(e, mainController, divLayer, \"mousemove\", \"mouseup\");\n        }\n    };\n    // let eventArray = [addCommentMouseDownFunction, moveObjectInDivMouseDownFunction]\n    let nameArray = [\"addComment\", \"addBookmark\", \"moveObject\", \"textToolMouseDown\", \"textBoxMouseDown\"];\n    let eventArray = [addCommentMouseDownFunction, addBookmarkMouseDownFunction, moveObjectInDivMouseDownFunction, textToolMouseDownFunction, textBoxMouseDownFunction];\n    divLayer.greatNoteEventList = [];\n    eventArray.forEach((toolboxEvent, index) => {\n        divLayer.greatNoteEventList.push(nameArray[index]);\n        toolboxEvent.eventNameList.forEach((eventName) => {\n            divLayer.addEventListener(eventName, toolboxEvent.eventFunction);\n        });\n    });\n}\n_ToolboxFolder_moveObjectInDivFunction__WEBPACK_IMPORTED_MODULE_5__;\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/EventFolder/attachToolBoxEventsToLayers.ts?");

/***/ }),

/***/ "./src/smallTest/EventFolder/swipeEvent.ts":
/*!*************************************************!*\
  !*** ./src/smallTest/EventFolder/swipeEvent.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"swipeDetection\": () => (/* binding */ swipeDetection)\n/* harmony export */ });\n/* harmony import */ var _ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ToolboxFolder/toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n/* harmony import */ var _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pageViewHelperFunction */ \"./src/smallTest/pageViewHelperFunction.ts\");\n/* harmony import */ var _socketFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../socketFunction */ \"./src/smallTest/socketFunction.ts\");\n\n\n\nfunction swipeDetection(mainController, pageContentContainer) {\n    pageContentContainer.addEventListener(\"touchstart\", function (e) {\n        let [initialPointX, initialPointY, finalPointX, finalPointY] = [0, 0, 0, 0];\n        let [initialPointX2, initialPointY2, finalPointX2, finalPointY2] = [0, 0, 0, 0];\n        let touchIsFinger, touchIsFinger2;\n        let doubleFinger = false;\n        let deltaX, deltaX2;\n        if (e.type == \"touchstart\") {\n            [initialPointX, initialPointY] = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getTouchOffset)(e, 0);\n            touchIsFinger = e.targetTouches[0].radiusX > 10 ? true : false;\n            if (e.targetTouches[1]) {\n                [initialPointX2, initialPointY2] = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getTouchOffset)(e, 1);\n                touchIsFinger2 = e.targetTouches[1].radiusX > 10 ? true : false;\n            }\n            if (touchIsFinger && touchIsFinger2) {\n                doubleFinger = true;\n            }\n        }\n        let testInfo = document.querySelector(\".testInfo\");\n        let initialPoint = { x1: initialPointX, y1: initialPointY, x2: initialPointX2, y2: initialPointY2 };\n        testInfo.style.width = \"100%\";\n        if (!doubleFinger)\n            return;\n        e.preventDefault();\n        let fullPageArray = document.querySelectorAll(\".fullPage\");\n        let distance1, distance2, scale, deltaScale;\n        let [previousFinalPointX, previousFinalPointY, previousFinalPointX2, previousFinalPointY2] = [initialPointX, initialPointY, initialPointX2, initialPointY2];\n        let newFinalPointsDistance, previousFinalPointsDistance;\n        let scaleDirection = 1;\n        let mouseMoveFunction = (e) => {\n            [finalPointX, finalPointY] = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getTouchOffset)(e, 0);\n            [finalPointX2, finalPointY2] = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getTouchOffset)(e, 1);\n            newFinalPointsDistance = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.calculateDistance)(finalPointX, finalPointY, finalPointX2, finalPointY2);\n            previousFinalPointsDistance = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.calculateDistance)(previousFinalPointX, previousFinalPointY, previousFinalPointX2, previousFinalPointY2);\n            [previousFinalPointX, previousFinalPointY] = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getTouchOffset)(e, 0);\n            [previousFinalPointX2, previousFinalPointY2] = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getTouchOffset)(e, 1);\n            distance1 = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.calculateDistance)(initialPointX2, initialPointY2, finalPointX2, finalPointY2);\n            distance2 = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.calculateDistance)(initialPointX, initialPointY, finalPointX, finalPointY);\n            scale = (0,_ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getScale)(fullPageArray[0]);\n            deltaScale = (distance1 + distance2) / 4000;\n            scaleDirection = newFinalPointsDistance - previousFinalPointsDistance > 0 ? +1 : -1;\n            testInfo.innerHTML = `distance_1 = ${distance1} <br>` + `distance_2 = ${distance2} <br>` + `totalDistance = ${distance1 + distance2}, scale = ${scale}, scale = ${scale + scaleDirection * deltaScale}, direction = ${scaleDirection}, finalX = ${finalPointX}, finalY = ${finalPointY}, finalX2 = ${finalPointX2}, finalY2 = ${finalPointY2}, width ${e.target.getBoundingClientRect().width}`;\n            let pageWidth = e.target.getBoundingClientRect().width;\n            pageContentContainer[\"style\"].transform = `scale(${scale + scaleDirection * deltaScale})`;\n            let testMessage = `${JSON.stringify(scale)}`;\n            _socketFunction__WEBPACK_IMPORTED_MODULE_2__.socket.emit(\"clientWantsToBroadcastMessage\", testMessage);\n            if (newFinalPointsDistance > 100) {\n                Array.from(fullPageArray).forEach((p) => {\n                    if (pageWidth < 4000 && pageWidth > 600) {\n                        p.style.transform = `scale(${scale + scaleDirection * deltaScale})`;\n                    }\n                    if (pageWidth > 4000)\n                        p.style.transform = `scale(${(scale + scaleDirection * deltaScale) * 0.95})`;\n                    if (pageWidth < 600)\n                        p.style.transform = `scale(${(scale + scaleDirection * deltaScale) * 1.25})`;\n                });\n            } // newFinalPointsDistance > 100\n            deltaX = finalPointX - initialPointX;\n            deltaX2 = finalPointX2 - initialPointX2;\n        };\n        pageContentContainer.addEventListener(\"touchmove\", mouseMoveFunction);\n        // define the mouse move function\n        let mouseUpFunction = (e) => {\n            // remove the mouse move even\n            fingerTurnPage(mainController, pageContentContainer, mouseMoveFunction, mouseUpFunction, deltaX, deltaX2, doubleFinger);\n        }; // mouseUpFunction\n        pageContentContainer.addEventListener(\"touchend\", mouseUpFunction);\n    });\n} //swipeDetection//\nfunction fingerPanPage(mainController, pageContentContainer, mouseMoveFunction, mouseUpFunction, initialPoint, finalPoint, doubleFinger) {\n}\nfunction fingerTurnPage(mainController, pageContentContainer, mouseMoveFunction, mouseUpFunction, deltaX, deltaX2, doubleFinger) {\n    pageContentContainer.removeEventListener(\"touchmove\", mouseMoveFunction);\n    pageContentContainer.removeEventListener(\"touchend\", mouseUpFunction);\n    let addNewPageButton = document.querySelector(\".addNewPage\");\n    let currentPage = mainController.pageController.currentPage;\n    let pageMoveDirection = deltaX > 0 ? -1 : +1;\n    let targetPageNumber = currentPage.pageNumber + pageMoveDirection;\n    let turnPageBreakPoint = 300;\n    if (!doubleFinger)\n        return;\n    if (Math.abs(deltaX) > turnPageBreakPoint || Math.abs(deltaX2) > turnPageBreakPoint) { // if larager than the page Break Point\n        if (pageMoveDirection > 0) {\n            if (currentPage.next.name == \"endPage\") {\n                addNewPageButton.click();\n                _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_1__.shortNotice(\"newPage is added\");\n            }\n            else { // not the end page\n                mainController.pageController.goToPage(targetPageNumber);\n                pageContentContainer.scrollTo(0, 0);\n                // e.preventDefault()\n            }\n        } // if (pageMoveDirection > 0 ){\n        if (pageMoveDirection < 0) {\n            if (currentPage.previous.name == \"startPage\") {\n                console.log(\"create a new page\");\n            }\n            else { // not the end page\n                console.log(\"go to the previous page\");\n                mainController.pageController.goToPage(targetPageNumber);\n                pageContentContainer.scrollTo(0, 0);\n                // e.preventDefault()\n            }\n        } // if (pageMoveDirection < 0)\n    } // if (Math.abs(deltaX) > turnPageBreakPoint){\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/EventFolder/swipeEvent.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GNDropdownList.ts":
/*!********************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GNDropdownList.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GNDropdownList\": () => (/* binding */ GNDropdownList)\n/* harmony export */ });\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\n//@auto-fold here\nfunction GNDropdownList(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, statusList } = createData;\n    let _object = document.createElement(\"select\");\n    statusList === null || statusList === void 0 ? void 0 : statusList.forEach(p => {\n        let option = document.createElement(\"option\");\n        option.value = p;\n        option.innerText = p;\n        _object.appendChild(option);\n    });\n    _object._name = name;\n    _object.GNType = \"GNDropdownList\";\n    _object.GNSpecialCreationMessage = specialCreationMessage || \"\";\n    _object._dataStructure = [\"value\"];\n    _object._identity = { accessPointer: \"\", dataPointer: \"\", linkArray: [] };\n    _object._styleStructure = [];\n    _object.extract = () => _object.createDataObject();\n    _object.createDataObject = function () {\n        let dataObject = (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        dataObject[\"GNType\"] = _object.GNType;\n        dataObject[\"GNSpecialCreationMessage\"] = _object.GNSpecialCreationMessage || \"\";\n        dataObject[\"specialGNType\"] = _object.specialGNType || \"\";\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        dataObject[\"classList\"] = Array.from(_object.classList);\n        // data structure\n        dataObject[\"data\"][\"value\"] = _object[\"value\"];\n        // stylesheet data\n        return dataObject;\n    };\n    _object.loadFromData = (data) => {\n        _object.GNSpecialCreationMessage = data.GNSpecialCreationMessage;\n        _object.specialGNType = data.specialGNTyp;\n        _object.setAttribute(\"accessPointer\", data._identity.accessPointer);\n        _object._identity = data._identity;\n        if (data.classList)\n            data.classList.forEach((p) => _object.classList.add(p));\n        _object[\"value\"] = data[\"data\"][\"value\"];\n    };\n    _object.applyStyle = (styleObject, saveToDatabase = true) => { };\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, \"input\");\n    _object.addEventListener(\"change\", (e) => {\n        var _a;\n        e.stopPropagation();\n        if (((_a = _object === null || _object === void 0 ? void 0 : _object._identity) === null || _a === void 0 ? void 0 : _a.accessPointer) != \"\")\n            _object.saveHTMLObjectToDatabase();\n        if (_object.processUpdateData)\n            _object.processUpdateData();\n    }, false); //addEventListener\n    return _object;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GNDropdownList.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GNImageContainer.ts":
/*!**********************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GNImageContainer.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GNImageContainer\": () => (/* binding */ GNImageContainer)\n/* harmony export */ });\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\n//@auto-fold here\nfunction GNImageContainer(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, imgsrc, _classNameList, injectedData } = createData;\n    let _object = document.createElement(\"div\");\n    _object.draggable = false;\n    _object._name = name;\n    _object.GNType = \"GNImageContainer\";\n    _object._dataStructure = [\"src\"];\n    _object._styleStructure = [\"width\", \"height\", \"left\", \"top\", \"position\"];\n    _object.classList.add(\"GNImageContainer\");\n    _object._classNameList = _classNameList || [];\n    if (_classNameList) {\n        _classNameList.forEach(p => _object.classList.add(p));\n    }\n    let image = document.createElement(\"img\");\n    image.src = imgsrc || \"\";\n    image.style.width = \"100%\";\n    image.draggable = false;\n    image.onload = function () {\n        _object.imageWidthToHeightRatio = image.width / image.height;\n    };\n    _object.appendChild(image);\n    _object.loadFromData = (injectedData) => {\n        image.src = \"/\" + injectedData.data.src;\n        _object.identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", _object.identity.accessPointer);\n        _object.objectData = injectedData;\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            _object.objectData._classNameList.forEach((p) => _object.classList.add(p));\n        }\n        Object.entries(injectedData.stylesheet).forEach(([key, value], _) => {\n            _object.style[key] = value;\n        });\n    };\n    _object.setMovable = function () {\n        (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.setObjectMovable)(_object);\n    };\n    _object.createDataObject = function () {\n        var _a;\n        let dataObject = (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        // identity\n        dataObject[\"GNType\"] = _object.GNType;\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        // data\n        dataObject[\"data\"][\"src\"] = imgsrc;\n        // stylesheet data\n        (_a = _object === null || _object === void 0 ? void 0 : _object._styleStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = _object[\"style\"][p];\n        });\n        return dataObject;\n    };\n    _object.extract = () => _object.createDataObject();\n    // image special function\n    _object.addCaption = () => {\n        // do something\n    };\n    _object.setImageSize = function (sizeData) {\n        let { width, height } = sizeData;\n        if (!height)\n            height = width * 1 / _object.imageWidthToHeightRatio;\n        if (!width)\n            width = height * _object.imageWidthToHeightRatio;\n        _object.style.width = width + \"px\";\n        _object.style.height = height + \"px\";\n        console.log(97979797, width, height);\n        return [width, height];\n    };\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage);\n    if (injectedData) {\n        console.log(103103, injectedData);\n        _object.loadFromData(injectedData);\n        // _object.identity = injectedData._identity\n        // _object.setAttribute(\"accessPointer\", _object.identity.accessPointer)\n        // _object.objectData = injectedData\n        //\n        // if (injectedData._classNameList && injectedData._classNameList.length>0){\n        //   _object.objectData._classNameList.forEach((p:any)=>_object.classList.add(p))\n        // }\n    }\n    _object.addEventListener(\"click\", (e) => {\n        // do something\n        // _object.classList.add(\"selectedObject\")\n        // console.log(document.querySelector(\".selectedObject\"))\n    });\n    return _object;\n} // GNImage\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GNImageContainer.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GNInputField.ts":
/*!******************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GNInputField.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GNInputField\": () => (/* binding */ GNInputField)\n/* harmony export */ });\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\n//@auto-fold here\nfunction GNInputField(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData } = createData;\n    let _object = document.createElement(\"input\");\n    _object.GNType = \"GNInputField\";\n    _object._name = name;\n    _object._dataStructure = [\"value\"];\n    _object._styleStructure = [];\n    // functions\n    _object.createDataObject = function () {\n        var _a, _b;\n        let dataObject = (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        // data structure\n        dataObject[\"GNType\"] = _object.GNType;\n        dataObject[\"classList\"] = Array.from(_object.classList);\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        (_a = _object === null || _object === void 0 ? void 0 : _object._dataStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"data\"][p] = _object[p];\n        });\n        // stylesheet data\n        (_b = _object === null || _object === void 0 ? void 0 : _object._styleStructure) === null || _b === void 0 ? void 0 : _b.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = _object[\"style\"][p];\n        });\n        return dataObject;\n    };\n    _object.extract = () => _object.createDataObject();\n    _object.loadFromData = (data) => _object.value = data.value;\n    //@auto-fold here\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage);\n    // if the object is assigned to the database, then this  addEventListener is to monitor the change\n    // define what is the update action\n    if (injectedData) {\n        _object.identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", _object.identity.accessPointer);\n        _object.objectData = injectedData;\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            _object.objectData._classNameList.forEach((p) => _object.classList.add(p));\n        }\n    }\n    return _object;\n} // GNInputField\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GNInputField.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GNPage.ts":
/*!************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GNPage.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GNPage\": () => (/* binding */ GNPage)\n/* harmony export */ });\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\n//@auto-fold here\nfunction GNPage(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, contentEditable, _classNameList } = createData;\n    console.log(9991234, createData);\n    let _object = document.createElement(\"div\");\n    _object.childrenList = {};\n    _object.GNType = \"GNPage\";\n    _object.GNSpecialCreationMessage = specialCreationMessage || \"\";\n    _object._dataStructure = [];\n    _object._styleStructure = [];\n    _object.groupData = [];\n    _object.sectionDataArray = [];\n    // add classname\n    _object._classNameList = _classNameList || [];\n    _classNameList === null || _classNameList === void 0 ? void 0 : _classNameList.forEach(p => {\n        _object.classList.add(p);\n    });\n    _object.loadFromData = (injectedData) => {\n        _object.GNSpecialCreationMessage = injectedData.GNSpecialCreationMessage;\n        _object.specialGNType = injectedData.specialGNType;\n        _object.groupData = injectedData.data.groupData || [];\n        _object.sectionDataArray = injectedData.data.sectionDataArray || [];\n        if (injectedData._classNameList)\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        _object._identity = injectedData._identity;\n        _object.objectData = injectedData;\n        _object.setAttribute(\"accessPointer\", injectedData._identity.accessPointer);\n    };\n    _object.extract = () => _object.createDataObject();\n    _object.createDataObject = function () {\n        let dataObject;\n        if (_object.objectData) {\n            dataObject = _object.objectData;\n        }\n        else {\n            dataObject = (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        }\n        dataObject[\"GNType\"] = _object.GNType;\n        dataObject[\"GNSpecialCreationMessage\"] = _object.GNSpecialCreationMessage;\n        dataObject[\"specialGNType\"] = _object.specialGNType || \"\";\n        dataObject[\"_identity\"] = _object._identity;\n        dataObject[\"_classNameList\"] = Array.from(_object.classList).filter(p => p != \"currentPage\");\n        // data structure\n        dataObject[\"data\"][\"groupData\"] = _object[\"groupData\"];\n        dataObject[\"data\"][\"sectionDataArray\"] = _object[\"sectionDataArray\"];\n        if (_object.smallViewHTMLObject) {\n            dataObject[\"data\"][\"smallViewData\"] = _object.smallViewHTMLObject.extract();\n        }\n        // stylesheet data\n        return dataObject;\n    };\n    _object.getGroupData = function () {\n        return _object.groupData;\n    };\n    _object.addGroupToPage = function (groupData) {\n        _object.groupData.push(groupData);\n    };\n    _object.applyStyle = function (styleObject, saveToDatabase = true) {\n        Object.entries(styleObject).forEach(([key, value], _) => {\n            _object[\"style\"][key] = value;\n        });\n        if (saveToDatabase)\n            _object.saveHTMLObjectToDatabase();\n    };\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    if (injectedData) {\n        _object.loadFromData(injectedData);\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        }\n        _object.identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", _object.identity.accessPointer);\n        _object.objectData = injectedData;\n    }\n    return _object;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GNPage.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GNTextBox.ts":
/*!***************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GNTextBox.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"inputFunction\": () => (/* binding */ inputFunction),\n/* harmony export */   \"createTextBox\": () => (/* binding */ createTextBox),\n/* harmony export */   \"GNTextBox\": () => (/* binding */ GNTextBox)\n/* harmony export */ });\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\nfunction inputFunction(_object, item) {\n    return function itemInputFunction(e) {\n        setTimeout(function () {\n            _object.saveHTMLObjectToDatabase();\n            item.addEventListener(\"input\", itemInputFunction);\n        }, 3000);\n        item.removeEventListener(\"input\", itemInputFunction);\n    };\n}\nfunction createTextBox(_object, uniqueID) {\n    let textBox = document.createElement(\"div\");\n    if (!uniqueID) {\n        uniqueID = `${Date.now().toString(36) + Math.random().toString(36).substr(2)}`;\n    }\n    textBox.setAttribute(\"textBoxID\", uniqueID);\n    textBox.innerHTML = \"TextContainerTextContainer\";\n    textBox.classList.add(\"textContainer\");\n    textBox.contentEditable = \"true\";\n    textBox.draggable = false;\n    textBox.addEventListener(\"input\", inputFunction(_object, textBox));\n    textBox.addEventListener(\"paste\", (e) => {\n        e.stopPropagation();\n        var items = (e.clipboardData || e.originalEvent.clipboardData).items;\n        for (var index in items) {\n            var item = items[index];\n            if (item.kind === 'file') {\n                // e.preventDefault()\n                var blob = item.getAsFile();\n                var reader = new FileReader();\n                console.log(blob, item);\n                reader.onload = function (event) {\n                    console.log(event.target.result);\n                    let targetImg = textBox.querySelector(`img[src='${event.target.result}']`);\n                    targetImg.style.width = \"98%\";\n                    targetImg.style.margin = \"auto\";\n                    targetImg.style.display = \"block\";\n                    targetImg.style.position = \"relative\";\n                    let xhr = new XMLHttpRequest();\n                    xhr.open('POST', '/talkNotes/processImageBase64Format', true);\n                    xhr.onload = function () {\n                        console.log(\"finish processing image\");\n                        let responseImgSrc = JSON.parse(this.responseText).imgsrc.replace(\"talkNotes/\", \"/\");\n                        console.log(responseImgSrc);\n                        targetImg.src = window.location.origin\n                            + \"/image/\" + responseImgSrc + \".png\";\n                    };\n                    xhr.send(event.target.result);\n                };\n                reader.readAsDataURL(blob);\n            }\n        }\n    });\n    return textBox;\n}\nfunction GNTextBox(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, _classNameList } = createData;\n    let _object = document.createElement(\"div\");\n    _object.classList.add(\"GNTextBox\");\n    _object.addEventListener(\"mousedown\", e => {\n        e.stopPropagation();\n        console.log(\"from textBox\");\n    });\n    _object.style.width = \"500px\";\n    _object.style.minHeight = \"50px\";\n    // _object.style.background = \"lightblue\";\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.setObjectMovable)(_object);\n    _object.childrenList = {};\n    _object.GNType = \"GNTextBox\";\n    _object.GNSpecialCreationMessage = specialCreationMessage || \"\";\n    _object._dataStructure = [\"innerHTML\"];\n    _object._styleStructure = [\"background\", \"width\", \"height\", \"position\", \"left\", \"top\"];\n    _object._classNameList = _classNameList || [];\n    _classNameList === null || _classNameList === void 0 ? void 0 : _classNameList.forEach(p => _object.classList.add(p));\n    _object.loadFromData = (injectedData, saveToDatabase = false) => {\n        _object.GNSpecialCreationMessage = injectedData.GNSpecialCreationMessage;\n        _object.specialGNType = injectedData.specialGNType;\n        if (injectedData._classNameList)\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        _object._identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", injectedData._identity.accessPointer);\n        _object.applyStyle(injectedData.stylesheet, saveToDatabase);\n        _object.innerHTML = injectedData[\"data\"][\"innerHTML\"];\n    };\n    _object.extract = () => _object.createDataObject();\n    _object.setMovable = () => (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.setObjectMovable)(_object);\n    _object.createDataObject = function () {\n        var _a;\n        let dataObject;\n        if (_object.objectData) {\n            dataObject = _object.objectData;\n        }\n        else {\n            dataObject = (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        }\n        dataObject[\"GNType\"] = _object.GNType;\n        dataObject[\"GNSpecialCreationMessage\"] = _object.GNSpecialCreationMessage;\n        dataObject[\"specialGNType\"] = _object.specialGNType || \"\";\n        _object.contentEditable = \"true\";\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        dataObject[\"_classNameList\"] = Array.from(_object.classList);\n        // data structure\n        dataObject[\"data\"][\"innerHTML\"] = _object.innerHTML;\n        // stylesheet data\n        (_a = _object === null || _object === void 0 ? void 0 : _object._styleStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = _object.style[p];\n        });\n        return dataObject;\n    };\n    _object.applyStyle = function (styleObject, saveToDatabase = true) {\n        Object.entries(styleObject).forEach(([key, value], _) => {\n            _object[\"style\"][key] = value;\n        });\n        // throw \"unknown exception\"\n        if (saveToDatabase)\n            _object.saveHTMLObjectToDatabase();\n    };\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    if (injectedData) {\n        _object.loadFromData(injectedData);\n        _object.applyStyle(injectedData.stylesheet, false); //\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        }\n        _object._identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", _object._identity.accessPointer);\n        _object.objectData = injectedData;\n    }\n    _object.addEventListener(\"input\", inputFunction(_object, _object));\n    return _object;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GNTextBox.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GNTextContainer.ts":
/*!*********************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GNTextContainer.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createSelectionObject\": () => (/* binding */ createSelectionObject),\n/* harmony export */   \"inputFunction\": () => (/* binding */ inputFunction),\n/* harmony export */   \"createTextBox\": () => (/* binding */ createTextBox),\n/* harmony export */   \"createTextContainerHTMLObject\": () => (/* binding */ createTextContainerHTMLObject),\n/* harmony export */   \"GNTextContainer\": () => (/* binding */ GNTextContainer)\n/* harmony export */ });\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\nfunction createSelectionObject(className, valueList) {\n    let selectObject = document.createElement(\"select\");\n    selectObject.classList.add(className);\n    valueList.forEach(p => {\n        let option = document.createElement(\"option\");\n        option.value = p;\n        option.innerText = p;\n        option.draggable = false;\n        selectObject.append(option);\n    });\n    return selectObject;\n}\nfunction inputFunction(_object, item) {\n    return function itemInputFunction(e) {\n        setTimeout(function () {\n            _object.saveHTMLObjectToDatabase();\n            item.addEventListener(\"input\", itemInputFunction);\n        }, 3000);\n        item.removeEventListener(\"input\", itemInputFunction);\n    };\n}\nfunction createTextBox(_object, uniqueID) {\n    let textBox = document.createElement(\"div\");\n    if (!uniqueID) {\n        uniqueID = `${Date.now().toString(36) + Math.random().toString(36).substr(2)}`;\n    }\n    textBox.setAttribute(\"textBoxID\", uniqueID);\n    textBox.innerHTML = \"TextContainerTextContainer\";\n    textBox.classList.add(\"textContainer\");\n    textBox.contentEditable = \"true\";\n    textBox.draggable = false;\n    textBox.addEventListener(\"input\", inputFunction(_object, textBox));\n    textBox.addEventListener(\"paste\", (e) => {\n        e.stopPropagation();\n        var items = (e.clipboardData || e.originalEvent.clipboardData).items;\n        for (var index in items) {\n            var item = items[index];\n            if (item.kind === 'file') {\n                // e.preventDefault()\n                var blob = item.getAsFile();\n                var reader = new FileReader();\n                console.log(blob, item);\n                reader.onload = function (event) {\n                    console.log(event.target.result);\n                    let targetImg = textBox.querySelector(`img[src='${event.target.result}']`);\n                    targetImg.style.width = \"98%\";\n                    targetImg.style.margin = \"auto\";\n                    targetImg.style.display = \"block\";\n                    targetImg.style.position = \"relative\";\n                    let xhr = new XMLHttpRequest();\n                    xhr.open('POST', '/talkNotes/processImageBase64Format', true);\n                    xhr.onload = function () {\n                        console.log(\"finish processing image\");\n                        let responseImgSrc = JSON.parse(this.responseText).imgsrc.replace(\"talkNotes/\", \"/\");\n                        console.log(responseImgSrc);\n                        targetImg.src = window.location.origin\n                            + \"/image/\" + responseImgSrc + \".png\";\n                    };\n                    xhr.send(event.target.result);\n                };\n                reader.readAsDataURL(blob);\n            }\n        }\n    });\n    return textBox;\n}\nfunction createTextContainerHTMLObject() {\n    let _object = document.createElement(\"div\");\n    _object.classList.add(\"GNTextContainer\");\n    _object.addEventListener(\"mousedown\", e => {\n        e.stopPropagation();\n        console.log(\"from textContainer\");\n    });\n    _object.style.width = \"500px\";\n    _object.style.minHeight = \"50px\";\n    _object.style.background = \"lightblue\";\n    let title = document.createElement(\"input\");\n    title.addEventListener(\"input\", inputFunction(_object, title));\n    let addTextBoxButton = document.createElement(\"button\");\n    addTextBoxButton.innerText = \"addTextBox\";\n    addTextBoxButton.addEventListener(\"click\", e => {\n        let _textContainer = createTextBox(_object);\n        _object.append(_textContainer);\n    });\n    let textTypeSelection = createSelectionObject(\"textTypeSelect\", [\"normal\", \"comment\", \"question\", \"solution\", \"section\", \"equation\"]);\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.classList.add(\"textTypeDeleteButton\");\n    deleteButton.innerText = \"delete\";\n    deleteButton.addEventListener(\"click\", (e) => {\n        _object.deleteFromDatabase();\n    });\n    textTypeSelection.addEventListener(\"change\", (e) => {\n        let pageNavigator = document.querySelector(\".pageController\");\n        let pageController = pageNavigator.soul;\n        let currentPage = document.querySelector(\".currentPage\");\n        let pageObject = currentPage.soul;\n        let annotationObject = pageObject.pageRelatedData.annotationArray.filter((p) => {\n            return p.accessPointer == _object.getAccessPointer();\n        })[0];\n        annotationObject.annotationType = textTypeSelection.value;\n    });\n    _object.append(textTypeSelection, title, deleteButton, addTextBoxButton);\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.setObjectMovable)(_object);\n    return [_object, title, textTypeSelection];\n}\nfunction GNTextContainer(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, _classNameList } = createData;\n    let [_object, title, textTypeSelection] = createTextContainerHTMLObject();\n    if (!injectedData) {\n        let textContainer = createTextBox(_object);\n        _object.append(textContainer);\n    }\n    _object.childrenList = {};\n    _object.GNType = \"GNTextContainer\";\n    _object.GNSpecialCreationMessage = specialCreationMessage || \"\";\n    _object._dataStructure = [\"innerHTML\"];\n    _object._styleStructure = [\"background\", \"width\", \"height\", \"position\", \"left\", \"top\"];\n    _object._classNameList = _classNameList || [];\n    _classNameList === null || _classNameList === void 0 ? void 0 : _classNameList.forEach(p => _object.classList.add(p));\n    _object.loadFromData = (injectedData, saveToDatabase = false) => {\n        var _a;\n        if (saveToDatabase)\n            debugger;\n        _object.GNSpecialCreationMessage = injectedData.GNSpecialCreationMessage;\n        _object.specialGNType = injectedData.specialGNType;\n        if (injectedData._classNameList)\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        _object._identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", injectedData._identity.accessPointer);\n        _object.applyStyle(injectedData.stylesheet, saveToDatabase);\n        title.value = injectedData[\"data\"][\"title\"];\n        textTypeSelection.value = injectedData[\"data\"][\"textTypeSelection\"];\n        textTypeSelection;\n        (_a = injectedData[\"data\"][\"textContainerArray\"]) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            let textContainer = _object.querySelector(`div[textBoxID='${p.uniqueID}']`);\n            if (!textContainer) {\n                textContainer = createTextBox(_object, p.uniqueID);\n                _object.append(textContainer);\n            }\n            textContainer.innerHTML = p.textContent;\n        });\n    };\n    _object.extract = () => _object.createDataObject();\n    _object.setMovable = () => (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.setObjectMovable)(_object);\n    _object.createDataObject = function () {\n        var _a;\n        let dataObject;\n        if (_object.objectData) {\n            dataObject = _object.objectData;\n        }\n        else {\n            dataObject = (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        }\n        dataObject[\"GNType\"] = _object.GNType;\n        dataObject[\"GNSpecialCreationMessage\"] = _object.GNSpecialCreationMessage;\n        dataObject[\"specialGNType\"] = _object.specialGNType || \"\";\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        dataObject[\"_classNameList\"] = Array.from(_object.classList);\n        // data structure\n        dataObject[\"data\"][\"title\"] = title.value;\n        dataObject[\"data\"][\"textTypeSelection\"] = textTypeSelection.value;\n        let textContainerArray = Array.from(_object.querySelectorAll(\".textContainer\"));\n        dataObject[\"data\"][\"textContainerArray\"] = textContainerArray.map((p) => ({\n            uniqueID: p.getAttribute(\"textBoxID\"),\n            textContent: p.innerHTML\n        }));\n        // stylesheet data\n        (_a = _object === null || _object === void 0 ? void 0 : _object._styleStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = _object.style[p];\n        });\n        // console.log(dataObject)\n        return dataObject;\n    };\n    _object.getAnnotationType = function () {\n        return textTypeSelection.value;\n    };\n    _object.applyStyle = function (styleObject, saveToDatabase = true) {\n        Object.entries(styleObject).forEach(([key, value], _) => {\n            _object[\"style\"][key] = value;\n        });\n        // throw \"unknown exception\"\n        if (saveToDatabase)\n            _object.saveHTMLObjectToDatabase();\n    };\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    if (injectedData) {\n        _object.loadFromData(injectedData);\n        _object.applyStyle(injectedData.stylesheet, false); //\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        }\n        _object._identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", _object._identity.accessPointer);\n        _object.objectData = injectedData;\n    }\n    return _object;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GNTextContainer.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GreatNoteDataClass.ts":
/*!************************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GreatNoteDataClass.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GNContainerDiv\": () => (/* binding */ GNContainerDiv)\n/* harmony export */ });\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\n//@auto-fold here\nfunction GNContainerDiv(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, contentEditable, _classNameList } = createData;\n    let _object = document.createElement(\"div\");\n    _object.childrenList = {};\n    _object.GNType = \"GNContainerDiv\";\n    _object._styleStructure = [\"background\", \"width\", \"height\", \"position\", \"left\", \"top\"];\n    // add classname\n    _object._classNameList = _classNameList || [];\n    _classNameList === null || _classNameList === void 0 ? void 0 : _classNameList.forEach(p => {\n        _object.classList.add(p);\n    });\n    // console.log(242424, _object._classNameList)\n    _object.loadFromData = (data) => {\n        if (data._classNameList)\n            data._classNameList.forEach((p) => _object.classList.add(p));\n        _object._identity = data._identity;\n        _object.setAttribute(\"accessPointer\", data._identity.accessPointer);\n        if (contentEditable) {\n            _object[\"textContent\"] = data[\"data\"][\"textContent\"];\n        }\n    };\n    _object.extract = () => _object.createDataObject();\n    _object.createDataObject = function () {\n        var _a;\n        let dataObject;\n        if (_object.objectData) {\n            dataObject = _object.objectData;\n        }\n        else {\n            dataObject = (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        }\n        dataObject[\"GNType\"] = _object.GNType;\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        dataObject[\"_classNameList\"] = Array.from(_object.classList);\n        // stylesheet data\n        (_a = _object === null || _object === void 0 ? void 0 : _object._styleStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = _object.style[p];\n        });\n        return dataObject;\n    };\n    _object.applyStyle = function (styleObject, saveToDatabase = true) {\n        Object.entries(styleObject).forEach(([key, value], _) => _object[\"style\"][key] = value);\n        if (saveToDatabase)\n            _object.saveHTMLObjectToDatabase();\n    };\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    if (injectedData) {\n        _object.loadFromData(injectedData);\n        _object.applyStyle(injectedData.stylesheet, false); //\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        }\n        _object._identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", _object._identity.accessPointer);\n        _object.objectData = injectedData;\n    }\n    return _object;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GreatNoteDataClass.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts":
/*!***************************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GNSvg\": () => (/* binding */ GNSvg),\n/* harmony export */   \"GNSvgCircle\": () => (/* binding */ GNSvgCircle),\n/* harmony export */   \"GNSvgRect\": () => (/* binding */ GNSvgRect),\n/* harmony export */   \"GNSvgLine\": () => (/* binding */ GNSvgLine),\n/* harmony export */   \"GNSvgPolyLine\": () => (/* binding */ GNSvgPolyLine),\n/* harmony export */   \"GNSvgImage\": () => (/* binding */ GNSvgImage)\n/* harmony export */ });\n/* harmony import */ var svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svg.js */ \"./node_modules/svg.js/dist/svg.js\");\n/* harmony import */ var svg_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(svg_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\n\nfunction createDummyData() {\n    return {\n        \"data\": {},\n        \"array\": [],\n        \"GNType\": \"\",\n        \"_identity\": { \"dataPointer\": \"\", \"accessPointer\": \"\", \"linkArray\": [] },\n        \"stylesheet\": {}\n    };\n}\n//@auto-fold here\nfunction GNSvg(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, _classNameList } = createData;\n    let svgDivContainer = document.createElement(\"div\");\n    svgDivContainer.id = \"testSvgDiv\";\n    let svgController = svg_js__WEBPACK_IMPORTED_MODULE_0___default()(svgDivContainer);\n    let svgBoard = svgController.node;\n    svgBoard.svgController = svgController;\n    svgBoard.GNType = \"GNSvg\";\n    svgBoard._name = name;\n    svgBoard._dataStructure = [];\n    svgBoard._styleStructure = [\"width\", \"height\", \"background\", \"position\", \"left\", \"top\"];\n    svgBoard._classNameList = _classNameList || [];\n    _classNameList === null || _classNameList === void 0 ? void 0 : _classNameList.forEach(p => {\n        svgBoard.classList.add(p);\n    });\n    // // functions\n    // svgObject.loadFromData = (data)=>{ svgObject.value = data }\n    svgBoard.appendToContainer = function (parent) {\n        parent.appendChild(svgDivContainer);\n    };\n    svgBoard.applyStyle = function (stylesheet) {\n        Object.entries(stylesheet).forEach(([key, value], _) => {\n            svgBoard[\"style\"][key] = value;\n        });\n    };\n    svgBoard.createDataObject = function () {\n        var _a, _b;\n        let dataObject = createDummyData();\n        // data structure\n        dataObject[\"GNType\"] = svgBoard.GNType;\n        if (svgBoard._identity)\n            dataObject[\"_identity\"] = svgBoard._identity;\n        dataObject[\"_classNameList\"] = Array.from(svgBoard.classList);\n        (_a = svgBoard === null || svgBoard === void 0 ? void 0 : svgBoard._dataStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"data\"][p] = svgBoard[p];\n        });\n        // stylesheet data\n        (_b = svgBoard === null || svgBoard === void 0 ? void 0 : svgBoard._styleStructure) === null || _b === void 0 ? void 0 : _b.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = svgBoard[\"style\"][p];\n        });\n        return dataObject;\n    };\n    svgBoard.loadFromData = function (data) {\n        svgBoard.GNSpecialCreationMessage = data.GNSpecialCreationMessage;\n        svgBoard.specialGNType = data.specialGNType;\n        if (data._classNameList)\n            data._classNameList.forEach((p) => svgBoard.classList.add(p));\n        svgBoard._identity = data._identity;\n        svgBoard.setAttribute(\"accessPointer\", data._identity.accessPointer);\n        svgBoard.applyStyle(data.stylesheet);\n    };\n    //\n    svgBoard.extract = () => svgBoard.createDataObject();\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_1__.superGNObject)(svgBoard, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    if (injectedData) {\n        svgBoard.identity = injectedData._identity;\n        svgBoard.setAttribute(\"accessPointer\", svgBoard.identity.accessPointer);\n        svgBoard.objectData = injectedData;\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            injectedData._classNameList.forEach((p) => svgBoard.classList.add(p));\n        }\n    }\n    return svgBoard;\n}\n//@auto-fold here\nfunction GNSvgCircle(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase } = createData;\n    let svgObjectSoul = new (svg_js__WEBPACK_IMPORTED_MODULE_0___default().Circle)();\n    svgObjectSoul.radius(75);\n    svgObjectSoul.fill(\"red\");\n    let svgObject = svgObjectSoul.node;\n    svgObject.soul = svgObjectSoul;\n    svgObject.GNType = \"GNSvgCircle\";\n    svgObject._name = name;\n    svgObject._dataStructure = [\"cx\", \"cy\", \"r\"];\n    svgObject._styleStructure = [];\n    // functions\n    svgObject.loadFromData = (_GNData) => {\n        svgObject.style[\"cx\"] = parseInt(_GNData[\"data\"][\"cx\"]) + 200;\n        svgObject.style[\"cy\"] = parseInt(_GNData[\"data\"][\"cy\"]);\n        svgObject.style[\"r\"] = parseInt(_GNData[\"data\"][\"r\"]);\n    };\n    svgObject.createDataObject = function () {\n        let dataObject = createDummyData();\n        // data structure\n        dataObject[\"GNType\"] = svgObject.GNType;\n        if (svgObject[\"_identity\"])\n            dataObject[\"_identity\"] = svgObject[\"_identity\"];\n        dataObject[\"data\"][\"cx\"] = svgObject.style[\"cx\"];\n        dataObject[\"data\"][\"cy\"] = svgObject.style[\"cy\"];\n        dataObject[\"data\"][\"r\"] = svgObject.style[\"r\"];\n        // stylesheet data\n        svgObject._styleStructure.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = svgObject[\"style\"][p];\n        });\n        return dataObject;\n    };\n    svgObject.extract = () => svgObject.createDataObject();\n    svgObject.applyStyle = function (attrList) {\n        svgObjectSoul.attr(attrList);\n    };\n    svgObject.appendTo = function (parentSVGContainer) {\n        //self.targetPage.svgNode.appendChild(eraser.node)\n        parentSVGContainer.svgNode.appendChild(svgObject.node);\n    };\n    // add extra funcitons to the object\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_1__.superGNObject)(svgObject, saveToDatabase, arrayID, insertPosition, dataPointer);\n    SuperSVG(svgObject, arrayID, insertPosition, dataPointer, saveToDatabase);\n    return svgObject;\n}\n// ==============\n//@auto-fold here\nfunction GNSvgRect(name, arrayID, insertPosition, dataPointer, saveToDatabase = true) {\n    let svgObject = new (svg_js__WEBPACK_IMPORTED_MODULE_0___default().Rect)();\n    svgObject.GNType = GNSvgRect.name;\n    svgObject._name = name;\n    svgObject._dataStructure = [\"value\"];\n    svgObject._styleStructure = [];\n    // functions\n    svgObject.loadFromData = (data) => { svgObject = data; };\n    svgObject.extract = () => svgObject.createDataObject();\n    svgObject.applyStyle = function (attrList) {\n        Object.entries(attrList).forEach(([key, value], _) => {\n            svgObject.node.style[key] = value;\n        });\n    };\n    // add extra funcitons to the object\n    // superGNObject(svgObject, saveToDatabase, arrayID, insertPosition, dataPointer)\n    SuperSVG(svgObject, arrayID, insertPosition, dataPointer, saveToDatabase);\n    return svgObject;\n}\n//@auto-fold here\nfunction GNSvgLine(name, arrayID, insertPosition, dataPointer, saveToDatabase = true) {\n    let svgObject = new (svg_js__WEBPACK_IMPORTED_MODULE_0___default().Line)();\n    svgObject.GNType = GNSvgLine.name;\n    svgObject._name = name;\n    svgObject._dataStructure = [\"value\"];\n    svgObject._styleStructure = [];\n    // functions\n    svgObject.loadFromData = (data) => { svgObject = data; };\n    svgObject.extract = () => svgObject.createDataObject();\n    svgObject.applyStyle = function (attrList) {\n        svgObject.plot(attrList[\"points\"]);\n        svgObject.attr(attrList[\"attribute\"]);\n    };\n    // add extra funcitons to the object\n    // superGNObject(svgObject, saveToDatabase, arrayID, insertPosition, dataPointer)\n    SuperSVG(svgObject, arrayID, insertPosition, dataPointer, saveToDatabase);\n    return svgObject;\n}\n//@auto-fold here\nfunction GNSvgPolyLine(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData } = createData;\n    let svgObjectSoul = svg_js__WEBPACK_IMPORTED_MODULE_0___default()(document.createElement(\"polyline\")).polyline([0, 0, 0, 0]);\n    let svgObject = svgObjectSoul.node;\n    svgObject.soul = svgObjectSoul;\n    svgObject.GNType = GNSvgPolyLine.name;\n    svgObject._name = name;\n    svgObject._dataStructure = [\"points\"];\n    svgObject._styleStructure = [\"stroke\", \"stroke-width\", \"fill\"];\n    // functions\n    svgObject.loadFromData = (injectedData) => {\n        svgObject.soul.plot(injectedData[\"data\"][\"points\"]);\n        svgObject.applyStyle(injectedData[\"stylesheet\"]);\n    };\n    svgObject.createDataObject = function () {\n        let dataObject = createDummyData();\n        // data structure\n        dataObject[\"GNType\"] = svgObject.GNType;\n        if (svgObject._identity)\n            dataObject[\"_identity\"] = svgObject._identity;\n        dataObject[\"data\"][\"points\"] = svgObject.soul.array().value.toString();\n        // stylesheet data\n        dataObject[\"stylesheet\"][\"stroke\"] = svgObject[\"style\"][\"stroke\"];\n        dataObject[\"stylesheet\"][\"stroke-width\"] = svgObject[\"style\"][\"stroke-width\"];\n        dataObject[\"stylesheet\"][\"fill\"] = svgObject[\"style\"][\"fill\"];\n        return dataObject;\n    };\n    svgObject.extract = () => svgObject.createDataObject();\n    svgObject.applyStyle = function (attrList) {\n        svgObject._styleStructure.forEach((p) => {\n            if (p == \"fill\") {\n                svgObject[\"style\"][\"fill\"] = attrList[\"fill\"] || \"none\";\n            }\n            else {\n                svgObject[\"style\"][p] = attrList[p];\n            }\n        });\n    };\n    // to share same data function\n    (0,_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_1__.superGNObject)(svgObject, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    SuperSVG(svgObject, arrayID, insertPosition, dataPointer, saveToDatabase);\n    // add extra funcitons to the object\n    if (injectedData) {\n        svgObject.loadFromData(injectedData);\n        svgObject.applyStyle(injectedData.stylesheet, false); //\n        if (svgObject._classNameList && svgObject._classNameList.length > 0) {\n            svgObject._classNameList.forEach((p) => svgObject.classList.add(p));\n        }\n        svgObject.identity = injectedData._identity;\n        svgObject.setAttribute(\"accessPointer\", svgObject.identity.accessPointer);\n        svgObject.objectData = injectedData;\n    }\n    return svgObject;\n} //GNSvgPolyLine\n//@auto-fold here\nfunction GNSvgImage(name, arrayID, insertPosition, dataPointer, saveToDatabase = true) {\n    let svgObject = svg_js__WEBPACK_IMPORTED_MODULE_0___default()(document.createElement(\"image\")).image();\n    svgObject.setImgSrc = function (src) {\n        svgObject.load(src);\n    };\n    svgObject.GNType = \"GNSvgImage\";\n    svgObject._name = name;\n    svgObject._dataStructure = [\"value\"];\n    svgObject._styleStructure = [];\n    // functions\n    svgObject.loadFromData = (data) => { svgObject = data; };\n    svgObject.extract = () => svgObject.createDataObject();\n    svgObject.applyStyle = function (attrList) {\n        svgObject.attr(attrList[\"attribute\"]);\n    };\n    // add extra funcitons to the object\n    // superGNObject(svgObject, saveToDatabase, arrayID, insertPosition, dataPointer)\n    SuperSVG(svgObject, arrayID, insertPosition, dataPointer, saveToDatabase);\n    return svgObject;\n}\nfunction SuperSVG(svgObject, arrayID, insertPosition, dataPointer, saveToDatabase) {\n    svgObject.appendTo = function (parentSVGContainer) {\n        svgObject.soul.addTo(parentSVGContainer.svgController);\n    };\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts?");

/***/ }),

/***/ "./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts":
/*!************************************************************************!*\
  !*** ./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createDummyData\": () => (/* binding */ createDummyData),\n/* harmony export */   \"superGNObject\": () => (/* binding */ superGNObject),\n/* harmony export */   \"attachEventListenerToLayer\": () => (/* binding */ attachEventListenerToLayer),\n/* harmony export */   \"setObjectMovable\": () => (/* binding */ setObjectMovable)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ \"./src/index.ts\");\n/* harmony import */ var _EventFolder_attachToolBoxEventsToLayers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../EventFolder/attachToolBoxEventsToLayers */ \"./src/smallTest/EventFolder/attachToolBoxEventsToLayers.ts\");\n\n\nfunction createDummyData() {\n    return {\n        \"data\": {},\n        \"array\": [],\n        \"GNType\": \"\",\n        \"specialGNType\": \"\",\n        \"_identity\": { \"dataPointer\": \"\", \"accessPointer\": \"\", \"linkArray\": [\"\"] },\n        \"stylesheet\": {},\n        \"GNSpecialCreationMessage\": \"\",\n        \"_classNameList\": []\n    };\n}\n//@auto-fold here\nfunction superGNObject(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData, attachEventListener = true) {\n    _object = _object;\n    // to set the object _identity\n    let accessPointer = `${Date.now().toString(36) + Math.random().toString(36).substr(2)}`;\n    _object._identity = {\n        parentAccessPointer: arrayID,\n        accessPointer: accessPointer,\n        dataPointer: dataPointer || accessPointer,\n        linkArray: [accessPointer],\n        children: []\n    };\n    _object.setAttribute(\"accessPointer\", accessPointer);\n    // when the data is first created, add it to the database\n    _object.addToDatabase = function (arrayID, insertPosition, dataPointer, specialMessage) {\n        _index__WEBPACK_IMPORTED_MODULE_0__.mainController.addData(arrayID, _object, accessPointer, insertPosition, dataPointer, specialMessage);\n    };\n    _object.saveHTMLObjectToDatabase = function () {\n        let latestUpdateTime = `${new Date()}`;\n        _object.setAttribute(\"latestUpdateTime\", latestUpdateTime);\n        _index__WEBPACK_IMPORTED_MODULE_0__.mainController.saveHTMLObjectToDatabase(_object, insertPosition);\n        window.markedObject = _object;\n        let pageHtmlObject = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.tracePageFromElement(_object);\n        pageHtmlObject.setAttribute(\"latestUpdateTime\", latestUpdateTime);\n    };\n    /** to apply stylesheet to an element */\n    _object.updateLinkObject = function () {\n        let dataPointer = _object.getDataPointer();\n        let accessPointer = _object.getAccessPointer();\n        let masterObject = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.getObjectById(dataPointer);\n        let linkArray = masterObject._identity.linkArray;\n        let dataObject = _object.extract();\n        linkArray.forEach((p) => {\n            let targetHTML = document.querySelector(`*[accesspointer='${p}']`);\n            if (p != accessPointer) {\n                targetHTML === null || targetHTML === void 0 ? void 0 : targetHTML.loadFromData(dataObject);\n            }\n            else {\n                // _object.saveHTMLObjectToDatabase\n            }\n        });\n    };\n    _object.initializeHTMLObjectFromData = function (data) {\n        _object.setAttribute(\"accessPointer\", data._identity.accessPointer);\n        _object._identity = data._identity;\n        _object.GNType = data.GNType;\n        _object.GNSpecialCreationMessage = data.GNSpecialCreationMessage;\n    };\n    _object.getLocatedPageNumber = function () {\n        if (_object.classList.contains(\"divPage\")) {\n            let targetID = _object.getAccessPointer();\n            let pageNumber = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.pageController.getPageNumberFromPageID(targetID);\n            _index__WEBPACK_IMPORTED_MODULE_0__.mainController.pageController.goToPage(pageNumber);\n            _object.scrollIntoView();\n            // return [pageNumber, mainController]\n        }\n        else {\n            let parent = _object.parentElement;\n            return parent.getLocatedPageNumber();\n        }\n    };\n    _object.appendTo = function (_parent) {\n        _object._parent = _parent;\n        _parent.appendChild(_object);\n    };\n    _object.generateGNObjectThroughGNType = function (_GNType, createDataObject) {\n        return _index__WEBPACK_IMPORTED_MODULE_0__.mainController.createGNObjectThroughName(_GNType, createDataObject);\n    };\n    // ========================================\n    // =======   for database acces    ========\n    // ========================================\n    _object.getDataPointer = function () {\n        return _object._identity.dataPointer;\n    };\n    _object.setDataPointer = function (dataPointer) {\n        _object._identity.dataPointer = dataPointer;\n    };\n    _object.getAccessPointer = function () {\n        return _object._identity.accessPointer;\n    };\n    _object.setAccessPointer = function (accessPointer) {\n        _object._identity.accessPointer = accessPointer;\n    };\n    _object.getLinkArray = function () {\n        let objectInDatabase = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.getObjectById(_object.getAccessPointer());\n        return objectInDatabase._identity.linkArray;\n    };\n    // ========================================\n    // =======   database operations   ========\n    // ========================================\n    _object.deleteFromDatabase = function () {\n        // mainController\n        _index__WEBPACK_IMPORTED_MODULE_0__.mainController.deleteFromDataBase(_object);\n    };\n    _object.getDataFromDataBase = function () {\n        return _index__WEBPACK_IMPORTED_MODULE_0__.mainController.getObjectById(_object.getDataPointer());\n    };\n    attachEventListenerToLayer(_index__WEBPACK_IMPORTED_MODULE_0__.mainController, arrayID, _object, injectedData);\n    if (saveToDatabase) {\n        let specialMessage = {\n            page: insertPosition || \"insert At\", insert: \"back\"\n        };\n        _object.addToDatabase(arrayID, insertPosition, dataPointer, specialMessage);\n        // _object.editEvent(editEvent)\n    }\n}\nfunction attachEventListenerToLayer(mainController, arrayID, _object, injectedData) {\n    var _a, _b;\n    let alreadyAttach = _object.getAttribute(\"eventAttached\");\n    if (alreadyAttach == \"true\")\n        return;\n    if (_object.classList.contains(\"divPage\"))\n        return;\n    if ((_object.classList.contains(\"svgLayer\") || ((_a = injectedData === null || injectedData === void 0 ? void 0 : injectedData._classNameList) === null || _a === void 0 ? void 0 : _a.includes(\"svgLayer\"))) && _object.getAttribute(\"eventAttached\") != \"true\") {\n        _EventFolder_attachToolBoxEventsToLayers__WEBPACK_IMPORTED_MODULE_1__.attachEventListenerToSvgBoard(mainController, _object);\n        _object.classList.add(\"attachedEventSvgLayer\");\n        _object.setAttribute(\"eventAttached\", \"true\");\n    }\n    if ((_object.classList.contains(\"divLayer\") || ((_b = injectedData === null || injectedData === void 0 ? void 0 : injectedData._classNameList) === null || _b === void 0 ? void 0 : _b.includes(\"divLayer\"))) && _object.getAttribute(\"eventAttached\") != \"true\") {\n        _EventFolder_attachToolBoxEventsToLayers__WEBPACK_IMPORTED_MODULE_1__.attachEventListenerToDivLayer(mainController, _object);\n        _object.setAttribute(\"eventAttached\", \"true\");\n    }\n    _object.setAttribute(\"passedAtachEventListenerToLayer\", \"true\");\n}\n// f = document.querySelectorAll(\".currentPage>polyline\")\n// Array.from(f).forEach(p=>p.deleteFromDatabase())\nfunction setObjectMovable(_object) {\n    let eventName = \"mousedown\";\n    let moveEventName = \"mousemove\";\n    let attributeX = \"left\";\n    let attributeY = \"top\";\n    _object.style.position = \"absolute\";\n    _object.addEventListener(\"mousedown\", (e) => {\n        // e.stopPropagation()\n        let [startX, startY] = [e[\"screenX\"], e[\"screenY\"]];\n        let objectInitialX = 0;\n        let objectInitialY = 0;\n        let initialLeftValue = parseInt(_object.style[attributeX].replace(\"px\", \"\")) || 0;\n        let initialTopValue = parseInt(_object.style[attributeY].replace(\"px\", \"\")) || 0;\n        let [currentX, currentY, deltaX, deltaY] = [0, 0, 0, 0];\n        let mousemoveFunction = (e) => {\n            e.stopPropagation();\n            currentY = e.screenY;\n            currentX = e.screenX;\n            deltaX = currentX - startX;\n            deltaY = currentY - startY;\n            let newX = _object.style[attributeX] = `${initialLeftValue + deltaX}px`;\n            _object.style[attributeY] = `${initialTopValue + deltaY}px`;\n        };\n        function endDragEvent(e) {\n            var _a;\n            Array.from((_a = _object === null || _object === void 0 ? void 0 : _object.parentNode) === null || _a === void 0 ? void 0 : _a.childNodes).forEach((p) => {\n                p[\"style\"][\"pointerEvents\"] = \"inherit\";\n            });\n            let endX = e[\"screenX\"];\n            let endY = e[\"screenY\"];\n            _object.removeEventListener(\"mousemove\", mousemoveFunction);\n        }\n        let mouseUpEvent = (e) => {\n            e.stopPropagation();\n            endDragEvent(e);\n            _object.removeEventListener(\"mouseup\", mouseUpEvent);\n            _object.removeEventListener(\"mouseout\", mouseUpEvent);\n            if (deltaX == 0 && deltaY == 0)\n                return;\n            if (e.type == \"mouseup\") {\n                _object.saveHTMLObjectToDatabase();\n            }\n        };\n        _object.addEventListener(\"mousemove\", mousemoveFunction, false);\n        _object.addEventListener(\"mouseup\", mouseUpEvent, false);\n        _object.addEventListener(\"mouseout\", mouseUpEvent, false);\n    });\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/ToolboxEventFunction.ts":
/*!*************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/ToolboxEventFunction.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"polylineMouseDownFunction\": () => (/* binding */ polylineMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteSvgDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts\");\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n\n\nfunction polylineMouseDownFunction(e, mainController, svgBoard, moveEventName, upEventName) {\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"polylineItemButton\")) {\n        return;\n    }\n    let polylineController = mainController.attributeControllerMapping.polylineController;\n    let [offsetX, offsetY, touchIsPen, ratio] = [0, 0, false, 0];\n    let originalWidth = mainController.pageCurrentStatus.fullPageSize[0];\n    if (e.type == \"touchstart\") {\n        let rect = e.target.getBoundingClientRect();\n        ratio = rect.width / originalWidth;\n        offsetX = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.targetTouches[0].pageX - rect.left, ratio);\n        offsetY = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.targetTouches[0].pageY - rect.top, ratio);\n        touchIsPen = e.targetTouches[0].radiusX > 10 ? false : true;\n    }\n    if (e.type == \"mousedown\") {\n        offsetX = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.offsetX, ratio);\n        offsetY = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.offsetY, ratio);\n    }\n    // touchIsPen = true\n    if (e.type == \"mousedown\" || touchIsPen) {\n        e.preventDefault();\n        let [strokeColor, strokeWidth] = polylineController.extract();\n        let polyline = _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__.GNSvgPolyLine({ name: \"\", arrayID: svgBoard.getAccessPointer(), insertPosition: false, dataPointer: false, saveToDatabase: true, specialCreationMessage: \"polylineCreated\" });\n        polyline.style.pointerEvents = \"none\";\n        let pointArray = [[offsetX, offsetY]];\n        //\n        polyline.soul.plot(pointArray);\n        polyline.appendTo(svgBoard);\n        polyline.applyStyle({ \"stroke\": strokeColor, \"stroke-width\": strokeWidth, \"fill\": \"none\" });\n        //\n        // define the mouse move event\n        let mouseMoveFunction = (e) => {\n            e.preventDefault();\n            let [newOffsetX, newOffsetY] = [0, 0];\n            if (e.type == \"touchmove\") {\n                let rect = e.target.getBoundingClientRect();\n                newOffsetX = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.targetTouches[0].pageX - rect.left, ratio);\n                newOffsetY = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.targetTouches[0].pageY - rect.top, ratio);\n            }\n            if (e.type == \"mousemove\") {\n                newOffsetX = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.offsetX, ratio);\n                newOffsetY = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.mousePositionRatioAdjustment)(e.offsetY, ratio);\n            }\n            pointArray.push([newOffsetX, newOffsetY]);\n            polyline.soul.plot(pointArray);\n        };\n        // define the mouse move function\n        let mouseUpFunction = (e) => {\n            e.preventDefault();\n            pointArray = [];\n            polyline.saveHTMLObjectToDatabase();\n            svgBoard.removeEventListener(moveEventName, mouseMoveFunction);\n            svgBoard.removeEventListener(upEventName, mouseUpFunction);\n        };\n        svgBoard.addEventListener(moveEventName, mouseMoveFunction);\n        svgBoard.addEventListener(upEventName, mouseUpFunction);\n    }\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/ToolboxEventFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/addBookmarkFunction.ts":
/*!************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/addBookmarkFunction.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addBookmarkMouseDownFunction\": () => (/* binding */ addBookmarkMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _bookmarkFolder_GNBookmark__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bookmarkFolder/GNBookmark */ \"./src/smallTest/bookmarkFolder/GNBookmark.ts\");\n/* harmony import */ var _bookmarkFolder_GNBookmarkLinkedObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bookmarkFolder/GNBookmarkLinkedObject */ \"./src/smallTest/bookmarkFolder/GNBookmarkLinkedObject.ts\");\n\n\nfunction addBookmarkMouseDownFunction(e, mainController, divLayer, moveEventName, upEventName) {\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"addBookmarkButton\")) {\n        return;\n    }\n    console.log(\"from addBookmarkFunction\", e);\n    let divLayerAccessID = divLayer.getAccessPointer();\n    // the bookmark objectt\n    let bookmarkDiv = (0,_bookmarkFolder_GNBookmark__WEBPACK_IMPORTED_MODULE_0__.GNBookmark)({ name: \"GNBookmark\", arrayID: divLayerAccessID, saveToDatabase: true });\n    // the linked object\n    let bookmarkSidebar = document.querySelector(\".commentSubPanel .subPanelContent\");\n    let boookmarkLinkedObejctDataPointer = bookmarkDiv.getAttribute(\"accessPointer\");\n    let bookmarkSidebarContentAccessPointer = mainController.mainDocArray[\"mainArray_bookmark\"];\n    let bookmarkLinkedObject = (0,_bookmarkFolder_GNBookmarkLinkedObject__WEBPACK_IMPORTED_MODULE_1__.GNBookmarkLinkedObject)({ name: \"GNBookmarkLinkedObject\", arrayID: bookmarkSidebarContentAccessPointer, dataPointer: boookmarkLinkedObejctDataPointer, saveToDatabase: true });\n    divLayer.append(bookmarkDiv);\n    bookmarkSidebar.append(bookmarkLinkedObject);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/addBookmarkFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/addCommentFunction.ts":
/*!***********************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/addCommentFunction.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addCommentMouseDownFunction\": () => (/* binding */ addCommentMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _commentFolder_commentController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commentFolder/commentController */ \"./src/smallTest/commentFolder/commentController.ts\");\n\nfunction addCommentMouseDownFunction(e, mainController, divLayer, moveEventName, upEventName) {\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"addCommentItemButton\")) {\n        return;\n    }\n    let divLayerAccessID = divLayer.getAccessPointer();\n    let commentBox = _commentFolder_commentController__WEBPACK_IMPORTED_MODULE_0__.GNComment({ name: \"commentDiv\", arrayID: divLayerAccessID, saveToDatabase: true });\n    //\n    //\n    divLayer.append(commentBox);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/addCommentFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/eraserFunction.ts":
/*!*******************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/eraserFunction.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"detectCollision\": () => (/* binding */ detectCollision),\n/* harmony export */   \"eraserMouseDownFunction\": () => (/* binding */ eraserMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteSvgDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts\");\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n\n\nfunction detectCollision(svgBoard, eraser) {\n    let objectsInTheLayer = svgBoard.querySelectorAll(\"polyline\");\n    let newPoint = svgBoard.createSVGPoint();\n    objectsInTheLayer.forEach((object) => {\n        let lineArray = object.soul.array().value;\n        Array.from(lineArray).forEach((p) => {\n            newPoint.x = p[0];\n            newPoint.y = p[1];\n            if (eraser.isPointInFill(newPoint)) {\n                object.deleteFromDatabase();\n                return;\n            }\n        });\n        return;\n    });\n}\nfunction eraserMouseDownFunction(e, mainController, svgBoard, moveEventName, upEventName) {\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"eraserItemButton\")) {\n        return;\n    }\n    let [offsetX, offsetY, touchIsPen] = _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.getOffSetXY(e);\n    // touchIsPen = true\n    if (!touchIsPen)\n        return;\n    e.preventDefault();\n    let eraserRadiusInput = document.querySelector(\".eraserRadiusInput\");\n    if (e.type == \"mousedown\" || touchIsPen) {\n        let cx = offsetX + \"px\";\n        let cy = offsetY + \"px\";\n        let r = eraserRadiusInput.value;\n        let eraser = _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__.GNSvgCircle({ name: \"123\", arrayID: \"\", insertPosition: false, dataPointer: false, saveToDatabase: false });\n        eraser.style[\"cx\"] = cx;\n        eraser.style[\"cy\"] = cy;\n        eraser.style[\"r\"] = r + \"px\";\n        let mouseMoveFunction = (e) => {\n            // t1 = t2\n            // t2 = e.timeStamp\n            let [offsetX, offsetY, touchIsPen] = _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.getOffSetXY(e);\n            let logTest = `offsetX = ${offsetX} <br>` + `offsetY = ${offsetY}`;\n            _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.locationLog(logTest);\n            eraser.style[\"cx\"] = offsetX;\n            eraser.style[\"cy\"] = offsetY;\n            detectCollision(svgBoard, eraser);\n        };\n        let mouseUpFunciton = (e) => {\n            svgBoard.removeEventListener(moveEventName, mouseMoveFunction);\n            svgBoard.removeEventListener(upEventName, mouseUpFunciton);\n            eraser.remove();\n        };\n        svgBoard.addEventListener(moveEventName, mouseMoveFunction);\n        svgBoard.addEventListener(upEventName, mouseUpFunciton);\n        svgBoard.appendChild(eraser);\n    } // if (e.type==\"mousedown\" || touchIsPen)\n} // eraserMouseDownFunction\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/eraserFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/moveObjectInDivFunction.ts":
/*!****************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/moveObjectInDivFunction.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"moveObejectInDivMouseDownFunction\": () => (/* binding */ moveObejectInDivMouseDownFunction),\n/* harmony export */   \"moveEventFunction\": () => (/* binding */ moveEventFunction)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n\n\nlet allowedSelectionObject = [_settings__WEBPACK_IMPORTED_MODULE_0__.ClassNameCollection.commentContainer];\nfunction moveObejectInDivMouseDownFunction(e, mainController, divLayer, moveEventName, upEventName) {\n    console.log(888888, e.target, divLayer, moveEventName, upEventName);\n    if (e.target.tagName == \"IMG\" && e.target.parentElement.GNType == \"GNImageContainer\") {\n        let imageContainerAttributeController = document.querySelector(\".imageContainerAttributeController\");\n        imageContainerAttributeController.targetImageContainer = e.target.parentElement;\n        imageContainerAttributeController.renderImage();\n        console.log(121212, imageContainerAttributeController);\n    }\n    // let originalObjectPosition: any, _\n    // let clickedPosition = {x: 0, y:0}\n    //\n    // if (!mainController.toolBox.checkToolBoxItemStatus(\"moveObjectInDivButton\")){\n    //     return\n    // }\n    //\n    // if (divSelctionObjectStatus.selectedObject){\n    //     divSelctionObjectStatus.selectedObject.classList.remove(\"selectedObjectInDiv\")\n    // }\n    //\n    // // if the objeect is in the allowedSelectionObject list, then\n    // divSelctionObjectStatus.selectedObject = e.target\n    // e.target.classList.add(\"selectedObjectInDiv\");\n    //\n    // // get the object's original position\n    //\n    // [clickedPosition.x, clickedPosition.y, _] = ToolBoxHelperFunction.getPageXY(e);\n    //\n    //\n    // originalObjectPosition = {x: divSelctionObjectStatus.selectedObject.offsetLeft, y: divSelctionObjectStatus.selectedObject.offsetTop}\n    // console.log(\"the target Object is\", e.target)\n    // // mousemove event listener\n    // let _moveEventFunction = (e:any)=>{\n    //   console.log(34, \"moveEventFUnction\")\n    //     moveEventFunction(e, divSelctionObjectStatus, originalObjectPosition, clickedPosition)\n    // }\n    // // mouseup event listener\n    // let _upEventFunction = (e:any)=>{\n    //   console.log(349, \"_upEventFunction\")\n    //     divLayer.removeEventListener(moveEventName, _moveEventFunction)\n    //     divLayer.removeEventListener(upEventName, _upEventFunction)\n    //     divSelctionObjectStatus.selectedObject.saveHTMLObjectToDatabase()\n    // }\n    //\n    // divLayer.addEventListener(moveEventName, _moveEventFunction)\n    // divLayer.addEventListener(upEventName, _upEventFunction)\n}\nfunction moveEventFunction(e, divSelctionObjectStatus, originalObjectPosition, clickedPosition) {\n    let newPosition;\n    let deltaX, deltaY;\n    let [offsetX, offsetY, _] = _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.getPageXY(e);\n    [deltaX, deltaY] = [offsetX - clickedPosition.x, offsetY - clickedPosition.y];\n    divSelctionObjectStatus.selectedObject.style.position = \"absolute\";\n    newPosition = {\n        x: originalObjectPosition.x + deltaX + \"px\",\n        y: originalObjectPosition.y + deltaY + \"px\"\n    };\n    console.log(52525252);\n    divSelctionObjectStatus.selectedObject.style.left = newPosition.x;\n    divSelctionObjectStatus.selectedObject.style.top = newPosition.y;\n}\n// function upEventFunction(divLayer, divSelctionObjectStatus:any, _moveEventName:string, _moveEventFunction, _upEventName:string, _upEventFunction){\n//     console.log(divLayer, divSelctionObjectStatus, _moveEventName, _moveEventFunction, _upEventName, _upEventFunction)\n//     divLayer.removeEventListener(_moveEventName, _moveEventFunction)\n//     divLayer.removeEventListener(_upEventName, _upEventFunction)\n//     // divSelctionObjectStatus.selectedObject.saveHTMLObjectToDatabase()\n//\n// }\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/moveObjectInDivFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/rectangleSelectionFunction.ts":
/*!*******************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/rectangleSelectionFunction.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"overallMouseDownFunction\": () => (/* binding */ overallMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n/* harmony import */ var _rectangleSelectionToolPhaseOne__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rectangleSelectionToolPhaseOne */ \"./src/smallTest/ToolboxFolder/rectangleSelectionToolPhaseOne.ts\");\n\n\nfunction overallMouseDownFunction(e, mainController, overlay, moveEventName, upEventName) {\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"rectangleSelectionToolItemButton\"))\n        return;\n    let offsetX, offstY, touchIsPen;\n    [offsetX, offstY, touchIsPen] = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getOffSetXY)(e);\n    e.preventDefault();\n    console.log(141414, overlay);\n    // if (selectionStatusObject.mode==\"phaseOne\"){\n    (0,_rectangleSelectionToolPhaseOne__WEBPACK_IMPORTED_MODULE_1__.selectionToolPhaseOneMouseDownFunction)(e, mainController, overlay, moveEventName, upEventName);\n    // selectionStatusObject.mode = \"phaseTwo\"\n    // } else if (selectionStatusObject.mode==\"phaseTwo\"){\n    //     selectionToolPhaseTwoMouseDownEvent(e, mainController, svgBoard, moveEventName, upEventName, selectionStatusObject)\n    // }\n} // overallMouseDownFunction\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/rectangleSelectionFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/rectangleSelectionHelperFunction.ts":
/*!*************************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/rectangleSelectionHelperFunction.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getPointWidthAndHeight\": () => (/* binding */ getPointWidthAndHeight),\n/* harmony export */   \"checkPointInsideRect\": () => (/* binding */ checkPointInsideRect),\n/* harmony export */   \"checkCornersInside\": () => (/* binding */ checkCornersInside),\n/* harmony export */   \"checkSideInsideRect\": () => (/* binding */ checkSideInsideRect),\n/* harmony export */   \"addEventToSelectionRect\": () => (/* binding */ addEventToSelectionRect)\n/* harmony export */ });\nfunction getPointWidthAndHeight(rect) {\n    let rectData = rect.getBoundingClientRect();\n    let { x, y, width, height } = rectData;\n    let w = width;\n    let h = height;\n    return { x, y, w, h };\n} // checkSideInsideRect\nfunction checkPointInsideRect(point, rectData) {\n    return point.x > rectData.x && point.x < rectData.x + rectData.w && point.y > rectData.y && point.y < rectData.y + rectData.h;\n} // checkSideInsideRect\nfunction checkCornersInside(rect1Data, rect2Data) {\n    let c1 = { x: rect1Data.x, y: rect1Data.y };\n    let c2 = { x: rect1Data.x + rect1Data.w, y: rect1Data.y };\n    let c3 = { x: rect1Data.x + rect1Data.w, y: rect1Data.y + rect1Data.h };\n    let c4 = { x: rect1Data.x, y: rect1Data.y + rect1Data.h };\n    return [checkPointInsideRect(c1, rect2Data), checkPointInsideRect(c2, rect2Data), checkPointInsideRect(c3, rect2Data), checkPointInsideRect(c4, rect2Data)];\n} // checkSideInsideRect\nfunction checkSideInsideRect(rect1Data, rect2Data) {\n    let x1_1 = rect1Data.x;\n    let x1_2 = rect1Data.x + rect1Data.w;\n    let y1_1 = rect1Data.y;\n    let y1_2 = rect1Data.y + rect1Data.h;\n    let x2_1 = rect2Data.x;\n    let x2_2 = rect2Data.x + rect2Data.w;\n    let y2_1 = rect2Data.y;\n    let y2_2 = rect2Data.y + rect2Data.h;\n    if (x1_1 < x2_1 && x1_2 > x2_2 && y1_1 > y2_1 && y1_2 < y2_2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n} // checkSideInsideRect\nfunction addEventToSelectionRect(selectionRect, rectSelectionToolController) {\n    selectionRect.addEventListener(\"mousedown\", e => {\n        e.stopPropagation();\n        let [initialX, initialY, deltaX, deltaY] = [e.offsetX, e.offsetY, 0, 0];\n        let selectionRectInitialPositionX = +selectionRect.style.left.replace(\"px\", \"\");\n        let selectionRectInitialPositionY = +selectionRect.style.top.replace(\"px\", \"\");\n        let divObjectInitialPosition = selectionRect.divLayerItemArray.map((p) => {\n            let x = +p.style.left.replace(\"px\", \"\");\n            let y = +p.style.top.replace(\"px\", \"\");\n            return { x, y };\n        });\n        let svgObjectInitialPosition = selectionRect.svgLayerItemArray.map((p) => {\n            return p.soul.array().value;\n        });\n        console.log(7070, selectionRect.svgLayerItemArray);\n        let mouseMoveFunction = function (mouseeMoveEvent) {\n            e.preventDefault();\n            let [offsetX, offsetY] = [mouseeMoveEvent.offsetX, mouseeMoveEvent.offsetY];\n            [deltaX, deltaY] = [offsetX - initialX, offsetY - initialY];\n            selectionRect.style.left = selectionRectInitialPositionX + deltaX + \"px\";\n            selectionRect.style.top = selectionRectInitialPositionY + deltaY + \"px\";\n            let divCheckbox = rectSelectionToolController.querySelector(\"#divCheckBox\");\n            let svgCheckbox = rectSelectionToolController.querySelector(\"#svgCheckBox\");\n            if (divCheckbox.checked) {\n                let divLayerItemArray = rectSelectionToolController.selectedItem.divLayerItemArray;\n                for (let i = 0; i < divLayerItemArray.length; i++) {\n                    let { x, y } = divObjectInitialPosition[i];\n                    divLayerItemArray[i].style.left = x + deltaX + \"px\";\n                    divLayerItemArray[i].style.top = y + deltaY + \"px\";\n                }\n            }\n            if (svgCheckbox.checked) {\n                let svgLayerItemArray = rectSelectionToolController.selectedItem.svgLayerItemArray;\n                for (let i = 0; i < svgLayerItemArray.length; i++) {\n                    let newPointPosition = svgObjectInitialPosition[i].map((p) => [p[0] + deltaX, p[1] + deltaY]);\n                    svgLayerItemArray[i].soul.plot(newPointPosition);\n                }\n            }\n        };\n        let mouseUpFunction = function (mouseeUpEvent) {\n            selectionRect.divLayerItemArray.forEach(p => p.saveHTMLObjectToDatabase());\n            selectionRect.svgLayerItemArray.forEach(p => p.saveHTMLObjectToDatabase());\n            e.preventDefault();\n            selectionRect.removeEventListener(\"mousemove\", mouseMoveFunction);\n            selectionRect.removeEventListener(\"mouseup\", mouseUpFunction);\n            selectionRect.removeEventListener(\"mouseout\", mouseUpFunction);\n        };\n        selectionRect.addEventListener(\"mousemove\", mouseMoveFunction);\n        selectionRect.addEventListener(\"mouseup\", mouseUpFunction);\n        selectionRect.addEventListener(\"mouseout\", mouseUpFunction);\n        rectSelectionToolController.selectedItem;\n    });\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/rectangleSelectionHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/rectangleSelectionToolPhaseOne.ts":
/*!***********************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/rectangleSelectionToolPhaseOne.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"selectionToolPhaseOneMouseDownFunction\": () => (/* binding */ selectionToolPhaseOneMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\n/* harmony import */ var _rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rectangleSelectionHelperFunction */ \"./src/smallTest/ToolboxFolder/rectangleSelectionHelperFunction.ts\");\n\n\n\nlet strokeColor = \"blue\";\nlet strokeWidth = \"2px\";\nfunction selectionToolPhaseOneMouseDownFunction(e, mainController, overlay, moveEventName, upEventName) {\n    let rectSelectionToolController = mainController.attributeControllerMapping.rectSelectionToolController;\n    let phaseInput = rectSelectionToolController.querySelector(\".phaseInput\");\n    phaseInput.value = \"phaseOne\";\n    // if (selectionStatusObject.mode != \"phaseOne\"){\n    //     return\n    // }\n    for (let child of overlay.children) {\n        child.style.pointerEvents = \"none\";\n    }\n    let [originalPositionX, originalPositionY, touchIsPen] = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getOffSetXY)(e);\n    let [offsetX, offsetY] = [originalPositionX, originalPositionY];\n    let strokeWidth = 5;\n    let selectionRect = document.createElement(\"div\");\n    selectionRect.classList.add(\"selectionRect\");\n    selectionRect.style.position = \"absolute\";\n    selectionRect.style.border = `${strokeWidth}px solid blue`;\n    selectionRect.style.left = originalPositionX + \"px\";\n    selectionRect.style.top = originalPositionY + \"px\";\n    selectionRect.style.width = \"0px\";\n    selectionRect.style.height = \"0px\";\n    selectionRect.style.pointerEvents = \"none\";\n    rectSelectionToolController.selectionRect = selectionRect;\n    (0,_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__.addEventToSelectionRect)(selectionRect, rectSelectionToolController);\n    overlay.append(selectionRect);\n    let rect = e.target.getBoundingClientRect();\n    let ratio = rect.width / _settings__WEBPACK_IMPORTED_MODULE_1__.pageSizeInfo.fullPageSize[0];\n    let [top, left, width, height] = [0, 0, 0, 0];\n    let mouseMoveFunction = (e) => {\n        e.preventDefault();\n        let offsetX, offsetY;\n        let rect = e.target.getBoundingClientRect();\n        offsetX = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.mousePositionRatioAdjustment)(e.offsetX, ratio);\n        offsetY = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.mousePositionRatioAdjustment)(e.offsetY, ratio);\n        width = Math.abs(originalPositionX - offsetX);\n        height = Math.abs(originalPositionY - offsetY);\n        phaseInput.value = `${offsetX}, ${offsetY}`;\n        // in region 1\n        if (offsetX > originalPositionX && offsetY < originalPositionY) {\n            [left, top] = [originalPositionX, offsetY];\n        }\n        // in region 2\n        if (offsetX < originalPositionX && offsetY < originalPositionY) {\n            [left, top] = [offsetX, offsetY];\n        }\n        // in region 3\n        if (offsetX < originalPositionX && offsetY > originalPositionY) {\n            [left, top] = [offsetX, originalPositionY];\n        }\n        // in region 4\n        if (offsetX > originalPositionX && offsetY > originalPositionY) {\n            [left, top] = [originalPositionX, originalPositionY];\n        }\n        selectionRect.style.left = left + \"px\";\n        selectionRect.style.top = top + \"px\";\n        selectionRect.style.width = width + \"px\";\n        selectionRect.style.height = height + \"px\";\n    };\n    let mouseUpFunction = (e) => {\n        e.preventDefault();\n        // to recover the pointerEvent\n        for (let child of overlay.children) {\n            child.style.pointerEvents = \"auto\";\n        }\n        phaseInput.value = JSON.stringify([left, top, width, height]);\n        let currentPageHTMLObject = mainController.pageController.currentPage.fullPageHTMLObject;\n        // create divLayerSelectionRect and svgLayerSelectionRect\n        let divLayer = currentPageHTMLObject.querySelector(\".divLayer\");\n        let svgLayer = currentPageHTMLObject.querySelector(\".svgLayer\");\n        rectSelectionToolController.divLayer = divLayer;\n        rectSelectionToolController.svgLayer = svgLayer;\n        let divLayerSelectionRect = document.createElement(\"div\");\n        divLayerSelectionRect.classList.add(\"divLayerSelectionRect\");\n        divLayerSelectionRect.style.position = \"absolute\";\n        divLayerSelectionRect.style.left = left + \"px\";\n        divLayerSelectionRect.style.top = top + \"px\";\n        divLayerSelectionRect.style.width = width + \"px\";\n        divLayerSelectionRect.style.height = height + \"px\";\n        divLayerSelectionRect.style.background = \"pink\";\n        divLayerSelectionRect.style.border = \"5px solid red\";\n        divLayerSelectionRect.style.opacity = \"0\";\n        divLayer.append(divLayerSelectionRect);\n        let svgLayerSelectionRect = svgLayer.svgController.rect(width + strokeWidth * 2, height + strokeWidth * 2);\n        svgLayerSelectionRect.attr({\n            x: left, y: top, fill: \"none\", stroke: '#000',\n            \"fill-opacity\": 0.5, \"stroke-width\": strokeWidth,\n            \"stroke-dasharray\": \"5\"\n        });\n        svgLayerSelectionRect.node.style.opacity = \"0\";\n        rectSelectionToolController.selectionRect = [selectionRect, divLayerSelectionRect, svgLayerSelectionRect];\n        rectSelectionToolController.selectionRectInfo = { left, top, width, height };\n        let selectedDivLayerItem = new Set();\n        let selectedSvgLayerItem = new Set();\n        let divSelectionRectData = (0,_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__.getPointWidthAndHeight)(divLayerSelectionRect);\n        Array.from(divLayer.children).forEach((p) => {\n            if (p.nodeName != \"DIV\")\n                return;\n            let tempRect = (0,_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__.getPointWidthAndHeight)(p);\n            let checkCorner1 = (0,_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__.checkCornersInside)(tempRect, divSelectionRectData);\n            let checkCorner2 = (0,_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__.checkCornersInside)(divSelectionRectData, tempRect);\n            let checkSide1 = (0,_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__.checkSideInsideRect)(divSelectionRectData, tempRect);\n            let checkSide2 = (0,_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_2__.checkSideInsideRect)(tempRect, divSelectionRectData);\n            let resultArray = [checkCorner1, checkCorner2, checkSide1, checkSide2].flat();\n            let overlapped = resultArray.some(p => p == true);\n            if (overlapped) {\n                selectedDivLayerItem.add(p);\n            }\n        });\n        let tempPoint = svgLayer.createSVGPoint();\n        Array.from(svgLayer.children).forEach((p) => {\n            if (p.tagName == \"polyline\") {\n                let pointArrayOfPolyline = p.soul.array().value;\n                for (let _p of pointArrayOfPolyline) {\n                    tempPoint.x = _p[0];\n                    tempPoint.y = _p[1];\n                    if (svgLayerSelectionRect.node.isPointInFill(tempPoint)) {\n                        selectedSvgLayerItem.add(p);\n                        break;\n                    }\n                } // // for pointArrayOfPolyline\n            } // if (p.tagName == \"polyline\"){\n        }); // svgBoard.children.forEach\n        selectionRect.divLayerItemArray = Array.from(selectedDivLayerItem);\n        selectionRect.svgLayerItemArray = Array.from(selectedSvgLayerItem);\n        rectSelectionToolController.selectedItem = {\n            divLayerItemArray: Array.from(selectedDivLayerItem),\n            svgLayerItemArray: Array.from(selectedSvgLayerItem)\n        };\n        // cleaan up\n        (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.clearUpEvent)(overlay, moveEventName, mouseMoveFunction);\n        (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.clearUpEvent)(overlay, upEventName, mouseUpFunction);\n    };\n    // define the mouse move event\n    overlay.addEventListener(moveEventName, mouseMoveFunction);\n    overlay.addEventListener(upEventName, mouseUpFunction);\n} // mouseDownEventBeforeSelection\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/rectangleSelectionToolPhaseOne.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/selectionToolFunction.ts":
/*!**************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/selectionToolFunction.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"overallMouseDownFunction\": () => (/* binding */ overallMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n/* harmony import */ var _selectionToolPhaseOne__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectionToolPhaseOne */ \"./src/smallTest/ToolboxFolder/selectionToolPhaseOne.ts\");\n/* harmony import */ var _selectionToolPhaseTwo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectionToolPhaseTwo */ \"./src/smallTest/ToolboxFolder/selectionToolPhaseTwo.ts\");\n\n\n\nfunction overallMouseDownFunction(e, mainController, svgBoard, moveEventName, upEventName, selectionStatusObject) {\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"selectionToolItemButton\"))\n        return;\n    let offsetX, offstY, touchIsPen;\n    [offsetX, offstY, touchIsPen] = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getOffSetXY)(e);\n    if (!touchIsPen)\n        return;\n    e.preventDefault();\n    let selectionRectForCopyAndPaste = document.querySelector(\".selectionRectForCopyAndPaste\");\n    if (selectionRectForCopyAndPaste) {\n        selectionRectForCopyAndPaste.remove();\n    }\n    if (selectionStatusObject.mode == \"phaseOne\") {\n        (0,_selectionToolPhaseOne__WEBPACK_IMPORTED_MODULE_1__.selectionToolPhaseOneMouseDownFunction)(e, mainController, svgBoard, moveEventName, upEventName, selectionStatusObject);\n        selectionStatusObject.mode = \"phaseTwo\";\n    }\n    else if (selectionStatusObject.mode == \"phaseTwo\") {\n        (0,_selectionToolPhaseTwo__WEBPACK_IMPORTED_MODULE_2__.selectionToolPhaseTwoMouseDownEvent)(e, mainController, svgBoard, moveEventName, upEventName, selectionStatusObject);\n    }\n} // overallMouseDownFunction\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/selectionToolFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/selectionToolPhaseOne.ts":
/*!**************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/selectionToolPhaseOne.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"selectionToolPhaseOneMouseDownFunction\": () => (/* binding */ selectionToolPhaseOneMouseDownFunction),\n/* harmony export */   \"markObjectInsideSelectionArea\": () => (/* binding */ markObjectInsideSelectionArea)\n/* harmony export */ });\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n/* harmony import */ var _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteSvgDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\n\n\n\nlet strokeColor = \"blue\";\nlet strokeWidth = \"2px\";\nfunction selectionToolPhaseOneMouseDownFunction(e, mainController, svgBoard, moveEventName, upEventName, selectionStatusObject) {\n    if (selectionStatusObject.mode == \"phaseTwo\") {\n        return;\n    }\n    let [originalPositionX, originalPositionY, touchIsPen] = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getOffSetXY)(e);\n    let [offsetX, offsetY] = [originalPositionX, originalPositionY];\n    // touchIsPen = true\n    if (e.type == \"mousedown\" || touchIsPen) {\n        selectionStatusObject.selectedObjectArray = [];\n        selectionStatusObject.counter += 1;\n        let polyline = _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_1__.GNSvgPolyLine({ name: \"\", saveToDatabase: false, _classNameList: [\"selectionPolyline\"] });\n        polyline.classList.add(\"selectionPolyline\");\n        polyline.style.pointerEvents = \"none\";\n        polyline.soul.plot([[offsetX, offsetY]]);\n        polyline.appendTo(svgBoard);\n        polyline.applyStyle({ \"stroke\": strokeColor, \"stroke-width\": strokeWidth, \"fill\": \"none\" });\n        polyline.style[\"stroke-dasharray\"] = \"5\";\n        selectionStatusObject.polyline = polyline;\n        let polylineArray = polyline.soul.array().value;\n        // calculate the ratio\n        let rect = e.target.getBoundingClientRect();\n        let ratio = rect.width / _settings__WEBPACK_IMPORTED_MODULE_2__.pageSizeInfo.fullPageSize[0];\n        let mouseMoveFunction = (e) => {\n            e.preventDefault();\n            let offsetX, offsetY;\n            if (e.type == \"touchmove\") {\n                let rect = e.target.getBoundingClientRect();\n                offsetX = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.mousePositionRatioAdjustment)(e.targetTouches[0].pageX - rect.left, ratio);\n                offsetY = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.mousePositionRatioAdjustment)(e.targetTouches[0].pageY - rect.top, ratio);\n            }\n            else if (e.type == \"mousemove\") {\n                [offsetX, offsetY] = [e.offsetX, e.offsetY];\n            }\n            polylineArray.push([offsetX, offsetY]);\n            polyline.soul.plot(polylineArray);\n        };\n        let mouseUpFunction = (e) => {\n            e.preventDefault();\n            // cleaan up\n            polylineArray.push([originalPositionX, originalPositionY]);\n            polyline.soul.plot(polylineArray);\n            // cleaan up\n            (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.clearUpEvent)(svgBoard, moveEventName, mouseMoveFunction);\n            (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.clearUpEvent)(svgBoard, upEventName, mouseUpFunction);\n            markObjectInsideSelectionArea(svgBoard, selectionStatusObject);\n        };\n        // define the mouse move event\n        svgBoard.addEventListener(moveEventName, mouseMoveFunction);\n        svgBoard.addEventListener(upEventName, mouseUpFunction);\n    } // if touch is pen\n} // mouseDownEventBeforeSelection\nfunction markObjectInsideSelectionArea(svgBoard, selectionStatusObject) {\n    let selectionObjectSet = new Set();\n    let polyline = selectionStatusObject.polyline;\n    let newPoint = svgBoard.createSVGPoint();\n    svgBoard.childNodes.forEach(object => {\n        // the object cannot  be the polyline\n        if (object != polyline && object.soul) {\n            let lineArray = object.soul.array().value;\n            Array.from(lineArray).forEach(p => {\n                newPoint.x = p[0];\n                newPoint.y = p[1];\n                if (polyline.isPointInFill(newPoint)) {\n                    selectionObjectSet.add(object.getAccessPointer());\n                }\n                return;\n            }); // Array.from(lineArray)\n            return;\n        } // if object!=polyline)\n    }); // svgBoard.childNodes.forEach\n    selectionStatusObject.selectedObjectArray = Array.from(selectionObjectSet);\n    selectionStatusObject.selectedObjectArray = selectionStatusObject.selectedObjectArray.map(p => svgBoard.querySelector(`polyline[accessPointer='${p}']`));\n    polyline.selectedObjectArray = selectionStatusObject.selectedObjectArray;\n    // selectionStatusObject.selectedObjectArray.push(polyline)\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/selectionToolPhaseOne.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/selectionToolPhaseTwo.ts":
/*!**************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/selectionToolPhaseTwo.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"selectionToolPhaseTwoMouseDownEvent\": () => (/* binding */ selectionToolPhaseTwoMouseDownEvent)\n/* harmony export */ });\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n/* harmony import */ var _pageControllerFolder_PopUpBoxFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pageControllerFolder/PopUpBoxFunction */ \"./src/smallTest/pageControllerFolder/PopUpBoxFunction.ts\");\n\n\nfunction selectionToolPhaseTwoMouseDownEvent(e, mainController, svgBoard, moveEventName, upEventName, selectionStatusObject) {\n    if (selectionStatusObject.mode != \"phaseTwo\") {\n        return;\n    }\n    let clickedPoint = svgBoard.createSVGPoint();\n    let touchIsPen;\n    [clickedPoint.x, clickedPoint.y, touchIsPen] = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getOffSetXY)(e);\n    // if (!touchIsPen) return\n    e.preventDefault();\n    let targetObjectOriginalDataArray = [];\n    selectionStatusObject.selectedObjectArray.forEach((p) => {\n        if (p) {\n            targetObjectOriginalDataArray.push(p.soul.array().value);\n        }\n    });\n    let selectionPolylineOriginalData = selectionStatusObject.polyline.soul.array().value;\n    // if the clicked point is outside the area, then just delete the selected circle and then go back to selection Mode\n    if (!selectionStatusObject.polyline.isPointInFill(clickedPoint)) {\n        selectionStatusObject.polyline.remove();\n        selectionStatusObject.polyline = null;\n        selectionStatusObject.mode = \"phaseOne\";\n        selectionStatusObject.selectedObjectArray = [];\n        return;\n    }\n    //\n    selectionStatusObject.triggerFlag = true;\n    setTimeout(function () {\n        if (selectionStatusObject.triggerFlag) {\n            // if hold, then create popup box\n            addHoldTouchAction(e, svgBoard, selectionStatusObject);\n        }\n        else {\n            console.log(\"I will not trigger.\");\n        }\n    }, 1000);\n    let blockEvent = false;\n    let mouseMoveFunction = (e) => {\n        e.preventDefault();\n        if (!selectionStatusObject.polyline)\n            return;\n        if (blockEvent)\n            return;\n        blockEvent = true;\n        setTimeout(() => { blockEvent = false; }, 100);\n        let [newX, newY, ..._] = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getOffSetXY)(e);\n        let [deltaX, deltaY] = [newX - clickedPoint.x, newY - clickedPoint.y];\n        (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.changeItemPosition)(selectionStatusObject.polyline, selectionPolylineOriginalData, deltaX, deltaY);\n        selectionStatusObject.selectedObjectArray.forEach((p, i) => {\n            if (p.soul) {\n                (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.changeItemPosition)(p, targetObjectOriginalDataArray[i], deltaX, deltaY);\n            }\n        });\n        let distance = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.calculateDistance)(newX, newY, clickedPoint.x, clickedPoint.y);\n        if (distance > 0.5)\n            selectionStatusObject.triggerFlag = false;\n    };\n    let mouseUpFunction = (e) => {\n        e.preventDefault();\n        selectionStatusObject.triggerFlag = false;\n        selectionStatusObject.selectedObjectArray.forEach((p) => p.saveHTMLObjectToDatabase());\n        svgBoard.removeEventListener(moveEventName, mouseMoveFunction);\n        svgBoard.removeEventListener(upEventName, mouseMoveFunction);\n    };\n    // define the mouse move event\n    svgBoard.addEventListener(moveEventName, mouseMoveFunction);\n    svgBoard.addEventListener(upEventName, mouseUpFunction);\n}\n// a popup box comes out\nfunction addHoldTouchAction(e, svgBoard, selectionStatusObject) {\n    let popUpBox = _pageControllerFolder_PopUpBoxFunction__WEBPACK_IMPORTED_MODULE_1__.createPopUpBox();\n    let [pageX, pageY, ..._] = (0,_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_0__.getPageXY)(e);\n    svgBoard.parentNode.appendChild(popUpBox);\n    popUpBox.style.left = (pageX + 10) + \"px\";\n    popUpBox.style.top = (pageY + 10) + \"px\";\n    _pageControllerFolder_PopUpBoxFunction__WEBPACK_IMPORTED_MODULE_1__.addItemToCreatePopUpBox(popUpBox, \"deleteAll\", function () {\n        selectionStatusObject.selectedObjectArray.forEach((p) => {\n            p.remove();\n        });\n        popUpBox.remove();\n    });\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/selectionToolPhaseTwo.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/textBoxHelperFunction.ts":
/*!**************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/textBoxHelperFunction.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"textBoxMouseDownFunction\": () => (/* binding */ textBoxMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GNTextBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GNTextBox */ \"./src/smallTest/GreatNoteClass/GNTextBox.ts\");\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n\n\nfunction textBoxMouseDownFunction(e, mainController, divLayer, moveEventName, upEventName) {\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"textBoxItemButton\"))\n        return;\n    if (e.target.classList.contains(\"svgLayer\"))\n        return;\n    // if (divLayer.classList.contains(\"fullPage\")) return\n    console.log(\"This is textbox function\");\n    let offsetX, offstY, touchIsPen;\n    [offsetX, offstY, touchIsPen] = _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.getOffSetXY(e);\n    let textBox = (0,_GreatNoteClass_GNTextBox__WEBPACK_IMPORTED_MODULE_0__.GNTextBox)({ name: \"GNTextBox\", arrayID: divLayer.getAccessPointer(), _classNameList: [\"GNTextBox\"], saveToDatabase: true });\n    textBox.style.left = offsetX + \"px\";\n    textBox.style.top = offstY + \"px\";\n    textBox.innerHTML = \"textBox textBox textBox\";\n    divLayer.append(textBox);\n    textBox.saveHTMLObjectToDatabase();\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/textBoxHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/textToolHelperFunction.ts":
/*!***************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/textToolHelperFunction.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"textToolMouseDownFunction\": () => (/* binding */ textToolMouseDownFunction)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GNTextContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GNTextContainer */ \"./src/smallTest/GreatNoteClass/GNTextContainer.ts\");\n/* harmony import */ var _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n\n\nfunction textToolMouseDownFunction(e, mainController, divLayer, moveEventName, upEventName) {\n    console.log(666, \"yesyesyes\");\n    if (!mainController.toolBox.checkToolBoxItemStatus(\"textToolItemButton\"))\n        return;\n    if (e.target.classList.contains(\"svgLayer\"))\n        return;\n    // if (divLayer.classList.contains(\"fullPage\")) return\n    let offsetX, offstY, touchIsPen;\n    [offsetX, offstY, touchIsPen] = _toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_1__.getOffSetXY(e);\n    let textContainer = (0,_GreatNoteClass_GNTextContainer__WEBPACK_IMPORTED_MODULE_0__.GNTextContainer)({ name: \"GNTextContainer\", arrayID: divLayer.getAccessPointer(), _classNameList: [\"GNTextContainer\"], saveToDatabase: true });\n    textContainer.style.left = offsetX + \"px\";\n    textContainer.style.top = offstY + \"px\";\n    let pageAccessPointer = divLayer.parentElement.getAttribute(\"accessPointer\");\n    let pageObject = mainController.pageController.getPageObjectFromAccessPointer(pageAccessPointer);\n    let annotationObject = {\n        accessPointer: textContainer.getAccessPointer(),\n        annotationType: textContainer.getAnnotationType()\n    };\n    pageObject.pageRelatedData.annotationArray.push(annotationObject);\n    divLayer.append(textContainer);\n    textContainer.saveHTMLObjectToDatabase();\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/textToolHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts":
/*!**************************************************************!*\
  !*** ./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearUpEvent\": () => (/* binding */ clearUpEvent),\n/* harmony export */   \"calculateDistance\": () => (/* binding */ calculateDistance),\n/* harmony export */   \"mousePositionRatioAdjustment\": () => (/* binding */ mousePositionRatioAdjustment),\n/* harmony export */   \"locationLog\": () => (/* binding */ locationLog),\n/* harmony export */   \"changeItemPosition\": () => (/* binding */ changeItemPosition),\n/* harmony export */   \"getOffSetXY\": () => (/* binding */ getOffSetXY),\n/* harmony export */   \"getPageXY\": () => (/* binding */ getPageXY),\n/* harmony export */   \"getScale\": () => (/* binding */ getScale),\n/* harmony export */   \"getTouchOffset\": () => (/* binding */ getTouchOffset)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\n\nfunction clearUpEvent(svgBoard, eventName, eventFunction) {\n    svgBoard.removeEventListener(eventName, eventFunction);\n}\nfunction calculateDistance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2));\n}\nfunction mousePositionRatioAdjustment(length, ratio) {\n    return length * 1 / ratio;\n}\nfunction locationLog(logText) {\n    let testInfo = document.querySelector(\".testInfo\");\n    testInfo.innerHTML = logText;\n}\nfunction changeItemPosition(p, originalPointArray, deltaX, deltaY) {\n    if (!p || !originalPointArray)\n        return;\n    let newPointArray = originalPointArray.map(([x, y], i) => [x + deltaX, y + deltaY]);\n    p.soul.plot(newPointArray);\n}\nfunction getOffSetXY(e) {\n    let [offsetX, offsetY, touchIsPen] = [0, 0, false];\n    let currentPage = document.querySelector(\".currentPage\");\n    let rect = currentPage.getBoundingClientRect();\n    let ratio = rect.width / _settings__WEBPACK_IMPORTED_MODULE_0__.pageSizeInfo.fullPageSize[0];\n    if (e.type == \"touchstart\" || e.type == \"touchmove\") {\n        offsetX = mousePositionRatioAdjustment(e.targetTouches[0].pageX - rect.left, ratio);\n        offsetY = mousePositionRatioAdjustment(e.targetTouches[0].pageY - rect.top, ratio);\n        touchIsPen = e.targetTouches[0].radiusX < 10 ? true : false;\n    }\n    if (e.type == \"mousedown\" || e.type == \"mousemove\") {\n        offsetX = mousePositionRatioAdjustment(e.offsetX, ratio);\n        offsetY = mousePositionRatioAdjustment(e.offsetY, ratio);\n    }\n    return [offsetX, offsetY, touchIsPen];\n}\nfunction getPageXY(e) {\n    let [offsetX, offsetY, touchIsPen] = [0, 0, false];\n    let currentPage = document.querySelector(\".currentPage\");\n    let rect = currentPage.getBoundingClientRect();\n    // let rect = e.target.getBoundingClientRect();\n    let ratio = rect.width / _settings__WEBPACK_IMPORTED_MODULE_0__.pageSizeInfo.fullPageSize[0];\n    if (e.type == \"touchstart\" || e.type == \"touchmove\") {\n        offsetX = mousePositionRatioAdjustment(e.targetTouches[0].pageX, ratio);\n        offsetY = mousePositionRatioAdjustment(e.targetTouches[0].pageY, ratio);\n        touchIsPen = e.targetTouches[0].radiusX > 10 ? false : true;\n    }\n    if (e.type == \"mousedown\" || e.type == \"mousemove\") {\n        offsetX = e.pageX;\n        offsetY = e.pageY;\n    }\n    return [offsetX, offsetY, touchIsPen];\n}\nfunction getScale(pageContentContainer) {\n    let matrix = window.getComputedStyle(pageContentContainer).transform;\n    let matrixArray = matrix.replace(\"matrix(\", \"\").split(\",\");\n    let scaleX = parseFloat(matrixArray[0]); // convert from string to number\n    return scaleX;\n}\nfunction getTouchOffset(e, touchPointIndex) {\n    let rect = e.target.getBoundingClientRect();\n    let ratio = rect.width / _settings__WEBPACK_IMPORTED_MODULE_0__.pageSizeInfo.fullPageSize[0];\n    let x = mousePositionRatioAdjustment(e.targetTouches[touchPointIndex].pageX - rect.left, ratio);\n    let y = mousePositionRatioAdjustment(e.targetTouches[touchPointIndex].pageY - rect.top, ratio);\n    return [x, y];\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/ToolboxModel.ts":
/*!***************************************!*\
  !*** ./src/smallTest/ToolboxModel.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ToolBoxClass\": () => (/* binding */ ToolBoxClass),\n/* harmony export */   \"getAttributeController\": () => (/* binding */ getAttributeController),\n/* harmony export */   \"changeSvgEventPointer\": () => (/* binding */ changeSvgEventPointer)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./src/index.ts\");\n\nlet iconName = {\n    bothLayerSelectionTool: \"/graphics/toolBox/bothLayerSelectionTool.png\",\n    rectangleSelectionTool: \"/graphics/toolBox/rectangleSelection.png\",\n    penSelectionTool: \"/graphics/toolBox/penSelection.png\",\n    eraserTool: \"/graphics/toolBox/eraserTool.png\",\n    commentTool: \"/graphics/toolBox/commentTool.png\",\n    movableTool: \"/graphics/toolBox/movableTool.png\",\n    penTool: \"/graphics/toolBox/penTool.png\",\n    textTool: \"/graphics/toolBox/textTool.png\",\n    textBox: \"/graphics/toolBox/textBox.png\"\n};\nclass ToolBoxClass {\n    constructor() {\n        this.itemArray = []; // to mark the status of the button\n        this.currentActiveEventFunction = (e) => { };\n        this.currentActiveEventName = \"\";\n        //  check the item status\n        this.toolBoxItemStatus = {\n            currentActiveButton: \"\",\n            polylineItemButton: {\n                status: false,\n                attributeController: \"polylineController\"\n            },\n            eraserItemButton: {\n                status: false,\n                attributeController: \"eraserToolController\"\n            },\n            selectionToolItemButton: {\n                status: false,\n                attributeController: \"penSelectionToolController\"\n            },\n            rectangleSelectionToolItemButton: {\n                status: false,\n                attributeController: \"rectangleSelectionToolController\"\n            },\n            addCommentItemButton: {\n                status: false,\n                attributeController: \"addCommentController\"\n            },\n            moveObjectInDivButton: {\n                status: false,\n                attributeController: \"moveObjectInDivController\"\n            },\n            addBookmarkButton: {\n                status: false,\n                attributeController: \"addBookmarkController\"\n            },\n            textToolItemButton: {\n                status: false,\n                attributeController: \"textToolController\"\n            },\n            textBoxItemButton: {\n                status: false,\n                attributeController: \"textBoxController\"\n            },\n            bothLayerSelectionToolItemButton: {\n                status: false,\n                attributeController: \"bothLayerSelectionToolController\"\n            }\n        };\n    }\n    checkToolBoxItemStatus(itemName) {\n        return this.toolBoxItemStatus[itemName][\"status\"];\n    }\n    switchToolBoxItemStatus(itemName) {\n        // turn off the attributeController and status of the buttom thaat is active\n        let currentActiveButton = this.toolBoxItemStatus.currentActiveButton;\n        if (currentActiveButton) {\n            // switch off the current status\n            this.toolBoxItemStatus[currentActiveButton][\"status\"] = !this.toolBoxItemStatus[currentActiveButton][\"status\"];\n            // console.log(949494, currentActiveButton)\n            // turn off attributeControllerWant\n            let attributeControllerWantToTurnedOff = getAttributeController(this.toolBoxItemStatus, currentActiveButton);\n            if (attributeControllerWantToTurnedOff)\n                attributeControllerWantToTurnedOff[\"style\"].display = \"none\";\n        }\n        this.toolBoxItemStatus.currentActiveButton = itemName;\n        this.toolBoxItemStatus[itemName][\"status\"] = !this.toolBoxItemStatus[itemName][\"status\"];\n        // turn on attributeControllerWantToturn on\n        let attributeControllerWantToTurnedOn = getAttributeController(this.toolBoxItemStatus, itemName);\n        console.log(attributeControllerWantToTurnedOn);\n        if (attributeControllerWantToTurnedOn)\n            attributeControllerWantToTurnedOn[\"style\"].display = \"block\";\n    }\n    createToolboxHtmlObject() {\n        let self = this;\n        let toolBoxContainer = document.createElement(\"div\");\n        toolBoxContainer.classList.add(\"toolBoxHtml\");\n        this.itemArray = [];\n        let toolBoxSelectionHtmlObject = document.createElement(\"div\");\n        toolBoxSelectionHtmlObject.classList.add(\"toolBoxSelectionHtmlObject\");\n        let toolBoxOptionHtmlObject = document.createElement(\"div\");\n        toolBoxOptionHtmlObject.classList.add(\"toolBoxOption\");\n        toolBoxContainer.selectionHTMLObject = toolBoxSelectionHtmlObject;\n        toolBoxContainer.optionHTMLObject = toolBoxOptionHtmlObject;\n        toolBoxContainer.appendChild(toolBoxSelectionHtmlObject);\n        return toolBoxContainer;\n    }\n    createToolBoxItem(name, toolBoxContainer, imagePath) {\n        let toolBoxItem = document.createElement(\"div\");\n        // the html style part\n        toolBoxItem.classList.add(\"toolBoxItem\", name);\n        if (imagePath) {\n            let icon = document.createElement(\"img\");\n            icon.classList.add(\"toolBoxIcon\");\n            icon.src = imagePath;\n            toolBoxItem.append(icon);\n        }\n        else {\n            toolBoxItem.innerText = name[0];\n        }\n        let squreLength = \"40px\";\n        toolBoxItem.style.width = squreLength;\n        toolBoxItem.style.height = squreLength;\n        // internaal variable part\n        toolBoxItem.status = false;\n        toolBoxItem.resetButton = function () {\n            toolBoxItem.status = false;\n        };\n        toolBoxItem._parent = toolBoxContainer.selectionHTMLObject;\n        this.itemArray.push(toolBoxItem);\n        toolBoxItem.addEventListener(toolBoxItem.eventName, toolBoxItem.eventFunction);\n        return toolBoxItem;\n    }\n    createNewPolyLineItemButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"PolyLine\", toolBoxHtmlObject, iconName.penTool);\n        toolBoxItem.addEventListener(\"click\", (e) => {\n            console.log(\"polyline item button is activated\");\n            this.activateButtonFunction(toolBoxItem, \"polylineItemButton\");\n        });\n        toolBoxItem.activate = function () {\n            changeSvgEventPointer(\"divLayer\", \"none\");\n        };\n        toolBoxItem.deactivate = function () {\n            changeSvgEventPointer(\"divLayer\", \"auto\");\n        };\n        return toolBoxItem;\n    }\n    createSelectionToolItemButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"SelectionTool\", toolBoxHtmlObject, iconName.penSelectionTool);\n        toolBoxItem.addEventListener(\"click\", (e) => {\n            console.log(\"Selection Tool item button is activated\");\n            this.activateButtonFunction(toolBoxItem, \"selectionToolItemButton\");\n        });\n        toolBoxItem.activate = function () {\n            changeSvgEventPointer(\"divLayer\", \"none\");\n        };\n        toolBoxItem.deactivate = function () {\n            changeSvgEventPointer(\"divLayer\", \"auto\");\n        };\n        return toolBoxItem;\n    }\n    createBothLayerSelectionToolItemButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"BothLayerSelectionTool\", toolBoxHtmlObject, iconName.bothLayerSelectionTool);\n        toolBoxItem.addEventListener(\"click\", (e) => {\n            console.log(\"Selection Tool item button is activated\");\n            this.activateButtonFunction(toolBoxItem, \"bothLayerSelectionToolItemButton\");\n        });\n        return toolBoxItem;\n    }\n    createMouseRectangleSelectionToolItemButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"MouseRectangleSelectionTool\", toolBoxHtmlObject, iconName[\"rectangleSelectionTool\"]);\n        toolBoxItem.addEventListener(\"click\", (e) => {\n            console.log(\"Mouse Rectangle Selection Tool item button is activated\");\n            this.activateButtonFunction(toolBoxItem, \"rectangleSelectionToolItemButton\");\n        });\n        toolBoxItem.activate = function () {\n            let pageOverlayArray = Array.from(document.querySelectorAll(\".pageOverlay\"));\n            pageOverlayArray.forEach(p => {\n                let parentElemnt = p.parentElement;\n                parentElemnt.append(p);\n                p.style.display = \"block\";\n            });\n            console.log(pageOverlayArray);\n        };\n        toolBoxItem.deactivate = function () {\n            let pageOverlayArray = Array.from(document.querySelectorAll(\".pageOverlay\"));\n            pageOverlayArray.forEach(p => {\n                p.style.display = \"none\";\n            });\n        };\n        return toolBoxItem;\n    }\n    createEraserItemButton(toolBoxHtmlObject) {\n        // let self = this\n        let toolBoxItem = this.createToolBoxItem(\"Eraser\", toolBoxHtmlObject, iconName.eraserTool);\n        toolBoxItem.addEventListener(\"click\", e => {\n            this.activateButtonFunction(toolBoxItem, \"eraserItemButton\");\n        });\n        toolBoxItem.activate = function () {\n            changeSvgEventPointer(\"divLayer\", \"none\");\n        };\n        toolBoxItem.deactivate = function () {\n            changeSvgEventPointer(\"divLayer\", \"auto\");\n        };\n        return toolBoxItem;\n    }\n    createAddCommentButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"AddComment\", toolBoxHtmlObject);\n        toolBoxItem.addEventListener(\"click\", e => {\n            this.activateButtonFunction(toolBoxItem, \"addCommentItemButton\");\n        });\n        return toolBoxItem;\n    }\n    createAddBookmarkButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"Bookmark\", toolBoxHtmlObject, iconName.commentTool);\n        toolBoxItem.addEventListener(\"click\", e => {\n            this.activateButtonFunction(toolBoxItem, \"addBookmarkButton\");\n        });\n        return toolBoxItem;\n    }\n    createMoveObjectInDivButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"MoveObjectInDiv\", toolBoxHtmlObject, iconName.movableTool);\n        toolBoxItem.addEventListener(\"click\", e => {\n            this.activateButtonFunction(toolBoxItem, \"moveObjectInDivButton\");\n        });\n        toolBoxItem.activate = function () {\n            changeSvgEventPointer(\"svgLayer\", \"none\");\n        };\n        toolBoxItem.deactivate = function () {\n            changeSvgEventPointer(\"svgLayer\", \"auto\");\n        };\n        return toolBoxItem;\n    }\n    createTextToolItemButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"textTool\", toolBoxHtmlObject, iconName.textTool);\n        toolBoxItem.addEventListener(\"click\", (e) => {\n            console.log(\"Text Tool item button is activated\");\n            this.activateButtonFunction(toolBoxItem, \"textToolItemButton\");\n        });\n        toolBoxItem.activate = function () {\n            changeSvgEventPointer(\"svgLayer\", \"none\");\n        };\n        toolBoxItem.deactivate = function () {\n            changeSvgEventPointer(\"svgLayer\", \"auto\");\n        };\n        return toolBoxItem;\n    }\n    createTextBoxItemButton(toolBoxHtmlObject) {\n        let toolBoxItem = this.createToolBoxItem(\"textBox\", toolBoxHtmlObject, iconName.textBox);\n        toolBoxItem.addEventListener(\"click\", (e) => {\n            console.log(\"Text Tool item button is activated\");\n            this.activateButtonFunction(toolBoxItem, \"textBoxItemButton\");\n        });\n        toolBoxItem.activate = function () {\n            changeSvgEventPointer(\"svgLayer\", \"none\");\n        };\n        toolBoxItem.deactivate = function () {\n            changeSvgEventPointer(\"svgLayer\", \"auto\");\n        };\n        return toolBoxItem;\n    }\n    activateButtonFunction(toolBoxItem, itemName) {\n        // to deactivate the previous button and activate the new button\n        if (this.currentActiveButton) {\n            this.currentActiveButton.style.background = \"gold\";\n            if (this.currentActiveButton.deactivate)\n                this.currentActiveButton.deactivate();\n        }\n        this.switchToolBoxItemStatus(itemName);\n        toolBoxItem.style.background = \"red\";\n        this.currentActiveButton = toolBoxItem;\n        if (this.currentActiveButton.activate)\n            this.currentActiveButton.activate();\n    }\n    registerSvg(svgLayer) {\n        let self = this;\n        svgLayer.addEventListener(\"click\", function () {\n            console.log(\"The svg is register to the toolbox\");\n            console.log(\"======================\");\n            self.targetPage = svgLayer;\n        });\n    }\n}\nfunction getAttributeController(toolBoxItemStatus, itemName) {\n    let attributeControllerClassName = toolBoxItemStatus[itemName][\"attributeController\"];\n    return document.querySelector(`.${attributeControllerClassName}`);\n}\nfunction changeSvgEventPointer(type, pointerEventOption) {\n    let currentLayerArray;\n    if (type == \"divLayer\") {\n        currentLayerArray = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.pageController.currentPage.fullPageHTMLObject.querySelectorAll(\".divLayer\");\n    }\n    if (type == \"svgLayer\") {\n        currentLayerArray = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.pageController.currentPage.fullPageHTMLObject.querySelectorAll(\".svgLayer\");\n    }\n    Array.from(currentLayerArray).forEach((layer) => {\n        layer.style.pointerEvents = pointerEventOption;\n    });\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/ToolboxModel.ts?");

/***/ }),

/***/ "./src/smallTest/UserFolder/UserController.ts":
/*!****************************************************!*\
  !*** ./src/smallTest/UserFolder/UserController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buildUserController\": () => (/* binding */ buildUserController),\n/* harmony export */   \"createUserRow\": () => (/* binding */ createUserRow),\n/* harmony export */   \"createUserControllerWrapper\": () => (/* binding */ createUserControllerWrapper)\n/* harmony export */ });\n/* harmony import */ var _socketFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../socketFunction */ \"./src/smallTest/socketFunction.ts\");\n\nfunction buildUserController(mainController) {\n    let userControllerNavbarTitle = document.createElement(\"div\");\n    userControllerNavbarTitle.classList.add(\"userControllerNavbarTitle\", \"subPanelTitle\");\n    userControllerNavbarTitle.innerText = \"User\";\n    let userViewer = document.createElement(\"div\");\n    userViewer.classList.add(\"userViewer\");\n    userViewer.style.width = \"80%\";\n    userViewer.style.height = \"200px\";\n    userViewer.style.margin = \"5px auto\";\n    userViewer.style.background = \"pink\";\n    let userControllerWrapper = createUserControllerWrapper(userViewer);\n    // controller bar\n    let userControllerBar = document.createElement(\"div\");\n    userControllerBar.classList.add(\"userControllerBar\");\n    let checkCurrentUserButton = document.createElement(\"button\");\n    checkCurrentUserButton.classList.add(\"checkCurrentUser\");\n    checkCurrentUserButton.innerText = \"check User\";\n    checkCurrentUserButton.addEventListener(\"click\", e => {\n        _socketFunction__WEBPACK_IMPORTED_MODULE_0__.socket.emit(\"clientAskUserData\", mainController.notebookID);\n    });\n    let addUserButton = document.createElement(\"button\");\n    addUserButton.classList.add(\"addUserButton\");\n    addUserButton.innerText = \"add User\";\n    addUserButton.addEventListener(\"click\", e => {\n        let userRow = createUserRow();\n        userViewer.append(userRow);\n    });\n    userControllerBar.append(addUserButton, checkCurrentUserButton);\n    userControllerWrapper.append(userViewer, userControllerBar);\n    return [userControllerNavbarTitle, userControllerWrapper];\n}\nfunction createUserRow(injectedData) {\n    let userRow = document.createElement(\"div\");\n    let userNameField = document.createElement(\"div\");\n    userNameField.contentEditable = \"true\";\n    userNameField.innerText = \"User\";\n    if (injectedData) {\n        userNameField.innerText = injectedData.userName;\n    }\n    else {\n        let userData = {\n            userName: userNameField.innerText,\n            // userID: string,\n            // pageAccessPointer: string\n        };\n    }\n    userRow.append(userNameField);\n    return userRow;\n}\nfunction createUserControllerWrapper(userViewer) {\n    let userControllerWrapper = document.createElement(\"div\");\n    userControllerWrapper.classList.add(\"userControllerWrapper\");\n    return userControllerWrapper;\n} // createcollectionControllerWrapper\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/UserFolder/UserController.ts?");

/***/ }),

/***/ "./src/smallTest/attributeControllerFolder/attributeControllerHelperFunction.ts":
/*!**************************************************************************************!*\
  !*** ./src/smallTest/attributeControllerFolder/attributeControllerHelperFunction.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initializeContainerAndControllerEvent\": () => (/* binding */ initializeContainerAndControllerEvent),\n/* harmony export */   \"superController\": () => (/* binding */ superController),\n/* harmony export */   \"universalControllerCreater\": () => (/* binding */ universalControllerCreater)\n/* harmony export */ });\n/* harmony import */ var _basicControllerType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basicControllerType */ \"./src/smallTest/attributeControllerFolder/basicControllerType.ts\");\n\n// when the input htmlObject is click, then it will loop all the attribute controllers in the controller array. Check if the controller's type is consistent with the input htmlobject's tagname. If they are consistent, then the controllers will be shown, otherwise, they will be hide.\n// clear the controllers target and then set their newtarget to be the new htmlObject\nfunction initializeContainerAndControllerEvent(htmlObject, controllerArray) {\n    htmlObject.addEventListener(\"click\", (e) => {\n        controllerArray.forEach(p => p.responseToHtmlType(htmlObject));\n        // e.stopPropagation()\n        controllerArray.forEach(p => {\n            p.clear();\n            p.setControllerTarget(htmlObject);\n        });\n    }, false);\n} // initializeContainerAndControllerEvent\nfunction superController(controllerContainer) {\n    // to add some function and common properties to an controller object\n    // controllerContainer.style.display = \"none\"\n    //** if the controller's targetHTMLType is not equal to the input htmlObject's tagname, then will hide the controller, but if they are the same, then the\n    controllerContainer.responseToHtmlType = function (htmlObject) {\n        console.log(htmlObject.tagName, controllerContainer.targetHTMLType);\n        if (htmlObject.tagName != controllerContainer.targetHTMLType) {\n            console.log(\"none\");\n            controllerContainer.style.display = \"none\";\n        }\n        else {\n            console.log(\"visible\");\n            controllerContainer.style.display = \"block\";\n        }\n    };\n    //** ??? don't understand\n    controllerContainer.attachTo = function (htmlObject) {\n        initializeContainerAndControllerEvent(htmlObject, controllerContainer.controllerArray);\n    };\n} // superController\n//** to create the type of controller according to the controller type\n// e.g. for\nfunction universalControllerCreater(name, controllerOptions) {\n    let controllerContainer = document.createElement(\"div\");\n    controllerContainer.classList.add(name);\n    controllerContainer.style.width = \"90%\";\n    controllerContainer.style.minHeight = \"200px\";\n    controllerContainer.style.border = \"2px black solid\";\n    controllerContainer.style.margin = \"20px auto\";\n    let attributeName = controllerOptions[\"attributeName\"];\n    let unitOptions = controllerOptions[\"unitOptions\"];\n    let selectionList = controllerOptions[\"selectionList\"];\n    if (unitOptions)\n        return (0,_basicControllerType__WEBPACK_IMPORTED_MODULE_0__.inputFieldAndDropdownListController)(attributeName, unitOptions);\n    if (selectionList)\n        return (0,_basicControllerType__WEBPACK_IMPORTED_MODULE_0__.dropdownListController)(attributeName, selectionList);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/attributeControllerFolder/attributeControllerHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/attributeControllerFolder/basicControllerType.ts":
/*!************************************************************************!*\
  !*** ./src/smallTest/attributeControllerFolder/basicControllerType.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"inputFieldAndDropdownListController\": () => (/* binding */ inputFieldAndDropdownListController),\n/* harmony export */   \"dropdownListController\": () => (/* binding */ dropdownListController),\n/* harmony export */   \"choiceController\": () => (/* binding */ choiceController)\n/* harmony export */ });\n// @auto-fold heres\nfunction inputFieldAndDropdownListController(attributeName, unitOptions) {\n    let controllerContainer = document.createElement(\"div\");\n    controllerContainer.style.display = \"grid\";\n    controllerContainer.style.gridTemplateColumns = \"1fr 3fr 1fr\";\n    controllerContainer.classList.add(attributeName + \"Controller\");\n    let title = document.createElement(\"span\");\n    title.innerText = attributeName;\n    title.style.textAlign = \"center\";\n    let inputField = document.createElement(\"input\");\n    let dropdownList = document.createElement(\"select\");\n    unitOptions.forEach((unit) => {\n        let option = document.createElement(\"option\");\n        option.value = unit;\n        option.innerText = unit;\n        dropdownList.appendChild(option);\n    });\n    dropdownList.addEventListener(\"change\", (e) => controllerContainer.updateObject());\n    inputField.addEventListener(\"input\", (e) => controllerContainer.updateObject());\n    // to update the value according to the controller values\n    // @auto-fold her\n    controllerContainer.updateObject = function () {\n        if (controllerContainer.controllerTarget) {\n            controllerContainer.controllerTarget.style[attributeName] = inputField.value + dropdownList.value;\n        }\n    };\n    // to extract the input field and unit\n    controllerContainer.extract = function () {\n        return inputField.value + dropdownList.value;\n    };\n    // functions\n    controllerContainer.setControllerTarget = function (object) {\n        controllerContainer.controllerTarget = object;\n    };\n    /** to clear the controller's data when it is dismissed. */\n    controllerContainer.clear = function () {\n        controllerContainer.setControllerTarget(null);\n    };\n    controllerContainer.append(title, inputField, dropdownList);\n    return controllerContainer;\n} // inputFieldAndDropdownListController\n// @auto-fold here\nfunction dropdownListController(attributeName, selectionList) {\n    let controllerContainer = document.createElement(\"div\");\n    let title = attributeName;\n    let dropdownList = document.createElement(\"select\");\n    selectionList.forEach(unit => {\n        let option = document.createElement(\"option\");\n        option.value = unit;\n        option.innerText = unit;\n        dropdownList.appendChild(option);\n    });\n    dropdownList.addEventListener(\"change\", (e) => controllerContainer.updateObject());\n    controllerContainer.updateObject = function () {\n        if (controllerContainer.controllerTarget) {\n            controllerContainer.controllerTarget.style[attributeName] = dropdownList.value;\n        }\n    };\n    // functions\n    controllerContainer.setControllerTarget = function (object) {\n        controllerContainer.controllerTarget = object;\n    };\n    /** to clear the controller's data when it is dismissed. */\n    controllerContainer.clear = function () {\n        controllerContainer.setControllerTarget(null);\n    };\n    controllerContainer.append(title, dropdownList);\n    return controllerContainer;\n} // dropdownListController\n// @auto-fold here\nfunction choiceController(attribute, choiceList, prototype) {\n    let controllerContainer = document.createElement(\"div\");\n    controllerContainer.classList.add(\"choiceController\");\n    controllerContainer.classList.add(attribute + \"Controller\");\n    choiceList.forEach((choiceValue) => {\n        let item = prototype.cloneNode(true);\n        if (attribute == \"fill\") {\n            item[\"style\"][\"background\"] = choiceValue;\n            item[\"style\"][\"opacity\"] = \"0.90\";\n        }\n        else {\n            // background, stroke can be the attribute in css\n            item[\"style\"][attribute] = choiceValue;\n        }\n        controllerContainer.appendChild(item);\n        item.addEventListener(\"click\", (e) => {\n            let selectedColor = controllerContainer.querySelector(\"div .selectedColor\");\n            if (selectedColor)\n                selectedColor.classList.remove(\"selectedColor\");\n            item.classList.add(\"selectedColor\");\n            // controllerContainer.updateObject(choiceValue)\n        });\n    });\n    //\n    controllerContainer.extract = function () {\n        return controllerContainer.querySelector(\".selectedColor\")[\"style\"][\"background\"];\n    };\n    /** to update the value according to the controller values */\n    controllerContainer.updateObject = function (itemValue) {\n        if (controllerContainer.controllerTarget) {\n            controllerContainer.controllerTarget.style[attribute] = itemValue;\n        }\n    };\n    // functions\n    controllerContainer.setControllerTarget = function (object) {\n        controllerContainer.controllerTarget = object;\n    };\n    /** to clear the controller's data when it is dismissed. */\n    controllerContainer.clear = function () {\n        controllerContainer.setControllerTarget(null);\n    };\n    return controllerContainer;\n} // choiceController\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/attributeControllerFolder/basicControllerType.ts?");

/***/ }),

/***/ "./src/smallTest/attributeControllerFolder/eraserToolController.ts":
/*!*************************************************************************!*\
  !*** ./src/smallTest/attributeControllerFolder/eraserToolController.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createEraserToolController\": () => (/* binding */ createEraserToolController)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\n\nfunction createEraserToolController() {\n    let eraserToolControllerContainer = document.createElement(\"div\");\n    eraserToolControllerContainer.classList.add(\"eraserToolController\");\n    eraserToolControllerContainer.copyDataArray = [];\n    let inputField = document.createElement(\"input\");\n    inputField.classList.add(\"eraserRadiusInput\");\n    inputField.type = \"number\";\n    inputField.value = `${_settings__WEBPACK_IMPORTED_MODULE_0__.defaultEraserRadius}`;\n    let upButton = document.createElement(\"button\");\n    upButton.innerText = \"+\";\n    upButton.addEventListener(\"click\", e => {\n        inputField.value = `${+inputField.value + 1}`;\n    });\n    let downButton = document.createElement(\"button\");\n    downButton.innerText = \"-\";\n    downButton.addEventListener(\"click\", e => {\n        inputField.value = `${+inputField.value - 1}`;\n    });\n    eraserToolControllerContainer.append(inputField, upButton, downButton);\n    return eraserToolControllerContainer;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/attributeControllerFolder/eraserToolController.ts?");

/***/ }),

/***/ "./src/smallTest/attributeControllerFolder/highLevelController.ts":
/*!************************************************************************!*\
  !*** ./src/smallTest/attributeControllerFolder/highLevelController.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createPolylineController\": () => (/* binding */ createPolylineController),\n/* harmony export */   \"createDivControllerContainer\": () => (/* binding */ createDivControllerContainer),\n/* harmony export */   \"createSvgCircleControllerContainer\": () => (/* binding */ createSvgCircleControllerContainer),\n/* harmony export */   \"createSelectionToolController\": () => (/* binding */ createSelectionToolController)\n/* harmony export */ });\n/* harmony import */ var _basicControllerType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basicControllerType */ \"./src/smallTest/attributeControllerFolder/basicControllerType.ts\");\n/* harmony import */ var _attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./attributeControllerHelperFunction */ \"./src/smallTest/attributeControllerFolder/attributeControllerHelperFunction.ts\");\n/* harmony import */ var _ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ToolboxFolder/toolBoxHelperFunction */ \"./src/smallTest/ToolboxFolder/toolBoxHelperFunction.ts\");\n\n\n\nfunction createPolylineController() {\n    let polylineControllerContainer = document.createElement(\"div\");\n    polylineControllerContainer.classList.add(\"polylineController\");\n    polylineControllerContainer.targetHTMLType = \"polyline\";\n    // color controller\n    let colorTemplate = document.createElement(\"div\");\n    colorTemplate.style.display = \"inline-block\";\n    colorTemplate.style[\"width\"] = \"30px\";\n    colorTemplate.style[\"height\"] = \"30px\";\n    colorTemplate.style[\"margin\"] = \"5px\";\n    let polylineStrokeColorController = (0,_basicControllerType__WEBPACK_IMPORTED_MODULE_0__.choiceController)(\"background\", [\"red\", \"blue\", \"green\", \"black\", \"yellow\", \"grey\", \"gold\", \"silver\", \"pink\"], colorTemplate);\n    polylineStrokeColorController.classList.add(\"polylineColorController\");\n    let polylineStrokeWidthController = (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.universalControllerCreater)(\"widthController\", {\n        attributeName: \"width\",\n        unitOptions: [\"px\", \"vw\", \"%\"],\n        controllerType: _basicControllerType__WEBPACK_IMPORTED_MODULE_0__.inputFieldAndDropdownListController\n    });\n    polylineStrokeWidthController.classList.add(\"polylineStrokeWidthController\");\n    polylineStrokeWidthController.querySelector(\"input\").value = \"2\";\n    polylineControllerContainer.controllerArray = [polylineStrokeColorController, polylineStrokeWidthController];\n    polylineControllerContainer.append(...polylineControllerContainer.controllerArray);\n    polylineControllerContainer.extract = function () {\n        let strokeColor = polylineStrokeColorController.extract();\n        let strokeWidth = polylineStrokeWidthController.extract();\n        return [strokeColor, strokeWidth];\n    };\n    (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.superController)(polylineControllerContainer);\n    return polylineControllerContainer;\n}\nfunction createDivControllerContainer() {\n    let divControllerContainer = document.createElement(\"div\");\n    divControllerContainer.classList.add(\"divController\");\n    divControllerContainer.targetHTMLType = \"DIV\";\n    // color controller\n    let colorSquare = document.createElement(\"div\");\n    colorSquare.style.display = \"inline-block\";\n    colorSquare.style[\"width\"] = \"50px\";\n    colorSquare.style[\"height\"] = \"50px\";\n    colorSquare.style[\"margin\"] = \"10px\";\n    let backgroundColorController = (0,_basicControllerType__WEBPACK_IMPORTED_MODULE_0__.choiceController)(\"background\", [\"red\", \"blue\", \"green\", \"black\", \"yellow\", \"grey\", \"gold\", \"silver\", \"pink\"], colorSquare);\n    // width Controller\n    let widthController = (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.universalControllerCreater)(\"widthController\", {\n        attributeName: \"width\",\n        unitOptions: [\"px\", \"vw\", \"%\"],\n        controllerType: _basicControllerType__WEBPACK_IMPORTED_MODULE_0__.inputFieldAndDropdownListController\n    });\n    let heightController = (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.universalControllerCreater)(\"widthController\", {\n        attributeName: \"height\",\n        unitOptions: [\"px\", \"vw\", \"%\"],\n        controllerType: _basicControllerType__WEBPACK_IMPORTED_MODULE_0__.inputFieldAndDropdownListController\n    });\n    let positionController = (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.universalControllerCreater)(\"positionController\", {\n        attributeName: \"position\",\n        selectionList: [\"none\", \"relative\", \"absolute\"],\n        controllerType: _basicControllerType__WEBPACK_IMPORTED_MODULE_0__.dropdownListController\n    });\n    divControllerContainer.controllerArray = [widthController, heightController, positionController, backgroundColorController];\n    divControllerContainer.append(...divControllerContainer.controllerArray);\n    (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.superController)(divControllerContainer);\n    return divControllerContainer;\n}\nfunction createSvgCircleControllerContainer() {\n    let svgCircleContainer = document.createElement(\"div\");\n    svgCircleContainer.classList.add(\"svgCircleContainer\");\n    svgCircleContainer.targetHTMLType = \"circle\";\n    let radiusController = (0,_basicControllerType__WEBPACK_IMPORTED_MODULE_0__.inputFieldAndDropdownListController)(\"r\", [\"px\", \"vw\", \"%\"]);\n    let circleCenterXController = (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.universalControllerCreater)(\"cxController\", {\n        attributeName: \"cx\",\n        unitOptions: [\"px\", \"vw\", \"%\"],\n        controllerType: _basicControllerType__WEBPACK_IMPORTED_MODULE_0__.inputFieldAndDropdownListController\n    });\n    let circleCenterYController = (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.universalControllerCreater)(\"cyController\", {\n        attributeName: \"cy\",\n        unitOptions: [\"px\", \"vw\", \"%\"],\n        controllerType: _basicControllerType__WEBPACK_IMPORTED_MODULE_0__.inputFieldAndDropdownListController\n    });\n    let colorSquare = document.createElement(\"div\");\n    colorSquare.style.display = \"inline-block\";\n    colorSquare.style[\"width\"] = \"50px\";\n    colorSquare.style[\"height\"] = \"50px\";\n    colorSquare.style[\"margin\"] = \"10px\";\n    let fillController = (0,_basicControllerType__WEBPACK_IMPORTED_MODULE_0__.choiceController)(\"fill\", [\"red\", \"blue\", \"green\", \"black\", \"yellow\", \"grey\", \"gold\", \"silver\", \"pink\"], colorSquare);\n    svgCircleContainer.controllerArray = [radiusController, circleCenterXController, circleCenterYController, fillController];\n    svgCircleContainer.append(...svgCircleContainer.controllerArray);\n    (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_1__.superController)(svgCircleContainer);\n    return svgCircleContainer;\n} // createSvgCircleControllerContainer\nfunction createSelectionToolController(mainController) {\n    let selectionToolControllerContainer = document.createElement(\"div\");\n    selectionToolControllerContainer.classList.add(\"penSelectionToolController\");\n    selectionToolControllerContainer.copyDataArray = [];\n    let copyButton = document.createElement(\"button\");\n    copyButton.innerText = \"copy\";\n    copyButton.addEventListener(\"click\", function () {\n        let selectionPolyline = document.querySelector(\".selectionPolyline\");\n        selectionToolControllerContainer.copyDataArray = selectionPolyline === null || selectionPolyline === void 0 ? void 0 : selectionPolyline.selectedObjectArray.map((p) => p.extract());\n        selectionToolControllerContainer.selectionRectInfo = createSelectionRectInformation(selectionPolyline);\n        selectionPolyline.remove();\n    });\n    let cutButton = document.createElement(\"button\");\n    cutButton.innerText = \"cut\";\n    cutButton.addEventListener(\"click\", function () {\n        selectionToolControllerContainer.copyDataArray = [];\n        let selectionPolyline = document.querySelector(\".selectionPolyline\");\n        selectionToolControllerContainer.copyDataArray = selectionPolyline === null || selectionPolyline === void 0 ? void 0 : selectionPolyline.selectedObjectArray.map((p) => {\n            let polylineData = p.extract();\n            p.deleteFromDatabase();\n            return polylineData;\n        });\n        selectionToolControllerContainer.selectionRectInfo = createSelectionRectInformation(selectionPolyline);\n        selectionPolyline.remove();\n    });\n    let pasteButton = document.createElement(\"button\");\n    pasteButton.innerText = \"paste\";\n    pasteButton.addEventListener(\"click\", function () {\n        duplicateSvgData(mainController, selectionToolControllerContainer);\n        selectionToolControllerContainer.copyDataArray = [];\n    });\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"delete\";\n    deleteButton.addEventListener(\"click\", function () {\n        let selectionPolyline = document.querySelector(\".selectionPolyline\");\n        selectionPolyline.selectedObjectArray.forEach((p) => p.remove());\n        selectionPolyline.remove();\n    });\n    selectionToolControllerContainer.append(copyButton, cutButton, pasteButton, deleteButton);\n    return selectionToolControllerContainer;\n}\nfunction duplicateSvgData(mainController, selectionToolControllerContainer, removeOriginalData = false) {\n    var _a;\n    let currentPageSvgLayer = document.querySelector(\".currentPage svg\");\n    let copiedItemArray = [];\n    (_a = selectionToolControllerContainer.copyDataArray) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n        let newHTMLObject;\n        if (p.GNType == \"GNSvgPolyLine\") {\n            newHTMLObject = mainController.createGNObjectThroughName(\"GNSvgPolyLine\", { name: \"\", arrayID: currentPageSvgLayer.getAccessPointer(), saveToDatabase: true, injectedData: p });\n            copiedItemArray.push(newHTMLObject);\n            currentPageSvgLayer.append(newHTMLObject);\n        }\n    });\n    let selectionPolyline = document.querySelector(\".selectionPolyline\");\n    let selectionRectInfo = selectionToolControllerContainer.selectionRectInfo;\n    // currentPageSvgLayer.svgController.rect()\n    createMovableSelectionRect(currentPageSvgLayer, selectionRectInfo, copiedItemArray);\n    selectionPolyline === null || selectionPolyline === void 0 ? void 0 : selectionPolyline.remove();\n    selectionToolControllerContainer.copyDataArray = [];\n}\nfunction createSelectionRectInformation(selectionPolyline) {\n    let polylinePoints = selectionPolyline.soul.array().value;\n    let firstPoint = polylinePoints[0];\n    let rectInfo = { x0: firstPoint[0], y0: firstPoint[1], x1: firstPoint[1], y1: firstPoint[1] };\n    polylinePoints.forEach((p) => {\n        let x = p[0];\n        let y = p[1];\n        if (x < rectInfo.x0)\n            rectInfo.x0 = x;\n        if (y < rectInfo.y0)\n            rectInfo.y0 = y;\n        if (x > rectInfo.x1)\n            rectInfo.x1 = x;\n        if (y > rectInfo.y1)\n            rectInfo.y1 = y;\n    });\n    rectInfo[\"x0\"] -= 50;\n    rectInfo[\"y0\"] -= 50;\n    rectInfo[\"x1\"] += 50;\n    rectInfo[\"y1\"] += 50;\n    let width = rectInfo[\"x1\"] - rectInfo[\"x0\"];\n    let height = rectInfo[\"y1\"] - rectInfo[\"y0\"];\n    return rectInfo;\n}\nfunction createMovableSelectionRect(currentPageSvgLayer, selectionRectInfo, copiedItemArray) {\n    let width = selectionRectInfo[\"x1\"] - selectionRectInfo[\"x0\"];\n    let height = selectionRectInfo[\"y1\"] - selectionRectInfo[\"y0\"];\n    let selectionRect = currentPageSvgLayer.svgController.rect(width, height);\n    selectionRect.x(selectionRectInfo[\"x0\"]);\n    selectionRect.y(selectionRectInfo[\"y0\"]);\n    selectionRect.attr({ \"stroke\": \"blue\", \"stroke-width\": \"2px\" });\n    selectionRect.node.classList.add(\"selectionRectForCopyAndPaste\");\n    selectionRect.node.style.fillOpacity = 0;\n    selectionRect.node.style.strokeDasharray = \"5px\";\n    selectionRect.node.addEventListener(\"touchstart\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        // to get the initial points of the polyline\n        let polylineIntialArray = copiedItemArray.map((p) => ({\n            polylineObject: p,\n            initialPoints: p.soul.array().value\n        }));\n        let [initialX, initialY, touchIsPen] = _ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_2__.getOffSetXY(e);\n        let [currentX, currentY] = [0, 0];\n        let [deltaX, deltaY] = [0, 0];\n        let initialRectX = selectionRect.node.x.baseVal.value;\n        let initialRectY = selectionRect.node.y.baseVal.value;\n        let block = false;\n        let touchmoveFunction = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            if (block)\n                return;\n            block = true;\n            setTimeout(() => { block = false; }, 100);\n            [currentX, currentY, touchIsPen] = _ToolboxFolder_toolBoxHelperFunction__WEBPACK_IMPORTED_MODULE_2__.getOffSetXY(e);\n            [deltaX, deltaY] = [currentX - initialX, currentY - initialY];\n            polylineIntialArray.map((p) => {\n                p.polylineObject.soul.plot(p.initialPoints.map((q) => [q[0] + deltaX, q[1] + deltaY]));\n                p.polylineObject.saveHTMLObjectToDatabase();\n            });\n            selectionRect.x(initialRectX + deltaX);\n            selectionRect.y(initialRectY + deltaY);\n        };\n        let touchendFunction = (e) => {\n            e.stopPropagation();\n            selectionRect.node.removeEventListener(\"touchmove\", touchmoveFunction);\n            selectionRect.node.removeEventListener(\"touchend\", touchendFunction);\n        };\n        selectionRect.node.addEventListener(\"touchmove\", touchmoveFunction);\n        selectionRect.node.addEventListener(\"touchend\", touchendFunction);\n    });\n}\nfunction createSelectObjectAttributeController() {\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.classList.add(\"selectObjectDeleteButton\");\n    deleteButton.addEventListener(\"click\", e => {\n        // document.querySelector(\"selectedObject\")\n    });\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/attributeControllerFolder/highLevelController.ts?");

/***/ }),

/***/ "./src/smallTest/attributeControllerFolder/initializeAttributeControllers.ts":
/*!***********************************************************************************!*\
  !*** ./src/smallTest/attributeControllerFolder/initializeAttributeControllers.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initializeMainControllerAttributeControllerMapping\": () => (/* binding */ initializeMainControllerAttributeControllerMapping)\n/* harmony export */ });\n/* harmony import */ var _highLevelController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./highLevelController */ \"./src/smallTest/attributeControllerFolder/highLevelController.ts\");\n/* harmony import */ var _objectInDivAttributeController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./objectInDivAttributeController */ \"./src/smallTest/attributeControllerFolder/objectInDivAttributeController.ts\");\n/* harmony import */ var _rectSelectionToolController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rectSelectionToolController */ \"./src/smallTest/attributeControllerFolder/rectSelectionToolController.ts\");\n/* harmony import */ var _eraserToolController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eraserToolController */ \"./src/smallTest/attributeControllerFolder/eraserToolController.ts\");\n\n\n\n\n//** to initialize the main controller attribute controller mapping so that other objects can access tthe attribute controllers through the mainController\n// defined in ToolBoxClass' s toolBoxItemStatus in ToolboxModel.ts\nfunction initializeMainControllerAttributeControllerMapping(mainController) {\n    console.log(777777, mainController);\n    let polylineController = _highLevelController__WEBPACK_IMPORTED_MODULE_0__.createPolylineController();\n    polylineController.style.display = \"none\";\n    let selectionToolController = _highLevelController__WEBPACK_IMPORTED_MODULE_0__.createSelectionToolController(mainController);\n    selectionToolController.style.display = \"none\";\n    let eraserToolController = _eraserToolController__WEBPACK_IMPORTED_MODULE_3__.createEraserToolController();\n    eraserToolController.style.display = \"none\";\n    let objectInDivAttributeController = _objectInDivAttributeController__WEBPACK_IMPORTED_MODULE_1__.createMoveObjectInDivController();\n    objectInDivAttributeController.style.display = \"none\";\n    let rectSelectionToolController = _rectSelectionToolController__WEBPACK_IMPORTED_MODULE_2__.createRectangleSelectionToolController(mainController);\n    rectSelectionToolController.style.display = \"none\";\n    mainController.attributeControllerMapping = {\n        polylineController: polylineController,\n        eraserToolController: eraserToolController,\n        selectionToolController: selectionToolController,\n        moveObjectInDivController: objectInDivAttributeController,\n        rectSelectionToolController: rectSelectionToolController\n    };\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/attributeControllerFolder/initializeAttributeControllers.ts?");

/***/ }),

/***/ "./src/smallTest/attributeControllerFolder/objectInDivAttributeController.ts":
/*!***********************************************************************************!*\
  !*** ./src/smallTest/attributeControllerFolder/objectInDivAttributeController.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createMoveObjectInDivController\": () => (/* binding */ createMoveObjectInDivController),\n/* harmony export */   \"createInputDiv\": () => (/* binding */ createInputDiv),\n/* harmony export */   \"createImageContainerAttributeController\": () => (/* binding */ createImageContainerAttributeController)\n/* harmony export */ });\n/* harmony import */ var _attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attributeControllerHelperFunction */ \"./src/smallTest/attributeControllerFolder/attributeControllerHelperFunction.ts\");\n\nfunction createMoveObjectInDivController() {\n    let controllerContainer = document.createElement(\"div\");\n    controllerContainer.classList.add(\"moveObjectInDivController\");\n    let imageContainerAttributeController = createImageContainerAttributeController();\n    controllerContainer.append(imageContainerAttributeController);\n    (0,_attributeControllerHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superController)(controllerContainer);\n    return controllerContainer;\n}\nfunction createInputDiv(inputLabelName) {\n    let inputDiv = document.createElement(\"div\");\n    let inputLabel = document.createElement(\"label\");\n    inputLabel.innerText = inputLabelName + \" (px): \";\n    let inputField = document.createElement(\"input\");\n    inputDiv.append(inputLabel, inputField);\n    return [inputDiv, inputField];\n}\nfunction createImageContainerAttributeController() {\n    let imageContainerAttributeController = document.createElement(\"div\");\n    imageContainerAttributeController.classList.add(\"imageContainerAttributeController\");\n    let [widthInputDiv, widthInput] = createInputDiv(\"width\");\n    let [heightInputDiv, heightInput] = createInputDiv(\"height\");\n    let [xPositionInputDiv, xPositionInput] = createInputDiv(\"xPosition\");\n    let [yPositionInputDiv, yPositionInput] = createInputDiv(\"yPosition\");\n    let smallImage = document.createElement(\"img\");\n    smallImage.classList.add(\"smallImage\");\n    // smallImage.src = imageContainerAttributeController.targetImageContainer.src\n    // smallImage.style.width = \"250px\"\n    widthInput.addEventListener(\"keyup\", e => {\n        if (e.keyCode == 13) {\n            console.log('Enter');\n            let width = parseFloat(widthInput.value);\n            let [newWidth, newHeight] = imageContainerAttributeController.targetImageContainer.setImageSize({ width: width });\n            console.log(newWidth, newHeight);\n            widthInput.value = newWidth.toFixed(2);\n            heightInput.value = newHeight.toFixed(2);\n            imageContainerAttributeController.targetImageContainer.saveHTMLObjectToDatabase();\n        }\n    });\n    heightInput.addEventListener(\"keyup\", e => {\n        if (e.keyCode == 13) {\n            console.log('Enter');\n            let height = parseFloat(heightInput.value);\n            let [newWidth, newHeight] = imageContainerAttributeController.targetImageContainer.setImageSize({ height: height });\n            widthInput.value = newWidth.toFixed(2);\n            heightInput.value = newHeight.toFixed(2);\n            imageContainerAttributeController.targetImageContainer.saveHTMLObjectToDatabase();\n        }\n    });\n    let updateButton = document.createElement(\"button\");\n    updateButton.innerText = \"update\";\n    updateButton.classList.add(\"imageAttributeControllerUpdateButton\");\n    updateButton.addEventListener(\"click\", e => {\n        console.log(imageContainerAttributeController.targetImageContainer);\n        console.log(widthInput.value, heightInput.value, xPositionInput.value, yPositionInput.value);\n    });\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"delete Image\";\n    deleteButton.classList.add(\"imageAttributeControllerDeleteButton\");\n    deleteButton.addEventListener(\"click\", e => {\n        var _a;\n        (_a = imageContainerAttributeController.targetImageContainer) === null || _a === void 0 ? void 0 : _a.deleteFromDatabase();\n    });\n    let defaultSizeDropList = document.createElement(\"select\");\n    defaultSizeDropList.classList.add(\"defaultSizeDropList\");\n    let defaultSizeOpt500 = document.createElement(\"option\");\n    defaultSizeOpt500.value = \"500\";\n    defaultSizeOpt500.innerText = \"500\";\n    let defaultSizeOpt600 = document.createElement(\"option\");\n    defaultSizeOpt600.value = \"600\";\n    defaultSizeOpt600.innerText = \"600\";\n    let defaultSizeOpt700 = document.createElement(\"option\");\n    defaultSizeOpt700.value = \"700\";\n    defaultSizeOpt700.innerText = \"700\";\n    defaultSizeDropList.append(defaultSizeOpt500, defaultSizeOpt600, defaultSizeOpt700);\n    imageContainerAttributeController.append(widthInputDiv, heightInputDiv, defaultSizeDropList, smallImage, updateButton, deleteButton);\n    // imageContainerAttributeController.append(widthInputDiv, heightInputDiv, xPositionInputDiv, yPositionInputDiv, smallImage, updateButton, deleteButton)\n    imageContainerAttributeController.renderImage = function () {\n        let imgContainer = imageContainerAttributeController.targetImageContainer;\n        widthInput.value = imgContainer.style.width.replace(\"px\", \"\");\n        heightInput.value = imgContainer.style.width.replace(\"px\", \"\");\n        smallImage.src = imgContainer.querySelector(\"img\").src;\n        // xPositionInput.value = imgContainer.style.left.replace(\"px\", \"\")\n        // yPositionInput.value = imgContainer.style.top.replace(\"px\", \"\")\n    };\n    return imageContainerAttributeController;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/attributeControllerFolder/objectInDivAttributeController.ts?");

/***/ }),

/***/ "./src/smallTest/attributeControllerFolder/rectSelectionToolController.ts":
/*!********************************************************************************!*\
  !*** ./src/smallTest/attributeControllerFolder/rectSelectionToolController.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createCheckBoxContainer\": () => (/* binding */ createCheckBoxContainer),\n/* harmony export */   \"createRectangleSelectionToolController\": () => (/* binding */ createRectangleSelectionToolController)\n/* harmony export */ });\n/* harmony import */ var _ToolboxFolder_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ToolboxFolder/rectangleSelectionHelperFunction */ \"./src/smallTest/ToolboxFolder/rectangleSelectionHelperFunction.ts\");\n\nfunction createCheckBoxContainer() {\n    let checkBoxContainer = document.createElement(\"div\");\n    let divCheckBoxLabel = document.createElement(\"label\");\n    divCheckBoxLabel.htmlFor = \"divCheckBox\";\n    divCheckBoxLabel.innerText = \"div\";\n    let divCheckBox = document.createElement(\"input\");\n    divCheckBox.type = \"checkbox\";\n    divCheckBox.id = \"divCheckBox\";\n    divCheckBox.checked = true;\n    let svgCheckBoxLabel = document.createElement(\"label\");\n    svgCheckBoxLabel.htmlFor = \"svgCheckBox\";\n    svgCheckBoxLabel.innerText = \"svg\";\n    let svgCheckBox = document.createElement(\"input\");\n    svgCheckBox.type = \"checkbox\";\n    svgCheckBox.id = \"svgCheckBox\";\n    svgCheckBox.checked = true;\n    return [checkBoxContainer, divCheckBoxLabel, divCheckBox, svgCheckBoxLabel, svgCheckBox];\n}\nfunction createRectangleSelectionToolController(mainController) {\n    let rectangleSelectionToolControllerContainer = document.createElement(\"div\");\n    rectangleSelectionToolControllerContainer.classList.add(\"rectangleSelectionToolController\");\n    let phaseInput = document.createElement(\"input\");\n    phaseInput.classList.add(\"phaseInput\");\n    let [checkBoxContainer, divCheckBoxLabel, divCheckBox, svgCheckBoxLabel, svgCheckBox] = createCheckBoxContainer();\n    let copyButton = document.createElement(\"button\");\n    copyButton.innerText = \"copy\";\n    copyButton.addEventListener(\"click\", function () {\n        let divLayerCopiedDataArray = rectangleSelectionToolControllerContainer.selectedItem.divLayerItemArray.map((p) => p.extract());\n        let svgLayerCopiedDataArray = rectangleSelectionToolControllerContainer.selectedItem.svgLayerItemArray.map((p) => p.extract());\n        rectangleSelectionToolControllerContainer.copiedData = {\n            divLayerCopiedDataArray, svgLayerCopiedDataArray\n        };\n        rectangleSelectionToolControllerContainer.selectionRect.forEach((p) => p.remove());\n    });\n    let cutButton = document.createElement(\"button\");\n    cutButton.innerText = \"cut\";\n    cutButton.addEventListener(\"click\", function () {\n        // selectionToolControllerContainer.copyDataArray = []\n        // let selectionPolyline = <any> document.querySelector(\".selectionPolyline\")\n        // selectionToolControllerContainer.copyDataArray = selectionPolyline?.selectedObjectArray.map((p:any)=> {\n        //     let polylineData = p.extract()\n        //     p.deleteFromDatabase()\n        //     return polylineData\n        // })\n        //\n        // selectionToolControllerContainer.selectionRectInfo = createSelectionRectInformation(selectionPolyline)\n        // selectionPolyline.remove()\n    });\n    let pasteButton = document.createElement(\"button\");\n    pasteButton.innerText = \"paste\";\n    pasteButton.addEventListener(\"click\", function () {\n        let { divLayerCopiedDataArray, svgLayerCopiedDataArray } = rectangleSelectionToolControllerContainer.copiedData;\n        let currentPageHTMLObject = mainController.pageController.currentPage.fullPageHTMLObject;\n        let { top, left, width, height } = rectangleSelectionToolControllerContainer.selectionRectInfo;\n        let strokeColor = \"blue\";\n        let strokeWidth = \"2px\";\n        let overlay = currentPageHTMLObject.querySelector(\".pageOverlay\");\n        let divLayer = currentPageHTMLObject.querySelector(\".divLayer\");\n        let svgLayer = currentPageHTMLObject.querySelector(\".svgLayer\");\n        let divLayerAccessPointer = divLayer === null || divLayer === void 0 ? void 0 : divLayer.getAccessPointer();\n        let svgLayerAccessPointer = svgLayer === null || svgLayer === void 0 ? void 0 : svgLayer.getAccessPointer();\n        let newSelectionRect = document.createElement(\"div\");\n        newSelectionRect.classList.add(\"selectionRect\");\n        newSelectionRect.style.position = \"absolute\";\n        newSelectionRect.style.border = `2px solid blue`;\n        newSelectionRect.style.left = left + \"px\";\n        newSelectionRect.style.top = top + \"px\";\n        newSelectionRect.style.width = width + \"px\";\n        newSelectionRect.style.height = height + \"px\";\n        newSelectionRect.style.pointerEvents = \"none\";\n        newSelectionRect.style.background = \"rgba(0, 0, 0, 0.5)\";\n        newSelectionRect.divLayerItemArray = [];\n        newSelectionRect.svgLayerItemArray = [];\n        (0,_ToolboxFolder_rectangleSelectionHelperFunction__WEBPACK_IMPORTED_MODULE_0__.addEventToSelectionRect)(newSelectionRect, rectangleSelectionToolControllerContainer);\n        overlay.append(newSelectionRect);\n        if (divCheckBox.checked && divLayer) {\n            divLayerCopiedDataArray.forEach(p => {\n                let item = mainController.createGNObjectThroughName(p.GNType, {\n                    name: \"test\", arrayID: divLayerAccessPointer, saveToDatabase: true\n                });\n                p._identity = item._identity;\n                item.loadFromData(p);\n                item.saveHTMLObjectToDatabase();\n                divLayer === null || divLayer === void 0 ? void 0 : divLayer.append(item);\n                newSelectionRect.divLayerItemArray.push(item);\n            });\n        }\n        if (svgCheckBox.checked && svgLayer) {\n            svgLayerCopiedDataArray.forEach(p => {\n                let item = mainController.createGNObjectThroughName(p.GNType, {\n                    name: \"test\", arrayID: svgLayerAccessPointer, saveToDatabase: true\n                });\n                p._identity = item._identity;\n                item.loadFromData(p);\n                item.saveHTMLObjectToDatabase();\n                svgLayer === null || svgLayer === void 0 ? void 0 : svgLayer.append(item);\n                newSelectionRect.svgLayerItemArray.push(item);\n            });\n        }\n    });\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"delete\";\n    deleteButton.addEventListener(\"click\", function () {\n        // let selectionPolyline = <any> document.querySelector(\".selectionPolyline\")\n        // selectionPolyline.selectedObjectArray.forEach((p:any)=> p.remove())\n        // selectionPolyline.remove()\n    });\n    let clearButton = document.createElement(\"button\");\n    clearButton.innerText = \"clearButton\";\n    clearButton.addEventListener(\"click\", function () {\n        rectangleSelectionToolControllerContainer.selectionRect.forEach((p) => p.remove());\n    });\n    checkBoxContainer.append(divCheckBoxLabel, divCheckBox, svgCheckBoxLabel, svgCheckBox);\n    rectangleSelectionToolControllerContainer.append(copyButton, cutButton, pasteButton, deleteButton, clearButton, phaseInput, checkBoxContainer);\n    return rectangleSelectionToolControllerContainer;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/attributeControllerFolder/rectSelectionToolController.ts?");

/***/ }),

/***/ "./src/smallTest/bookmarkFolder/GNBookmark.ts":
/*!****************************************************!*\
  !*** ./src/smallTest/bookmarkFolder/GNBookmark.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createBookmarkHTMLObject\": () => (/* binding */ createBookmarkHTMLObject),\n/* harmony export */   \"GNBookmark\": () => (/* binding */ GNBookmark)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\nfunction createBookmarkHTMLObject(_object) {\n    // interior parts\n    let bookmarkHeader = document.createElement(\"div\");\n    bookmarkHeader.classList.add(\"bookmarkHeader\");\n    let bookmarkTitle = document.createElement(\"div\");\n    bookmarkTitle.classList.add(\"bookmarkTitle\");\n    bookmarkTitle.contentEditable = \"true\";\n    bookmarkTitle.draggable = false;\n    let bookmarkType = document.createElement(\"select\");\n    let commentTypeOption = document.createElement(\"option\");\n    commentTypeOption.value = \"comment\";\n    commentTypeOption.innerText = \"comment\";\n    let quesitonTypeOption = document.createElement(\"option\");\n    quesitonTypeOption.value = \"question\";\n    quesitonTypeOption.innerText = \"question\";\n    bookmarkType.append(commentTypeOption, quesitonTypeOption);\n    let tagsWrapper = document.createElement(\"div\");\n    tagsWrapper.classList.add(\"tagsWrapper\");\n    let tagsInput = document.createElement(\"input\");\n    tagsInput.classList.add(\"tagsInput\");\n    tagsWrapper.append(tagsInput);\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"delete\";\n    deleteButton.addEventListener(\"click\", function () {\n        _object.deleteFromDatabase();\n    });\n    bookmarkHeader.append(bookmarkType, deleteButton);\n    return [bookmarkHeader, bookmarkTitle, bookmarkType, tagsWrapper, tagsInput, deleteButton];\n}\nfunction GNBookmark(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, _classNameList } = createData;\n    let _object = document.createElement(\"div\");\n    _object.classList.add(\"GNBookmarkDiv\");\n    _object.GNType = \"GNBookmark\";\n    _object.GNSpecialCreationMessage = specialCreationMessage || \"\";\n    _object._dataStructure = [\"\"];\n    _object._styleStructure = [\"background\", \"width\", \"height\", \"position\", \"left\", \"top\"];\n    _object.draggable = false;\n    _object.style.position = \"absolute\";\n    let [bookmarkHeader, bookmarkTitle, bookmarkType, tagsWrapper, tagsInput, deleteButton] = createBookmarkHTMLObject(_object);\n    _object.append(bookmarkHeader, bookmarkTitle, tagsWrapper);\n    // add classname\n    _object._classNameList = _classNameList || [];\n    _classNameList === null || _classNameList === void 0 ? void 0 : _classNameList.forEach(p => {\n        _object.classList.add(p);\n    });\n    _object.applyStyle = function (styleData) {\n        Object.entries(styleData).forEach(([key, value], _) => {\n            _object.style[key] = value;\n        });\n    };\n    _object.loadFromData = (injectedData) => {\n        // className\n        if (injectedData._classNameList && injectedData._classNameList.length > 0) {\n            injectedData._classNameList.forEach((p) => _object.classList.add(p));\n        }\n        // data conent\n        bookmarkTitle.innerHTML = injectedData.data.bookmarkTitle;\n        bookmarkType.value = injectedData.data.bookmarkType;\n        // style\n        _object.applyStyle(injectedData.stylesheet);\n        // identity\n        _object._identity = injectedData._identity;\n        _object.setAttribute(\"accessPointer\", injectedData._identity.accessPointer);\n    };\n    _object.setMovable = function () {\n        (0,_GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.setObjectMovable)(_object);\n    };\n    _object.extract = () => _object.createDataObject();\n    _object.createDataObject = function () {\n        var _a;\n        let dataObject;\n        if (_object.objectData) {\n            dataObject = _object.objectData;\n        }\n        else {\n            dataObject = (0,_GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        }\n        dataObject[\"GNType\"] = _object.GNType;\n        dataObject[\"GNSpecialCreationMessage\"] = _object.GNSpecialCreationMessage;\n        dataObject[\"specialGNType\"] = _object.specialGNType || \"\";\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        dataObject[\"_classNameList\"] = Array.from(_object.classList);\n        let computedStyle = window.getComputedStyle(_object);\n        (_a = _object === null || _object === void 0 ? void 0 : _object._styleStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = computedStyle[p];\n        });\n        dataObject[\"data\"][\"bookmarkTitle\"] = bookmarkTitle.innerHTML;\n        dataObject[\"data\"][\"bookmarkType\"] = bookmarkType.value;\n        console.log(130130, dataObject);\n        // dataObject[\"data\"][\"tags\"] =  bookmarkTitle.innerText\n        return dataObject;\n    };\n    (0,_GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    if (injectedData) {\n        _object.loadFromData(injectedData);\n        _object.objectData = injectedData;\n    }\n    return _object;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/bookmarkFolder/GNBookmark.ts?");

/***/ }),

/***/ "./src/smallTest/bookmarkFolder/GNBookmarkLinkedObject.ts":
/*!****************************************************************!*\
  !*** ./src/smallTest/bookmarkFolder/GNBookmarkLinkedObject.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createBookmarkLinkedObjectHTMLObject\": () => (/* binding */ createBookmarkLinkedObjectHTMLObject),\n/* harmony export */   \"GNBookmarkLinkedObject\": () => (/* binding */ GNBookmarkLinkedObject)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n\nfunction createBookmarkLinkedObjectHTMLObject(_object) {\n    let bookmarkTitle = document.createElement(\"div\");\n    bookmarkTitle.classList.add(\"bookmarkTitle\");\n    bookmarkTitle.contentEditable = \"true\";\n    bookmarkTitle.draggable = false;\n    let bookmarkType = document.createElement(\"select\");\n    let commentTypeOption = document.createElement(\"option\");\n    commentTypeOption.value = \"comment\";\n    commentTypeOption.innerText = \"comment\";\n    let quesitonTypeOption = document.createElement(\"option\");\n    quesitonTypeOption.value = \"question\";\n    quesitonTypeOption.innerText = \"question\";\n    bookmarkType.append(commentTypeOption, quesitonTypeOption);\n    let tagsWrapper = document.createElement(\"div\");\n    tagsWrapper.classList.add(\"tagsWrapper\");\n    let tagsInput = document.createElement(\"input\");\n    tagsInput.classList.add(\"tagsInput\");\n    tagsWrapper.append(tagsInput);\n    let goToBookmarkPageButton = document.createElement(\"button\");\n    goToBookmarkPageButton.innerText = \"goToPage\";\n    goToBookmarkPageButton.addEventListener(\"click\", e => {\n        // console.log(\"goToBookmarkPageButton\")\n        let masterObject = document.querySelector(`div[accessPointer='${_object.getDataPointer()}']`);\n        masterObject === null || masterObject === void 0 ? void 0 : masterObject.getLocatedPageNumber();\n    });\n    return [bookmarkTitle, bookmarkType, tagsWrapper, tagsInput, goToBookmarkPageButton];\n}\nfunction GNBookmarkLinkedObject(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData, _classNameList } = createData;\n    let _object = document.createElement(\"div\");\n    _object.classList.add(\"GNBookmarkLinkedObject\");\n    _object.GNType = \"GNBookmarkLinkedObject\";\n    _object.GNSpecialCreationMessage = specialCreationMessage || \"\";\n    _object._dataStructure = [\"\"];\n    _object._styleStructure = [\"background\"];\n    let [bookmarkTitle, bookmarkType, tagsWrapper, tagsInput, goToBookmarkPageButton] = createBookmarkLinkedObjectHTMLObject(_object);\n    _object.append(bookmarkTitle, bookmarkType, tagsWrapper, goToBookmarkPageButton);\n    // add classname\n    _object._classNameList = _classNameList || [];\n    _classNameList === null || _classNameList === void 0 ? void 0 : _classNameList.forEach(p => {\n        _object.classList.add(p);\n    });\n    _object.applyStyle = function (styleData) {\n        Object.entries(styleData).forEach(([key, value], _) => {\n            _object.style[key] = value;\n        });\n    };\n    _object.extract = () => _object.createDataObject();\n    _object.createDataObject = function () {\n        var _a;\n        let dataObject;\n        if (_object.objectData) {\n            dataObject = _object.objectData;\n        }\n        else {\n            dataObject = (0,_GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.createDummyData)();\n        }\n        dataObject[\"GNType\"] = _object.GNType;\n        dataObject[\"GNSpecialCreationMessage\"] = _object.GNSpecialCreationMessage;\n        dataObject[\"specialGNType\"] = _object.specialGNType || \"\";\n        if (_object._identity)\n            dataObject[\"_identity\"] = _object._identity;\n        dataObject[\"_classNameList\"] = Array.from(_object.classList);\n        let computedStyle = window.getComputedStyle(_object);\n        (_a = _object === null || _object === void 0 ? void 0 : _object._styleStructure) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            dataObject[\"stylesheet\"][p] = computedStyle[p];\n        });\n        return dataObject;\n    };\n    _object.loadFromData = (injectedData) => {\n        // first update the content, if the data is from the master, then just use the master's data only, not its css and other meta daat\n        let linkedObjectData = _object.extract();\n        // console.log(7575757,\"before\", injectedData, linkedObjectData)\n        if (injectedData._identity.accessPointer == injectedData._identity.dataPointer) {\n            linkedObjectData.data = injectedData.data;\n        }\n        // if data is from itself\n        if (injectedData._identity.accessPointer != injectedData._identity.dataPointer) {\n            // fill in array, object, data, style, _classNameList, identity\n            _object._identity = injectedData._identity;\n            _object.setAttribute(\"accessPointer\", injectedData._identity.accessPointer);\n            let dataPointerHTMLObject = document.querySelector(`*[accessPointer='${injectedData._identity.dataPointer}']`);\n            // console.log(injectedData._identity.dataPointer, dataPointerHTMLObject)\n            let masterDataPointerObject = dataPointerHTMLObject.extract();\n            linkedObjectData.data = masterDataPointerObject.data;\n        }\n        console.log(\"after\", injectedData);\n        bookmarkTitle.innerHTML = linkedObjectData.data.bookmarkTitle;\n        bookmarkType.value = linkedObjectData.data.bookmarkType;\n        //\n        //\n        if (injectedData._classNameList)\n            linkedObjectData._classNameList.forEach((p) => _object.classList.add(p));\n        _object.objectData = linkedObjectData;\n        // _object.applyStyle(injectedData.stylesheet)\n    };\n    (0,_GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_0__.superGNObject)(_object, saveToDatabase, arrayID, insertPosition, dataPointer, specialCreationMessage, injectedData);\n    if (injectedData) {\n        _object.loadFromData(injectedData);\n    }\n    return _object;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/bookmarkFolder/GNBookmarkLinkedObject.ts?");

/***/ }),

/***/ "./src/smallTest/buildInitialPageHelperFunctions.ts":
/*!**********************************************************!*\
  !*** ./src/smallTest/buildInitialPageHelperFunctions.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createGNDataStructureMapping\": () => (/* binding */ createGNDataStructureMapping),\n/* harmony export */   \"getImportantDivFromHTML\": () => (/* binding */ getImportantDivFromHTML),\n/* harmony export */   \"buildPageControllerButtonArray\": () => (/* binding */ buildPageControllerButtonArray),\n/* harmony export */   \"buildToolBoxHtmlObject\": () => (/* binding */ buildToolBoxHtmlObject),\n/* harmony export */   \"buildPageController\": () => (/* binding */ buildPageController),\n/* harmony export */   \"buildInitialHTMLSkeleton\": () => (/* binding */ buildInitialHTMLSkeleton),\n/* harmony export */   \"buildInitialPage\": () => (/* binding */ buildInitialPage),\n/* harmony export */   \"getPageDataFromServer\": () => (/* binding */ getPageDataFromServer),\n/* harmony export */   \"attachEvents\": () => (/* binding */ attachEvents)\n/* harmony export */ });\n/* harmony import */ var _clipboardEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clipboardEvents */ \"./src/smallTest/clipboardEvents.ts\");\n/* harmony import */ var _GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GreatNoteClass/GreatNoteDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteDataClass.ts\");\n/* harmony import */ var _GreatNoteClass_GNImageContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GreatNoteClass/GNImageContainer */ \"./src/smallTest/GreatNoteClass/GNImageContainer.ts\");\n/* harmony import */ var _GreatNoteClass_GNInputField__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GreatNoteClass/GNInputField */ \"./src/smallTest/GreatNoteClass/GNInputField.ts\");\n/* harmony import */ var _GreatNoteClass_GNTextContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GreatNoteClass/GNTextContainer */ \"./src/smallTest/GreatNoteClass/GNTextContainer.ts\");\n/* harmony import */ var _GreatNoteClass_GNTextBox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GreatNoteClass/GNTextBox */ \"./src/smallTest/GreatNoteClass/GNTextBox.ts\");\n/* harmony import */ var _bookmarkFolder_GNBookmark__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bookmarkFolder/GNBookmark */ \"./src/smallTest/bookmarkFolder/GNBookmark.ts\");\n/* harmony import */ var _GreatNoteClass_GNPage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./GreatNoteClass/GNPage */ \"./src/smallTest/GreatNoteClass/GNPage.ts\");\n/* harmony import */ var _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GreatNoteClass/GreatNoteSvgDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts\");\n/* harmony import */ var _groupControllerFolder_groupController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./groupControllerFolder/groupController */ \"./src/smallTest/groupControllerFolder/groupController.ts\");\n/* harmony import */ var _pageControllerFolder_annotationHelperFunctions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pageControllerFolder/annotationHelperFunctions */ \"./src/smallTest/pageControllerFolder/annotationHelperFunctions.ts\");\n/* harmony import */ var _socketFunction__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./socketFunction */ \"./src/smallTest/socketFunction.ts\");\n/* harmony import */ var _commentFolder_commentController__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commentFolder/commentController */ \"./src/smallTest/commentFolder/commentController.ts\");\n/* harmony import */ var _sectionControllerFolder_sectionController__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sectionControllerFolder/sectionController */ \"./src/smallTest/sectionControllerFolder/sectionController.ts\");\n/* harmony import */ var _layerControllerFolder_layerController__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./layerControllerFolder/layerController */ \"./src/smallTest/layerControllerFolder/layerController.ts\");\n/* harmony import */ var _pageControllerFolder_pageController__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./pageControllerFolder/pageController */ \"./src/smallTest/pageControllerFolder/pageController.ts\");\n/* harmony import */ var _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./pageViewHelperFunction */ \"./src/smallTest/pageViewHelperFunction.ts\");\n/* harmony import */ var _attributeControllerFolder_initializeAttributeControllers__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./attributeControllerFolder/initializeAttributeControllers */ \"./src/smallTest/attributeControllerFolder/initializeAttributeControllers.ts\");\n/* harmony import */ var _collectionControllerFolder_collectionController__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./collectionControllerFolder/collectionController */ \"./src/smallTest/collectionControllerFolder/collectionController.ts\");\n/* harmony import */ var _EventFolder_swipeEvent__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./EventFolder/swipeEvent */ \"./src/smallTest/EventFolder/swipeEvent.ts\");\n/* harmony import */ var _pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./pageControllerFolder/smallViewHelperFunction */ \"./src/smallTest/pageControllerFolder/smallViewHelperFunction.ts\");\n/* harmony import */ var _UserFolder_UserController__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./UserFolder/UserController */ \"./src/smallTest/UserFolder/UserController.ts\");\n\n// GMPnkects\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import * as WindowController from \"./EventFolder/specialWindowObject\"\nlet openStatus = true;\nfunction createGNDataStructureMapping(mainController) {\n    mainController.GNDataStructureMapping = {\n        GNInputField: _GreatNoteClass_GNInputField__WEBPACK_IMPORTED_MODULE_3__.GNInputField,\n        GNContainerDiv: _GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_1__.GNContainerDiv,\n        GNImageContainer: _GreatNoteClass_GNImageContainer__WEBPACK_IMPORTED_MODULE_2__.GNImageContainer,\n        GNBookmark: _bookmarkFolder_GNBookmark__WEBPACK_IMPORTED_MODULE_6__.GNBookmark,\n        GNPage: _GreatNoteClass_GNPage__WEBPACK_IMPORTED_MODULE_7__.GNPage,\n        GNTextContainer: _GreatNoteClass_GNTextContainer__WEBPACK_IMPORTED_MODULE_4__.GNTextContainer,\n        GNTextBox: _GreatNoteClass_GNTextBox__WEBPACK_IMPORTED_MODULE_5__.GNTextBox,\n        // svg\n        GNSvg: _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_8__.GNSvg,\n        GNSvgCircle: _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_8__.GNSvgCircle,\n        GNSvgPolyLine: _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_8__.GNSvgPolyLine,\n        GNSvgRect: _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_8__.GNSvgRect,\n        GNComment: _commentFolder_commentController__WEBPACK_IMPORTED_MODULE_12__.GNComment\n    };\n}\nfunction getImportantDivFromHTML(mainController) {\n    let pageArrayID = mainController.mainDocArray[\"mainArray_page\"];\n    // global htmlObjects\n    let panelContainer = document.querySelector(\".panelContainer\");\n    let pageContentContainer = document.querySelector(\".pageContentContainer\");\n    panelContainer.style.zIndex = \"100\";\n    let fullPageModeDiv = document.querySelector(\".fullPageModeDiv\");\n    fullPageModeDiv.setAttribute(\"accessPointer\", mainController.mainDocArray[\"mainArray_pageFull\"]);\n    let overviewModeDiv = document.querySelector(\".overviewModeDiv\");\n    overviewModeDiv.setAttribute(\"accessPointer\", mainController.mainDocArray[\"mainArray_pageOverview\"]);\n    let overviewModeDivWrapper = document.querySelector(\".overviewModeDivWrapper\");\n    overviewModeDivWrapper.setAttribute(\"status\", \"off\");\n    console.log(overviewModeDivWrapper);\n    let [bookmarkSubPanelNavbarTitle, bookmarkSubPanelContent] = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.createSubPanel(\"bookmark\");\n    return { pageArrayID, panelContainer, pageContentContainer, fullPageModeDiv, overviewModeDiv, bookmarkSubPanelNavbarTitle, bookmarkSubPanelContent };\n}\nfunction buildPageControllerButtonArray(mainController) {\n    // create subPanel\n    let [pageControllerSubPanelNavbarTitle, pageControllerSubPanelContent] = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.createSubPanel(\"pageController\");\n    let testValuePanel = document.createElement(\"div\");\n    testValuePanel.classList.add(\"testValuePanel\");\n    pageControllerSubPanelContent.appendChild(testValuePanel);\n    let editorControllerTemplate = document.querySelector(\"#editControllerTemplate\");\n    var editorController = editorControllerTemplate.content.cloneNode(true);\n    // attribute controller\n    let attributePanel = editorController.querySelector(\".attributePanel\");\n    _attributeControllerFolder_initializeAttributeControllers__WEBPACK_IMPORTED_MODULE_17__.initializeMainControllerAttributeControllerMapping(mainController);\n    Object.values(mainController.attributeControllerMapping).forEach(p => {\n        attributePanel.appendChild(p);\n    });\n    let testFieldButton = document.createElement(\"button\");\n    testFieldButton.innerText = \"testFieldButton\";\n    testFieldButton.addEventListener(\"click\", function () {\n        let testFieldDiv = document.querySelector(\".testField\");\n        if (testFieldDiv.classList.contains(\"open\")) {\n            testFieldDiv.classList.remove(\"open\");\n        }\n        else {\n            testFieldDiv.classList.add(\"open\");\n        }\n    });\n    let showMainDocButton = document.createElement(\"button\");\n    showMainDocButton.innerText = \"mainDoc\";\n    showMainDocButton.addEventListener(\"click\", function () {\n        console.log(153, mainController.mainDoc[\"array\"][0][\"array\"], mainController);\n    });\n    let showAnnotationButton = document.createElement(\"button\");\n    showAnnotationButton.classList.add(\"showAnnotationButton\");\n    showAnnotationButton.innerText = \"showAnnotation\";\n    showAnnotationButton.addEventListener(\"click\", function () {\n        let annotationPage = document.querySelector(\".annotationPage\");\n        console.log(annotationPage.style.display);\n        if (annotationPage.style.display == \"block\") {\n            annotationPage.style.display = \"none\";\n            return;\n        }\n        // if the display is none or other\n        annotationPage.style.display = \"block\";\n        let annotationPageContentWrapper = annotationPage.querySelector(\".annotationPageContentWrapper\");\n        let currentPage = mainController.pageController.startPage.next;\n        let allPageAnnotationArray = [];\n        while (currentPage) {\n            if (!currentPage.getCategorizedAnnotationArray)\n                break;\n            let currentPageAnnotationData = (0,_pageControllerFolder_annotationHelperFunctions__WEBPACK_IMPORTED_MODULE_10__.getAllPageAnnotation)(currentPage);\n            if (currentPageAnnotationData) {\n                allPageAnnotationArray.push(currentPageAnnotationData);\n            }\n            currentPage = currentPage.next;\n        }\n        // console.log(177177, allPageAnnotationArray, annotationPageContentWrapper)\n        //\n        // if (annotationPageContentWrapper.innerHTML==\"\"){\n        //     renderAnnotationPage(allPageAnnotationArray, annotationPageContentWrapper)\n        // }\n    });\n    // ============ scale Controller ===========//\n    function scaleChange(scale) {\n        let currentPage = mainController.pageController.startPage.next;\n        while (currentPage) {\n            if (!currentPage.fullPageHTMLObject)\n                break;\n            currentPage.fullPageHTMLObject.style.transform = `scale(${scale})`;\n            currentPage = currentPage.next;\n        }\n    }\n    let scaleController = document.createElement(\"div\");\n    let scaleInput = document.createElement(\"input\");\n    scaleInput.value = \"1\";\n    scaleInput.style.width = \"50px\";\n    let scaleIncreaseButton = document.createElement(\"button\");\n    scaleIncreaseButton.innerText = \"+\";\n    scaleIncreaseButton.classList.add(\"scaleIncreaseButton\");\n    scaleIncreaseButton.addEventListener(\"click\", function (e) {\n        let newScale = +scaleInput.value + 0.1;\n        scaleInput.value = newScale.toFixed(2);\n        scaleChange(newScale);\n    });\n    let scaleDecreaseButton = document.createElement(\"button\");\n    scaleDecreaseButton.innerText = \"-\";\n    scaleDecreaseButton.classList.add(\"scaleDecreaseButton\");\n    scaleDecreaseButton.addEventListener(\"click\", function (e) {\n        let newScale = +scaleInput.value - 0.1;\n        scaleInput.value = newScale.toFixed(2);\n        scaleChange(newScale);\n    });\n    scaleController.append(scaleIncreaseButton, scaleInput, scaleDecreaseButton);\n    // ===================  ==================//\n    let objectIDGetter = document.createElement(\"input\");\n    let objectIDGetterSubmit = document.createElement(\"input\");\n    objectIDGetterSubmit.type = \"submit\";\n    objectIDGetter.style.border = \"3px solid gold\";\n    objectIDGetterSubmit.style.background = \"gold\";\n    objectIDGetterSubmit.addEventListener(\"click\", (e) => {\n        // console.log(mainController.getObjectById(objectIDGetter.value), document.querySelector(`*[accessPointer='${objectIDGetter.value}']`));\n        window.selectedItem = document.querySelector(`*[accessPointer='${objectIDGetter.value}']`);\n    });\n    let minimizedBarButton = document.createElement(\"button\");\n    minimizedBarButton.innerText = \"minimize\";\n    minimizedBarButton.addEventListener(\"click\", e => {\n        let pageWrapper = document.querySelector(\".pageWrapper\");\n        pageWrapper.classList.toggle(\"minimizedBar\");\n    });\n    let sectionControllerHTMLObject = _sectionControllerFolder_sectionController__WEBPACK_IMPORTED_MODULE_13__.createSectionController(mainController);\n    editorController.append(sectionControllerHTMLObject);\n    // toolBoxObject\n    let toolBoxHtmlObject = buildToolBoxHtmlObject(mainController);\n    pageControllerSubPanelContent.append(toolBoxHtmlObject, minimizedBarButton, editorController, scaleController);\n    let annotationPage = document.querySelector(\".annotationPage\");\n    return { pageControllerSubPanelNavbarTitle, pageControllerSubPanelContent, testFieldButton, showMainDocButton, showAnnotationButton, annotationPage, scaleController, sectionControllerHTMLObject };\n} // buildPageControllerButtonArray\nfunction buildToolBoxHtmlObject(mainController) {\n    let toolBoxHtmlObject = mainController.toolBox.createToolboxHtmlObject();\n    let eraserItemButton = mainController.toolBox.createEraserItemButton(toolBoxHtmlObject);\n    let polylineItemButton = mainController.toolBox.createNewPolyLineItemButton(toolBoxHtmlObject);\n    let selectionToolItemButton = mainController.toolBox.createSelectionToolItemButton(toolBoxHtmlObject);\n    let mouseRectangleSelectionToolItemButton = mainController.toolBox.createMouseRectangleSelectionToolItemButton(toolBoxHtmlObject);\n    let addCommentItemButton = mainController.toolBox.createAddCommentButton(toolBoxHtmlObject);\n    let moveObjectInDivButton = mainController.toolBox.createMoveObjectInDivButton(toolBoxHtmlObject);\n    let addBookmarkButton = mainController.toolBox.createAddBookmarkButton(toolBoxHtmlObject);\n    let textToolButton = mainController.toolBox.createTextToolItemButton(toolBoxHtmlObject);\n    let simpleTextBoxButton = mainController.toolBox.createTextBoxItemButton(toolBoxHtmlObject);\n    let bothLayerSelectionToolItemButton = mainController.toolBox.createBothLayerSelectionToolItemButton(toolBoxHtmlObject);\n    toolBoxHtmlObject.append(eraserItemButton, polylineItemButton, selectionToolItemButton, mouseRectangleSelectionToolItemButton, addCommentItemButton, moveObjectInDivButton, addBookmarkButton, textToolButton);\n    return toolBoxHtmlObject;\n}\nfunction buildPageController(mainController, bookmarkSubPanelContent, fullPageModeDiv, overviewModeDiv, pageContentContainer) {\n    // page controller\n    // To create a page Controller to navigate previous and nex page\n    _pageControllerFolder_pageController__WEBPACK_IMPORTED_MODULE_15__.pageControllerHTMLObject(mainController.pageController, bookmarkSubPanelContent);\n    let createNewDivButton = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.functionButtonCreater(\"new Div\", _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.createNewPageEvent(mainController.pageController, fullPageModeDiv, overviewModeDiv, pageContentContainer));\n    createNewDivButton.classList.add(\"addNewPage\");\n    let deletePageButton = document.createElement(\"button\");\n    deletePageButton.innerHTML = \"delete page\";\n    deletePageButton.addEventListener(\"click\", function () {\n        let currentPageNumber = mainController.pageController.currentPage.pageNumber;\n        mainController.pageController.deletePage(currentPageNumber);\n        mainController.pageController.currentPage.fullPageHTMLObject.deleteFromDatabase();\n        mainController.pageController.goToPage(currentPageNumber - 1);\n        mainController.pageController.updatePageNumber(mainController.pageController.currentPage);\n    });\n    let switchViewModeButton = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.createSwitchViewModeButton(fullPageModeDiv, overviewModeDiv);\n    //\n    // let saveButton = document.createElement(\"button\")\n    // saveButton.innerHTML = \"saveButton\"\n    // saveButton.addEventListener(\"click\", function(){\n    //     let saveData = mainController.saveMainDoc(true)\n    //     socket.emit(\"saveNotebookUsingClientData\", saveData)\n    //\n    // })\n    // let sectionControllerHTMLObject = SectionController.createSectionController(mainController)\n    let layerControllerHTMLObject = _layerControllerFolder_layerController__WEBPACK_IMPORTED_MODULE_14__.createLayerController(mainController);\n    bookmarkSubPanelContent.append(createNewDivButton, deletePageButton, switchViewModeButton, layerControllerHTMLObject);\n}\nfunction buildInitialHTMLSkeleton(mainController) {\n    let currentStatus = mainController.pageCurrentStatus;\n    let annotationPage = (0,_pageControllerFolder_annotationHelperFunctions__WEBPACK_IMPORTED_MODULE_10__.buildAnnotationPage)(mainController);\n    let [topSubPanel, topSubPanelTabBar, topSubPanelTabContent] = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.subPanelTab(\"topSubPanel\");\n    // usr controller\n    let [userControllerSubPanelNavbarTitle, userpageControllerSubPanelContent, userViewer] = _UserFolder_UserController__WEBPACK_IMPORTED_MODULE_21__.buildUserController(mainController);\n    topSubPanel.addTabAndTabContent(userControllerSubPanelNavbarTitle, userpageControllerSubPanelContent, false);\n    // pageController\n    let { pageControllerSubPanelNavbarTitle, pageControllerSubPanelContent, testFieldButton, showMainDocButton, showAnnotationButton } = buildPageControllerButtonArray(mainController);\n    topSubPanel.addTabAndTabContent(pageControllerSubPanelNavbarTitle, pageControllerSubPanelContent);\n    let [middleSubPanel, middleSubPanelTabBar, middleSubPanelTabContent] = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.subPanelTab(\"middleSubPanel\");\n    let { pageArrayID, panelContainer, pageContentContainer, fullPageModeDiv, overviewModeDiv, bookmarkSubPanelNavbarTitle, bookmarkSubPanelContent } = getImportantDivFromHTML(mainController);\n    let [groupControllerNavbarTitle, groupControllerContent] = _groupControllerFolder_groupController__WEBPACK_IMPORTED_MODULE_9__.GroupController(mainController);\n    let [collectionControllerNavbarTitle, collectionControllerContent] = _collectionControllerFolder_collectionController__WEBPACK_IMPORTED_MODULE_18__.CollectionController(mainController);\n    middleSubPanel.addTabAndTabContent(collectionControllerNavbarTitle, collectionControllerContent, false);\n    middleSubPanel.addTabAndTabContent(groupControllerNavbarTitle, groupControllerContent, false);\n    middleSubPanel.addTabAndTabContent(bookmarkSubPanelNavbarTitle, bookmarkSubPanelContent);\n    //===================== bookmarkSubPanel ==================//\n    buildPageController(mainController, bookmarkSubPanelContent, fullPageModeDiv, overviewModeDiv, pageContentContainer);\n    let [bottomSubPanel, bottomSubPanelTabBar, bottomSubPanelTabContent] = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.subPanelTab(\"bottomSubPanel\");\n    // commentSubPanel\n    let [commentSubPanelNavbarTitle, commentSubPanelContent] = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.createSubPanel(\"comment\", true);\n    commentSubPanelContent.setAttribute(\"accessPointer\", mainController.mainDocArray[\"mainArray_bookmark\"]);\n    bottomSubPanel.addTabAndTabContent(commentSubPanelNavbarTitle, commentSubPanelContent);\n    // let commentSidebar = CommentSidebarController.GNCommentSidebar()\n    // commentSubPanelContent.append(commentSidebar)\n    // add events: initalizeWindowObject, addPasteImageEvent, swipeDetection\n    attachEvents(mainController, pageContentContainer);\n    panelContainer.append(topSubPanel, middleSubPanel, bottomSubPanel);\n    _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.shortNotice(\"inital Value\");\n    _socketFunction__WEBPACK_IMPORTED_MODULE_11__.socket.emit(\"clientAskServerForSocketData\");\n    window.mainController = mainController;\n} // buildInitialHTMLSkeleton\nfunction buildInitialPage(mainController, saveToDatabase = false) {\n    let fullPageModeDiv = document.querySelector(\".fullPageModeDiv\");\n    let overviewModeDiv = document.querySelector(\".overviewModeDiv\");\n    let commentSubPanelContent = document.querySelector(\".commentSubPanel\");\n    let groupControllerWrapper = document.querySelector(\".groupControllerWrapper\");\n    let allSectionView = document.querySelector(\".allSectionView\");\n    let collectionControllerWrapper = document.querySelector(\".collectionControllerWrapper\");\n    createGNDataStructureMapping(mainController);\n    let pageController = mainController.pageController;\n    let pageFullArray = [];\n    let pageOverviewArray = [];\n    let bookmarkArray = [];\n    let collectionArray = [];\n    let arrayObject = {};\n    mainController.mainDoc[\"array\"].forEach((p) => {\n        if (p.GNType == \"mainArray_pageFull\") {\n            pageFullArray = p.array;\n        }\n        if (p.GNType == \"mainArray_pageOverview\") {\n            pageOverviewArray = p.array;\n        }\n        if (p.GNType == \"mainArray_bookmark\") {\n            bookmarkArray = p.array;\n        }\n        if (p.GNType == \"mainArray_panel\") {\n            collectionArray = p.array;\n        }\n    });\n    let pageNotRendered = [];\n    let targetPageIndex = pageFullArray.length - 1;\n    let preloadRange = 1;\n    for (let i = 0; i < pageFullArray.length; i++) {\n        let newPage = _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.createNewPage(pageController, fullPageModeDiv, pageFullArray[i], saveToDatabase);\n        _pageViewHelperFunction__WEBPACK_IMPORTED_MODULE_16__.insertNewPage(pageController, newPage, fullPageModeDiv);\n        mainController.renderDataToHTML(pageFullArray[i], newPage);\n        newPage.setAttribute(\"latestUpdateTime\", `${new Date()}`);\n        let pageID = pageFullArray[i]._identity.accessPointer;\n        // getPageDataFromServer(mainController, pageID)\n        if (i >= targetPageIndex - preloadRange && i <= targetPageIndex + preloadRange) {\n            if (i == targetPageIndex)\n                newPage.classList.add(\"currentPage\");\n            newPage.setAttribute(\"loaded\", \"true\");\n            getPageDataFromServer(mainController, pageID);\n        }\n        else {\n            pageNotRendered.push(pageID);\n        }\n        // add new section rows\n        allSectionView.addNewRow(i + 1, pageFullArray[i]._identity.accessPointer, pageFullArray[i].data.sectionDataArray);\n        // if (i==0){\n    }\n    let loadPages = setInterval(() => {\n        if (pageNotRendered.length > 0) {\n            let pageID = pageNotRendered.pop();\n            let targetPage = document.querySelector(`*[accessPointer=${pageID}]`);\n            if (targetPage.getAttribute(\"loaded\") != \"true\") {\n                targetPage.setAttribute(\"loaded\", \"true\");\n                getPageDataFromServer(mainController, pageID);\n            }\n        }\n    }, 500);\n    // pageNotRendered.forEach(p=>getPageDataFromServer(mainController, p))\n    let annotationButton = document.querySelector(\".showAnnotationButton\");\n    let switchViewModeButton = document.querySelector(\".switchViewModeButton\");\n    _pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_20__.createSmallViewPageController(mainController);\n} // buildInitialPage\nfunction getPageDataFromServer(mainController, pageID) {\n    let notebookID = mainController.notebookID;\n    _socketFunction__WEBPACK_IMPORTED_MODULE_11__.socket.emit(\"getPageData\", { notebookID, pageID });\n}\nfunction attachEvents(mainController, pageContentContainer) {\n    // WindowController.initalizeWindowObject()\n    // clipboard event\n    _clipboardEvents__WEBPACK_IMPORTED_MODULE_0__.addPasteImageEvent(mainController);\n    // to add swipe, panning events to the pageContentContainer\n    _EventFolder_swipeEvent__WEBPACK_IMPORTED_MODULE_19__.swipeDetection(mainController, pageContentContainer);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/buildInitialPageHelperFunctions.ts?");

/***/ }),

/***/ "./src/smallTest/clipboardEvents.ts":
/*!******************************************!*\
  !*** ./src/smallTest/clipboardEvents.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addPasteImageEvent\": () => (/* binding */ addPasteImageEvent),\n/* harmony export */   \"mouseResizeFunction\": () => (/* binding */ mouseResizeFunction),\n/* harmony export */   \"createMouseTrackingController\": () => (/* binding */ createMouseTrackingController),\n/* harmony export */   \"getObjectOrigianlDataArray\": () => (/* binding */ getObjectOrigianlDataArray),\n/* harmony export */   \"triggerTargetObjectMovingFunction\": () => (/* binding */ triggerTargetObjectMovingFunction)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GNImageContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GreatNoteClass/GNImageContainer */ \"./src/smallTest/GreatNoteClass/GNImageContainer.ts\");\n\nfunction addPasteImageEvent(mainController) {\n    document.onpaste = function (event) {\n        var items = (event.clipboardData || event.originalEvent.clipboardData).items;\n        let currentPage = mainController.pageController.currentPage.fullPageHTMLObject;\n        let targetDiv = currentPage.querySelector(\".divLayer\");\n        for (var index in items) {\n            var item = items[index];\n            if (item.kind === 'file') {\n                var blob = item.getAsFile();\n                var reader = new FileReader();\n                reader.onload = function (event) {\n                    let xhr = new XMLHttpRequest();\n                    xhr.open('POST', '/talkNotes/processImageBase64Format', true);\n                    xhr.onload = function () {\n                        console.log(\"finish processing image\");\n                        let responseImgSrc = JSON.parse(this.responseText).imgsrc.replace(\"talkNotes/\", \"/\");\n                        // console.log(24242424, responseImgSrc)\n                        let newImg = (0,_GreatNoteClass_GNImageContainer__WEBPACK_IMPORTED_MODULE_0__.GNImageContainer)({ \"name\": \"\", arrayID: targetDiv.getAccessPointer(), saveToDatabase: true, imgsrc: \"../image/\" + responseImgSrc + \".png\" });\n                        let img = newImg.querySelector(\"img\");\n                        img.src = window.location.origin\n                            + \"/image/\" + responseImgSrc + \".png\";\n                        targetDiv.appendChild(newImg);\n                        img.onload = function () {\n                            var _a;\n                            console.log(1234, img.width + 'x' + img.height);\n                            newImg.setImageSize({ width: img.naturalWidth / 2.3 });\n                            newImg.setMovable();\n                            newImg.style[\"top\"] = ((_a = document.querySelector(\".pageContentContainer\")) === null || _a === void 0 ? void 0 : _a.scrollTop) + \"px\";\n                            newImg.saveHTMLObjectToDatabase();\n                            targetDiv.appendChild(newImg);\n                        };\n                        let defaultSizeDropList = document.querySelector(\".defaultSizeDropList\");\n                        // let defaultWidth = 600\n                        // if (defaultSizeDropList){\n                        //    defaultWidth = +defaultSizeDropList.value\n                        // }\n                        //\n                        // newImg.setImageSize({width:defaultWidth})\n                    };\n                    xhr.send(event.target.result);\n                };\n                reader.readAsDataURL(blob);\n            }\n        }\n    };\n}\nfunction mouseResizeFunction(item) {\n    let eventName = \"mousedown\";\n    let moveEventName = \"mousemove\";\n    let attributeX = \"left\";\n    let attributeY = \"top\";\n    return function (e) {\n        let startX = e[\"screenX\"];\n        let startY = e[\"screenY\"];\n        let objectInitialX = 0;\n        let objectInitialY = 0;\n        let initialLeftValue = parseInt(item.style[attributeX].replace(\"px\", \"\")) || 0;\n        let initialTopValue = parseInt(item.style[attributeY].replace(\"px\", \"\")) || 0;\n        let currentX;\n        let currentY;\n        let deltaX = 0;\n        let deltaY = 0;\n        let mousemoveFunction = (e) => {\n            currentY = e.screenY;\n            currentX = e.screenX;\n            deltaX = currentX - startX;\n            deltaY = currentY - startY;\n            let newX = item.style[attributeX] = `${initialLeftValue + deltaX}px`;\n            item.style[attributeY] = `${initialTopValue + deltaY}px`;\n        };\n        item.addEventListener(\"mousemove\", mousemoveFunction, false);\n        function endDragEvent(e) {\n            Array.from(item.parentNode[\"children\"]).forEach((p) => {\n                p[\"style\"][\"pointerEvents\"] = \"inherit\";\n            });\n            let endX = e[\"screenX\"];\n            let endY = e[\"screenY\"];\n            item.removeEventListener(\"mousemove\", mousemoveFunction);\n        }\n        item.addEventListener(\"mouseup\", (e) => {\n            endDragEvent(e);\n        }, false);\n        item.addEventListener(\"mouseout\", (e) => {\n            endDragEvent(e);\n        }, false);\n    };\n}\nfunction createMouseTrackingController(mouseInfoDiv, testFieldDiv) {\n    // testFieldDiv to reflect the data\n    let clientXYDiv = document.createElement(\"div\");\n    clientXYDiv.style.display = \"grid\";\n    clientXYDiv.style.gridTemplateColumns = \"1fr 2fr\";\n    let clientXYDivLabel = document.createElement(\"span\");\n    let clientXYDivData = document.createElement(\"span\");\n    clientXYDivLabel.innerText = \"clientXY\";\n    clientXYDiv.appendChild(clientXYDivLabel);\n    clientXYDiv.appendChild(clientXYDivData);\n    let screenXYDiv = document.createElement(\"div\");\n    screenXYDiv.style.display = \"grid\";\n    screenXYDiv.style.gridTemplateColumns = \"1fr 2fr\";\n    let screenXYDivLabel = document.createElement(\"span\");\n    let screenXYDivData = document.createElement(\"span\");\n    screenXYDivLabel.innerText = \"screenXY\";\n    screenXYDiv.appendChild(screenXYDivLabel);\n    screenXYDiv.appendChild(screenXYDivData);\n    let offsetXYDiv = document.createElement(\"div\");\n    offsetXYDiv.style.display = \"grid\";\n    offsetXYDiv.style.gridTemplateColumns = \"1fr 2fr\";\n    let offsetXYDivLabel = document.createElement(\"span\");\n    let offsetXYDivData = document.createElement(\"span\");\n    offsetXYDivLabel.innerText = \"offsetXY\";\n    offsetXYDiv.appendChild(offsetXYDivLabel);\n    offsetXYDiv.appendChild(offsetXYDivData);\n    let pageXYDiv = document.createElement(\"div\");\n    pageXYDiv.style.display = \"grid\";\n    pageXYDiv.style.gridTemplateColumns = \"1fr 2fr\";\n    let pageXYDivLabel = document.createElement(\"span\");\n    let pageXYDivData = document.createElement(\"span\");\n    pageXYDivLabel.innerText = \"pageXY\";\n    pageXYDiv.appendChild(pageXYDivLabel);\n    pageXYDiv.appendChild(pageXYDivData);\n    let deltaXYDiv = document.createElement(\"div\");\n    deltaXYDiv.style.display = \"grid\";\n    deltaXYDiv.style.gridTemplateColumns = \"1fr 2fr\";\n    let deltaXYDivLabel = document.createElement(\"span\");\n    let deltaXYDivData = document.createElement(\"span\");\n    deltaXYDivLabel.innerText = \"deltaXY\";\n    deltaXYDiv.appendChild(deltaXYDivLabel);\n    deltaXYDiv.appendChild(deltaXYDivData);\n    let targetObjectXYDiv = document.createElement(\"div\");\n    targetObjectXYDiv.style.display = \"grid\";\n    targetObjectXYDiv.style.gridTemplateColumns = \"1fr 2fr\";\n    let targetObjectXYDivLabel = document.createElement(\"span\");\n    let targetObjectXYDivData = document.createElement(\"span\");\n    targetObjectXYDivLabel.innerText = \"targetObjXY\";\n    targetObjectXYDiv.appendChild(targetObjectXYDivLabel);\n    targetObjectXYDiv.appendChild(targetObjectXYDivData);\n    mouseInfoDiv.append(clientXYDiv, screenXYDiv, offsetXYDiv, pageXYDiv, deltaXYDiv, targetObjectXYDiv);\n    return [clientXYDivData, screenXYDivData, offsetXYDivData, pageXYDivData, deltaXYDivData, targetObjectXYDivData];\n}\n//\n// export function setTargetObject(parentDiv: any, targetObjectArray:any){\n//     parentDiv.targetObjectArray = targetObjectArray\n// }\nfunction getObjectOrigianlDataArray(p) {\n    // to get data about the object's position and parent's dimension so that you can change the position and size of the object\n    return {\n        originalLeft: p.offsetLeft,\n        originalTop: p.offsetTop,\n        parentOriginalWidth: p.parentNode.offsetWidth,\n        parentOriginalHeight: p.parentNode.offsetHeight\n    };\n}\nfunction triggerTargetObjectMovingFunction(p, i, deltaX, deltaY, targetObjectOriginalDataArray) {\n    // p = targetObject\n    // i = index\n    let newTargetObjectLeft = targetObjectOriginalDataArray[i][\"originalLeft\"] + deltaX + \"px\";\n    let newTargetObjectTop = targetObjectOriginalDataArray[i][\"originalTop\"] + deltaY + \"px\";\n    p.style.left = newTargetObjectLeft;\n    p.style.top = newTargetObjectTop;\n    if (p.specialMovingEvent) {\n        p.specialMovingEvent(deltaX, deltaY, targetObjectOriginalDataArray[i][\"parentOriginalWidth\"], targetObjectOriginalDataArray[i][\"parentOriginalHeight\"]);\n    }\n} // triggerTargetObjectMovingFunction\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/clipboardEvents.ts?");

/***/ }),

/***/ "./src/smallTest/collectionControllerFolder/collectionController.ts":
/*!**************************************************************************!*\
  !*** ./src/smallTest/collectionControllerFolder/collectionController.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CollectionController\": () => (/* binding */ CollectionController),\n/* harmony export */   \"createCollectionControllerHTMLObject\": () => (/* binding */ createCollectionControllerHTMLObject)\n/* harmony export */ });\n/* harmony import */ var _colllectionControllerHelperFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colllectionControllerHelperFunctions */ \"./src/smallTest/collectionControllerFolder/colllectionControllerHelperFunctions.ts\");\n\nfunction CollectionController(mainController) {\n    let [collectionControllerWrapper, collectionControllerNavbarTitle, collectioniViewer] = createCollectionControllerHTMLObject(mainController);\n    return [collectionControllerNavbarTitle, collectionControllerWrapper];\n}\nfunction createCollectionControllerHTMLObject(mainController) {\n    let collectionControllerNavbarTitle = document.createElement(\"div\");\n    collectionControllerNavbarTitle.classList.add(\"collectionControllerNavbarTitle\", \"subPanelTitle\");\n    collectionControllerNavbarTitle.innerText = \"colllection\";\n    let collectionViewer = document.createElement(\"div\");\n    collectionViewer.classList.add(\"collectionViewer\");\n    let collectionControllerWrapper = (0,_colllectionControllerHelperFunctions__WEBPACK_IMPORTED_MODULE_0__.createCollectionControllerWrapper)(collectionViewer);\n    let collectionControllerBar = document.createElement(\"div\");\n    collectionControllerBar.classList.add(\"collectionControllerBar\");\n    let addCollectionButton = (0,_colllectionControllerHelperFunctions__WEBPACK_IMPORTED_MODULE_0__.createAddCollectionButton)(collectionControllerWrapper, collectionViewer);\n    let closeCollectionPageButton = document.createElement(\"button\");\n    closeCollectionPageButton.innerText = \"close\";\n    closeCollectionPageButton.addEventListener(\"click\", e => {\n        let collectionPage = document.querySelector(\".collectionPage\");\n        collectionPage.style.display = \"none\";\n    });\n    collectionControllerBar.append(addCollectionButton, closeCollectionPageButton);\n    collectionControllerWrapper.append(collectionViewer, collectionControllerBar);\n    return [collectionControllerWrapper, collectionControllerNavbarTitle, collectionViewer];\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/collectionControllerFolder/collectionController.ts?");

/***/ }),

/***/ "./src/smallTest/collectionControllerFolder/collectionPageHelperFunction.ts":
/*!**********************************************************************************!*\
  !*** ./src/smallTest/collectionControllerFolder/collectionPageHelperFunction.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"attachExtraFunctionToCollectionPage\": () => (/* binding */ attachExtraFunctionToCollectionPage),\n/* harmony export */   \"attachEventsToCollectionPage\": () => (/* binding */ attachEventsToCollectionPage)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteSvgDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts\");\n\nfunction attachExtraFunctionToCollectionPage(collectionPage, divLayer, svgLayer) {\n    collectionPage.renderGroupDataToCollectionPage = function (groupData) {\n        let selectionRectInfo = groupData.rectInfo;\n        let copiedPolyline = groupData[\"elementAccessPointeArray\"].map((p) => {\n            let polyline = document.querySelector(`polyline[accessPointer='${p}']`);\n            let copiedPolyline = _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__.GNSvgPolyLine({\n                name: polyline,\n                injectedData: polyline.extract()\n            });\n            copiedPolyline.setAttribute(\"accessPointer\", \"copied_\" + p);\n            copiedPolyline.style.transform = `translate(${0 + \"px\"}, ${-selectionRectInfo.y + 50 + collectionPage.pageStatus.height + \"px\"})`;\n            return copiedPolyline;\n        });\n        // to increase the offset of the height\n        collectionPage.pageStatus.height += selectionRectInfo.height;\n        collectionPage.divLayer.style.height = collectionPage.pageStatus.height + 100 + \"px\";\n        collectionPage.svgLayer.style.height = collectionPage.pageStatus.height + 100 + \"px\";\n        copiedPolyline.forEach((p) => collectionPage.svgLayer.append(p));\n    }; // renderGroupDataToCollectionPage\n    // inject saved data to the page\n    collectionPage.injecetDataToCollectionPage = function (injectedData) {\n        collectionPage.pageStatus.height = 0;\n        collectionPage.divLayer.innerHTML = \"\";\n        Array.from(collectionPage.svgLayer.children).forEach((p) => p.remove());\n        // console.log(545454, injectedData)\n        injectedData.forEach((p) => {\n            let page = document.querySelector(`div[accessPointer='${p.pageAccessPointer}'`);\n            let groupData = page === null || page === void 0 ? void 0 : page.groupData.filter((q) => q.uniqueID == p.uniqueID.toString())[0];\n            // console.log(page.groupData, groupData)\n            if (groupData)\n                collectionPage.renderGroupDataToCollectionPage(groupData);\n        });\n    }; // collectionPage\n} // attachExtraFunctionToCollectionPage\nfunction attachEventsToCollectionPage(collectionPage, divLayer, svgLayer) {\n    // dragging events to the collectionPage\n    collectionPage.addEventListener(\"dragenter\", e => {\n        e.preventDefault();\n        // console.log(\"dragenter\", e)\n    });\n    collectionPage.addEventListener(\"dragleave\", function (e) {\n        e.preventDefault();\n        // console.log(\"dragleave\", e)\n    }, false);\n    collectionPage.addEventListener(\"dragover\", function (e) {\n        e.preventDefault();\n    }, false);\n    collectionPage.addEventListener(\"drop\", e => {\n        e.preventDefault();\n        // to get the current row that is dragging\n        let groupControllerWrapper = document.querySelector(\".groupControllerWrapper\");\n        let draggingRow = groupControllerWrapper.draggingRow;\n        console.log(draggingRow);\n        let groupData = draggingRow.groupData;\n        console.log(\"drop element = \", draggingRow, groupData);\n        let dataToCollectionPage = {\n            uniqueID: groupData.uniqueID,\n            pageAccessPointer: groupData.pageAccessPointer\n        };\n        let activeCollectionRow = collectionPage.currentActiveCollectionRow;\n        activeCollectionRow.collectionData.push(dataToCollectionPage);\n        collectionPage.renderGroupDataToCollectionPage(groupData);\n    });\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/collectionControllerFolder/collectionPageHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/collectionControllerFolder/colllectionControllerHelperFunctions.ts":
/*!******************************************************************************************!*\
  !*** ./src/smallTest/collectionControllerFolder/colllectionControllerHelperFunctions.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createCollectionControllerWrapper\": () => (/* binding */ createCollectionControllerWrapper),\n/* harmony export */   \"createCollectionRow\": () => (/* binding */ createCollectionRow),\n/* harmony export */   \"createAddCollectionButton\": () => (/* binding */ createAddCollectionButton),\n/* harmony export */   \"convertAccessPointerToHTMLObject\": () => (/* binding */ convertAccessPointerToHTMLObject),\n/* harmony export */   \"createCollectionPage\": () => (/* binding */ createCollectionPage)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteSvgDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts\");\n/* harmony import */ var _collectionPageHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./collectionPageHelperFunction */ \"./src/smallTest/collectionControllerFolder/collectionPageHelperFunction.ts\");\n\n\nfunction createCollectionControllerWrapper(collectionViewer) {\n    let collectionControllerWrapper = document.createElement(\"div\");\n    collectionControllerWrapper.classList.add(\"collectionControllerWrapper\");\n    collectionControllerWrapper.collectionArray = [];\n    collectionControllerWrapper.renderGroup = function (collectionData) {\n        collectionData.forEach(p => {\n            let [collectionRow, collectionName, collectionSwitch] = createCollectionRow(p);\n            collectionViewer.append(collectionRow);\n        });\n    };\n    return collectionControllerWrapper;\n} // createcollectionControllerWrapper\nfunction createCollectionRow(injectedData) {\n    let collectionRow = document.createElement(\"div\");\n    collectionRow.classList.add(\"collectionRow\");\n    collectionRow.collectionData = [];\n    let collectionName = document.createElement(\"div\");\n    collectionName.contentEditable = \"true\";\n    collectionName.innerText = \"Collection\";\n    collectionName.classList.add(\"collectionName\");\n    if (injectedData) {\n        collectionRow.collectionData = injectedData;\n        collectionRow.setAttribute(\"collectionID\", injectedData.uniqueID);\n        collectionName.innerText = injectedData.collectionName;\n    }\n    let collectionShow = document.createElement(\"div\");\n    let collectionSwitch = document.createElement(\"span\");\n    collectionShow.innerText = \"show\";\n    collectionShow.addEventListener(\"click\", e => {\n        let collectionPage = document.querySelector(\".collectionPage\");\n        collectionPage.style.display = \"block\";\n        collectionPage.currentActiveCollectionRow = collectionRow;\n        collectionPage.injecetDataToCollectionPage(collectionRow.collectionData);\n    });\n    collectionRow.append(collectionName, collectionShow, collectionSwitch);\n    return [collectionRow, collectionName, collectionSwitch];\n} // createcollectionRow\nfunction createAddCollectionButton(collectionWrapper, collectionViewer) {\n    let addButton = document.createElement(\"button\");\n    addButton.innerText = \"addCollection\";\n    addButton.addEventListener(\"click\", function () {\n        let [collectionRow, collectionName, collectionSwitch] = createCollectionRow();\n        collectionViewer.append(collectionRow);\n    });\n    return addButton;\n} // createAddGroupButton\nfunction convertAccessPointerToHTMLObject(accessPointerArray) {\n    return accessPointerArray.map(p => document.querySelector(`*[accessPointer='${p}']`));\n} //convertAccessPointerToHTMLObject\nfunction createCollectionPage() {\n    let collectionPage = document.querySelector(\".collectionPage\");\n    collectionPage.pageStatus = { height: 0 };\n    let divLayer = document.createElement(\"div\");\n    divLayer.classList.add(\"collectionPageDivLayer\");\n    divLayer.style.position = \"absolute\";\n    divLayer.style.top = \"0px\";\n    divLayer.style.left = \"0px\";\n    let svgLayer = _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_0__.GNSvg({ \"name\": \"dummySVG\", _classNameList: [\"collectionPageSvgLayer\"] });\n    collectionPage.append(divLayer, svgLayer);\n    collectionPage.divLayer = divLayer;\n    collectionPage.svgLayer = svgLayer;\n    // attach injection function to the collection page htmlObject\n    _collectionPageHelperFunction__WEBPACK_IMPORTED_MODULE_1__.attachExtraFunctionToCollectionPage(collectionPage, divLayer, svgLayer);\n    _collectionPageHelperFunction__WEBPACK_IMPORTED_MODULE_1__.attachEventsToCollectionPage(collectionPage, divLayer, svgLayer);\n    return collectionPage;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/collectionControllerFolder/colllectionControllerHelperFunctions.ts?");

/***/ }),

/***/ "./src/smallTest/commentFolder/commentController.ts":
/*!**********************************************************!*\
  !*** ./src/smallTest/commentFolder/commentController.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GNComment\": () => (/* binding */ GNComment)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteDataClass.ts\");\n/* harmony import */ var _GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../GreatNoteClass/GreateNoteObjectHelperFunction */ \"./src/smallTest/GreatNoteClass/GreateNoteObjectHelperFunction.ts\");\n/* harmony import */ var _commentControllerHelperFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commentControllerHelperFunction */ \"./src/smallTest/commentFolder/commentControllerHelperFunction.ts\");\n\n\n\n//@auto-fold here\nfunction GNComment(createData) {\n    let { name, arrayID, insertPosition, dataPointer, saveToDatabase, specialCreationMessage, injectedData } = createData;\n    let _commentContainer = (0,_GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_0__.GNContainerDiv)({ name: \"commentDiv\", saveToDatabase: false });\n    _commentContainer.GNType = GNComment.name;\n    _commentContainer.classList.add(\"_commentContainer\");\n    if (arrayID && saveToDatabase) {\n        _commentContainer.addToDatabase(arrayID);\n        _commentContainer.saveHTMLObjectToDatabase();\n    }\n    //@auto-fold here\n    _commentContainer.createCommentObject = function (createData) {\n        return _commentControllerHelperFunction__WEBPACK_IMPORTED_MODULE_2__.createCommentObject(_commentContainer, createData);\n    };\n    _commentContainer.loadFromData = function (injectedData) {\n        _commentControllerHelperFunction__WEBPACK_IMPORTED_MODULE_2__.loadFromData(_commentContainer, injectedData);\n    }; // _commentContainer.loadFromData\n    //@auto-fold here\n    if (injectedData) {\n        // if there are data, loop each object and create\n        console.log(323232, \"inject data\");\n        _commentContainer.loadFromData(injectedData);\n        // ****************************\n        // render the comments inside\n        // ****************************\n        injectedData[\"array\"].forEach((p) => {\n            let newObject = _commentContainer.createCommentObject({ name: \"\", injectedData: p });\n            // newObject.initializeHTMLObjectFromData(p)\n        });\n    }\n    else {\n        let newCommentField = _commentContainer.createCommentObject({ \"name\": \"\", arrayID: _commentContainer.getAccessPointer(), saveToDatabase: true });\n        newCommentField.saveHTMLObjectToDatabase();\n    } // if not injectedData\n    _commentControllerHelperFunction__WEBPACK_IMPORTED_MODULE_2__.addEventToCommentContainer(_commentContainer);\n    _commentControllerHelperFunction__WEBPACK_IMPORTED_MODULE_2__.addCommentController(_commentContainer);\n    // set it movable\n    (0,_GreatNoteClass_GreateNoteObjectHelperFunction__WEBPACK_IMPORTED_MODULE_1__.setObjectMovable)(_commentContainer);\n    return _commentContainer;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/commentFolder/commentController.ts?");

/***/ }),

/***/ "./src/smallTest/commentFolder/commentControllerHelperFunction.ts":
/*!************************************************************************!*\
  !*** ./src/smallTest/commentFolder/commentControllerHelperFunction.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loadFromData\": () => (/* binding */ loadFromData),\n/* harmony export */   \"createCommentObject\": () => (/* binding */ createCommentObject),\n/* harmony export */   \"addEventToCommentContainer\": () => (/* binding */ addEventToCommentContainer),\n/* harmony export */   \"addCommentController\": () => (/* binding */ addCommentController)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteDataClass.ts\");\n/* harmony import */ var _GreatNoteClass_GNDropdownList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../GreatNoteClass/GNDropdownList */ \"./src/smallTest/GreatNoteClass/GNDropdownList.ts\");\n\n\nfunction loadFromData(_commentContainer, injectedData) {\n    _commentContainer._identity = injectedData._identity;\n    _commentContainer.setAttribute(\"accessPointer\", injectedData._identity.accessPointer);\n    if (injectedData.classList)\n        injectedData.classList.forEach((className) => {\n            // add class name if the object does not have the class naame\n            if (!_commentContainer.classList.contains(className)) {\n                _commentContainer.classList.add(className);\n            }\n            else {\n                return;\n            }\n        }); // add classList\n    if (injectedData.stylesheet) {\n        _commentContainer.applyStyle(injectedData.stylesheet, false);\n    }\n}\nfunction createCommentObject(_commentContainer, createData) {\n    let { arrayID, saveToDatabase, injectedData } = createData;\n    let _commentObject = (0,_GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_0__.GNContainerDiv)(createData);\n    _commentObject.classList.add(\"commentObject\");\n    _commentObject.specialGNType = \"GNCommentObject\";\n    // commentContent\n    let _commentContent = (0,_GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_0__.GNContainerDiv)({\n        name: \"commentContent\",\n        arrayID: _commentObject.getAccessPointer(), contentEditable: true,\n        saveToDatabase: saveToDatabase\n    });\n    _commentContent.contentEditable = \"true\";\n    _commentContent.classList.add(\"commentField\");\n    // _commentType\n    let _commentType = (0,_GreatNoteClass_GNDropdownList__WEBPACK_IMPORTED_MODULE_1__.GNDropdownList)({\n        name: \"commentType\",\n        arrayID: _commentObject.getAccessPointer(),\n        statusList: [\"reply\", \"comment\"],\n        saveToDatabase: saveToDatabase\n    });\n    //\n    if (injectedData) {\n        console.log(45, \"injected\", injectedData[\"array\"][1]);\n        _commentType.loadFromData(injectedData[\"array\"][0]);\n        _commentContent.loadFromData(injectedData[\"array\"][1]);\n    }\n    _commentType.classList.add(\"commentType\");\n    _commentType.style.display = \"block\";\n    console.log(636363, _commentContent, _commentType);\n    //   when nit is not injectdData, then initialize the html\n    if (!injectedData) {\n        // _commentObject.textContent = \"creaaated by intiaal\"\n    }\n    _commentObject.append(_commentType, _commentContent);\n    // _commentObject.append(_commentType, _commentContent)\n    _commentObject.appendTo(_commentContainer);\n    return _commentObject;\n}\n//@auto-fold here\nfunction addEventToCommentContainer(commentContainer) {\n    commentContainer.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n    });\n}\n//@auto-fold here\nfunction addCommentController(_commentContainer) {\n    let controller = document.createElement(\"div\");\n    controller.classList.add(\"commentController\");\n    // add comment button\n    let addCommentButton = document.createElement(\"button\");\n    addCommentButton.classList.add(\"addCommentButton\");\n    addCommentButton.innerText = \"add Comment\";\n    addCommentButton.addEventListener(\"click\", (e) => {\n        let newCommentField = _commentContainer.createCommentObject({ \"name\": \"\", arrayID: _commentContainer.getAccessPointer(), saveToDatabase: true, contentEditable: false });\n        newCommentField.saveHTMLObjectToDatabase();\n    });\n    // delete comment button\n    let deleteCommentButton = document.createElement(\"button\");\n    deleteCommentButton.classList.add(\"deleteCommentButton\");\n    deleteCommentButton.innerText = \"delete Comment\";\n    deleteCommentButton.addEventListener(\"click\", (e) => {\n        _commentContainer.deleteFromDatabase();\n    });\n    // add objects to htmlObject\n    controller.append(addCommentButton, deleteCommentButton);\n    _commentContainer.insertBefore(controller, _commentContainer.firstChild);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/commentFolder/commentControllerHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/databaseHelperFunction.ts":
/*!*************************************************!*\
  !*** ./src/smallTest/databaseHelperFunction.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"specialCreationMessageEnum\": () => (/* binding */ specialCreationMessageEnum),\n/* harmony export */   \"processCreationDataHelper\": () => (/* binding */ processCreationDataHelper)\n/* harmony export */ });\nvar specialCreationMessageEnum;\n(function (specialCreationMessageEnum) {\n    specialCreationMessageEnum[\"createNewFullPageObject\"] = \"createNewFullPageObject\";\n    specialCreationMessageEnum[\"createNewOverviewPageObject\"] = \"createNewOverviewPageObject\";\n})(specialCreationMessageEnum || (specialCreationMessageEnum = {}));\nfunction processCreationDataHelper(mainController, creationData) {\n    let { htmlObjectData, metaData } = creationData;\n    let parentElement = mainController.getHtmlObjectByID(metaData.parentAccessPointer);\n    let htmlObjectName = htmlObjectData.GNType;\n    let htmlObject = mainController.createGNObjectThroughName(htmlObjectName, { name: \"\", injectedData: htmlObjectData });\n    console.log(19191919190000, metaData, htmlObject);\n    if (htmlObject.classList.contains(\"fullPage\")) {\n        console.log(\"create new page\");\n        mainController.pageController.addPage(htmlObject, metaData.insertPosition);\n    }\n    let insertPosition = metaData.insertPosition;\n    if (insertPosition) {\n        parentElement.insertBefore(htmlObject, parentElement.children[insertPosition]);\n    }\n    else {\n        parentElement.appendChild(htmlObject);\n    }\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/databaseHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/groupControllerFolder/groupController.ts":
/*!****************************************************************!*\
  !*** ./src/smallTest/groupControllerFolder/groupController.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createBookmarkHTMLObject\": () => (/* binding */ createBookmarkHTMLObject),\n/* harmony export */   \"GroupController\": () => (/* binding */ GroupController),\n/* harmony export */   \"createGroupControllerHTMLObject\": () => (/* binding */ createGroupControllerHTMLObject)\n/* harmony export */ });\n/* harmony import */ var _groupControllerHelperFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./groupControllerHelperFunctions */ \"./src/smallTest/groupControllerFolder/groupControllerHelperFunctions.ts\");\n\nfunction createBookmarkHTMLObject(_object) {\n    // interior parts\n    let bookmarkHeader = document.createElement(\"div\");\n    bookmarkHeader.classList.add(\"bookmarkHeader\");\n    let bookmarkTitle = document.createElement(\"div\");\n    bookmarkTitle.classList.add(\"bookmarkTitle\");\n    bookmarkTitle.contentEditable = \"true\";\n    bookmarkTitle.draggable = false;\n    let bookmarkType = document.createElement(\"select\");\n    let commentTypeOption = document.createElement(\"option\");\n    commentTypeOption.value = \"comment\";\n    commentTypeOption.innerText = \"comment\";\n    let quesitonTypeOption = document.createElement(\"option\");\n    quesitonTypeOption.value = \"question\";\n    quesitonTypeOption.innerText = \"question\";\n    bookmarkType.append(commentTypeOption, quesitonTypeOption);\n    let tagsWrapper = document.createElement(\"div\");\n    tagsWrapper.classList.add(\"tagsWrapper\");\n    let tagsInput = document.createElement(\"input\");\n    tagsInput.classList.add(\"tagsInput\");\n    tagsWrapper.append(tagsInput);\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"delete\";\n    deleteButton.addEventListener(\"click\", function () {\n        _object.deleteFromDatabase();\n    });\n    bookmarkHeader.append(bookmarkType, deleteButton);\n    return [bookmarkHeader, bookmarkTitle, bookmarkType, tagsWrapper, tagsInput, deleteButton];\n}\nfunction GroupController(mainController) {\n    let [groupControllerWrapper, groupControllerNavbarTitle, groupViewer] = createGroupControllerHTMLObject(mainController);\n    return [groupControllerNavbarTitle, groupControllerWrapper];\n}\nfunction createGroupControllerHTMLObject(mainController) {\n    let groupViewer = document.createElement(\"div\");\n    groupViewer.classList.add(\"groupViewer\");\n    let groupControllerNavbarTitle = document.createElement(\"div\");\n    groupControllerNavbarTitle.classList.add(\"groupControllerNavbarTitle\", \"subPanelTitle\");\n    groupControllerNavbarTitle.innerText = \"group\";\n    let groupControllerBar = document.createElement(\"div\");\n    groupControllerBar.classList.add(\"groupControllerBar\");\n    let addGroupButton = (0,_groupControllerHelperFunctions__WEBPACK_IMPORTED_MODULE_0__.createAddGroupButton)(groupViewer);\n    let groupControllerWrapper = (0,_groupControllerHelperFunctions__WEBPACK_IMPORTED_MODULE_0__.createGroupControllerWrapper)(groupViewer);\n    groupControllerBar.append(addGroupButton);\n    groupControllerWrapper.append(groupViewer, groupControllerBar);\n    return [groupControllerWrapper, groupControllerNavbarTitle, groupViewer];\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/groupControllerFolder/groupController.ts?");

/***/ }),

/***/ "./src/smallTest/groupControllerFolder/groupControllerHelperFunctions.ts":
/*!*******************************************************************************!*\
  !*** ./src/smallTest/groupControllerFolder/groupControllerHelperFunctions.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createGroupControllerWrapper\": () => (/* binding */ createGroupControllerWrapper),\n/* harmony export */   \"createGroupRow\": () => (/* binding */ createGroupRow),\n/* harmony export */   \"createAddGroupButton\": () => (/* binding */ createAddGroupButton),\n/* harmony export */   \"convertAccessPointerToHTMLObject\": () => (/* binding */ convertAccessPointerToHTMLObject),\n/* harmony export */   \"markObjectInsideSelectionArea\": () => (/* binding */ markObjectInsideSelectionArea)\n/* harmony export */ });\nfunction createGroupControllerWrapper(groupViewer) {\n    let groupControllerWrapper = document.createElement(\"div\");\n    groupControllerWrapper.classList.add(\"groupControllerWrapper\");\n    groupControllerWrapper.renderGroup = function (groupData) {\n        groupData.forEach(p => {\n            let [groupRow, groupName, groupSwitch] = createGroupRow(p);\n            groupViewer.append(groupRow);\n        });\n    };\n    return groupControllerWrapper;\n} // createGroupControllerWrapper\nfunction createGroupRow(injectedData) {\n    let groupRow = document.createElement(\"div\");\n    groupRow.classList.add(\"groupRow\");\n    groupRow.draggable = true;\n    let groupName = document.createElement(\"div\");\n    groupName.contentEditable = \"true\";\n    groupName.innerText = \"Group\";\n    groupName.classList.add(\"groupName\");\n    if (injectedData) {\n        groupRow.groupData = injectedData;\n        groupRow.setAttribute(\"groupID\", injectedData.uniqueID);\n        groupRow.setAttribute(\"pageAccessPointer\", injectedData.pageAccessPointer);\n        groupName.innerText = injectedData.groupName;\n    }\n    let groupShow = document.createElement(\"div\");\n    let groupSwitch = document.createElement(\"span\");\n    groupShow.innerText = \"show\";\n    groupShow.addEventListener(\"click\", e => {\n        console.log(groupRow.groupData);\n    });\n    let groupControllerWrapper = document.querySelector(\".groupControllerWrapper\");\n    groupRow.addEventListener(\"dragstart\", function (e) {\n        groupControllerWrapper.draggingRow = e.target;\n        console.log(21212121, groupControllerWrapper.draggingRow, e.target);\n    });\n    groupRow.append(groupName, groupShow, groupSwitch);\n    return [groupRow, groupName, groupSwitch];\n} // createGroupRow\nfunction createAddGroupButton(groupViewer) {\n    // create a button to act the sleected item to the group view\n    // the data contains: groupName, elementAccessPointeArray, uniqueID, pageAccessPointer and rectInfo\n    let addGroupButton = document.createElement(\"div\");\n    addGroupButton.classList.add(\"addGroupButton\");\n    addGroupButton.innerText = \"addGroup\";\n    addGroupButton.addEventListener(\"click\", e => {\n        let selectedObject, selectionRect;\n        [selectedObject, selectionRect] = markObjectInsideSelectionArea();\n        if (!selectionRect)\n            return;\n        let [groupRow, groupName, groupSwitch] = createGroupRow();\n        groupViewer.append(groupRow);\n        let currentPage = document.querySelector(\".currentPage\");\n        let groupItem = {\n            groupName: groupName.innerText,\n            elementAccessPointeArray: selectedObject,\n            uniqueID: `${Date.now()}`,\n            pageAccessPointer: currentPage.getAttribute(\"accessPointer\"),\n            rectInfo: {\n                x: selectionRect.x.baseVal.value,\n                y: selectionRect.y.baseVal.value,\n                width: selectionRect.width.baseVal.value,\n                height: selectionRect.height.baseVal.value\n            }\n        };\n        groupRow.groupData = groupItem;\n        console.log(95959595, groupItem);\n        selectionRect.remove();\n        currentPage.addGroupToPage(groupItem);\n        currentPage.saveHTMLObjectToDatabase();\n    });\n    return addGroupButton;\n} // createAddGroupButton\nfunction convertAccessPointerToHTMLObject(accessPointerArray) {\n    return accessPointerArray.map(p => document.querySelector(`*[accessPointer='${p}']`));\n} //convertAccessPointerToHTMLObject\nfunction markObjectInsideSelectionArea() {\n    let selectionRect = document.querySelector(\".selectionRect\");\n    if (!selectionRect)\n        return;\n    let svgBoard = selectionRect.parentElement;\n    let selectionObjectSet = new Set();\n    let newPoint = svgBoard.createSVGPoint();\n    svgBoard.childNodes.forEach((object) => {\n        // the object cannot  be the polyline\n        if (object != selectionRect && object.soul) {\n            let lineArray = object.soul.array().value;\n            Array.from(lineArray).forEach((p) => {\n                [newPoint.x, newPoint.y] = [p[0], p[1]];\n                if (selectionRect.isPointInFill(newPoint))\n                    selectionObjectSet.add(object.getAccessPointer());\n                return;\n            }); // Array.from(lineArray)\n            return;\n        } // if object!=polyline)\n    }); // svgBoard.childNodes.forEach\n    return [Array.from(selectionObjectSet), selectionRect];\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/groupControllerFolder/groupControllerHelperFunctions.ts?");

/***/ }),

/***/ "./src/smallTest/layerControllerFolder/layerController.ts":
/*!****************************************************************!*\
  !*** ./src/smallTest/layerControllerFolder/layerController.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"switchStatus\": () => (/* binding */ switchStatus),\n/* harmony export */   \"createLayerController\": () => (/* binding */ createLayerController),\n/* harmony export */   \"showCurrentPageButtonFunction\": () => (/* binding */ showCurrentPageButtonFunction),\n/* harmony export */   \"buildLayerContentFunction\": () => (/* binding */ buildLayerContentFunction)\n/* harmony export */ });\n/* harmony import */ var _GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteDataClass.ts\");\n/* harmony import */ var _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../GreatNoteClass/GreatNoteSvgDataClass */ \"./src/smallTest/GreatNoteClass/GreatNoteSvgDataClass.ts\");\n/* harmony import */ var _EventFolder_attachToolBoxEventsToLayers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../EventFolder/attachToolBoxEventsToLayers */ \"./src/smallTest/EventFolder/attachToolBoxEventsToLayers.ts\");\n\n\n\nfunction switchStatus(item) {\n    let currentStatus = item.getAttribute(\"status\");\n    let newStatus = currentStatus == \"on\" ? \"off\" : \"on\";\n    item.setAttribute(\"status\", newStatus);\n    return newStatus;\n}\n// ** make the layer controller panel so that you can add new div / new svg layer\nfunction createLayerController(mainController) {\n    // layerController HTML part\n    console.log(222222, \"layerController\");\n    let layerControllerTemplate = document.querySelector(\"#layerControllerTemplate\");\n    let layerControllerHTMLObject = layerControllerTemplate[\"content\"].cloneNode(true);\n    let layerView = layerControllerHTMLObject.querySelector(\".layerView\");\n    let addDivLayerButton = layerControllerHTMLObject.querySelector(\".addDivLayerButton\");\n    addDivLayerButton.addEventListener(\"click\", function (e) {\n        layerControllerHTMLObject.addDivLayer(e);\n    }, { detail: { \"run\": 12345 } });\n    let addSvgLayerButton = layerControllerHTMLObject.querySelector(\".addSvgLayerButton\");\n    addSvgLayerButton.addEventListener(\"click\", function (e) {\n        layerControllerHTMLObject.addSvgLayer(e);\n    }); // addSvgLayerButton.addEventListener\n    let showCurrentPageButton = layerControllerHTMLObject.querySelector(\".showCurrentPageButton\");\n    showCurrentPageButton.addEventListener(\"click\", function () {\n        showCurrentPageButtonFunction(mainController, layerView);\n    });\n    let moveUpButton = layerControllerHTMLObject.querySelector(\".moveUpButton\");\n    moveUpButton.addEventListener(\"click\", e => {\n        let selectedRow = layerView.querySelector(\".selectedRow\");\n        let selectedLayerRow = selectedRow.parentElement;\n        let selectedLayerRowPreviousSibling = selectedLayerRow.previousSibling;\n        if (!selectedLayerRowPreviousSibling) {\n            console.log(\"no previous sibling\");\n            return;\n        }\n        let parentElement = selectedLayerRow.parentElement;\n        parentElement.insertBefore(selectedLayerRow, selectedLayerRowPreviousSibling);\n        // update the data in the DB\n        let allLayerArray = Array.from(parentElement.querySelectorAll(\".layerLevel\"));\n        let updatedChildArray = allLayerArray.map(p => p.getAttribute(\"pageaccesspointer\"));\n        // changeLayerPosition(mainController, updatedChildArray)\n        // chaange the layer in the fullPage\n        let selectedLayerID = selectedLayerRow.getAttribute(\"pageaccesspointer\");\n        let selectedLayerRowPreviousSiblingID = selectedLayerRowPreviousSibling.getAttribute(\"pageaccesspointer\");\n        let selectedLayer = document.querySelector(`*[accessPointer='${selectedLayerID}']`);\n        let selectedLayerPreviousSibling = document.querySelector(`*[accessPointer='${selectedLayerRowPreviousSiblingID}']`);\n        let selectedLayerParentElement = selectedLayer.parentElement;\n        selectedLayerParentElement.insertBefore(selectedLayer, selectedLayerPreviousSibling);\n    });\n    let moveDownButton = layerControllerHTMLObject.querySelector(\".moveDownButton\");\n    moveDownButton.addEventListener(\"click\", e => {\n        let selectedRow = layerView.querySelector(\".selectedRow\");\n        let selectedLayerRow = selectedRow.parentElement;\n        let selectedLayerRowNextSibling = selectedLayerRow.nextSibling;\n        let parentElement = selectedLayerRow.parentElement;\n        if (!selectedLayerRowNextSibling) {\n            console.log(\"no next sibling\");\n            return;\n        }\n        parentElement.insertBefore(selectedLayerRowNextSibling, selectedLayerRow);\n        // update databasae\n        let allLayerArray = Array.from(parentElement.querySelectorAll(\".layerLevel\"));\n        let updatedChildArray = allLayerArray.map(p => p.getAttribute(\"pageaccesspointer\"));\n        // changeLayerPosition(mainController, updatedChildArray)\n        // chaange the layer in the fullPage\n        let selectedLayerID = selectedLayerRow.getAttribute(\"pageaccesspointer\");\n        let selectedLayerNextSiblingID = selectedLayerRowNextSibling.getAttribute(\"pageaccesspointer\");\n        let selectedLayer = document.querySelector(`*[accessPointer='${selectedLayerID}']`);\n        let selectedLayerNextSibling = document.querySelector(`*[accessPointer='${selectedLayerNextSiblingID}']`);\n        let selectedLayerParentElement = selectedLayer.parentElement;\n        if (!selectedLayerNextSibling) {\n            console.log(\"no next sibling\");\n            return;\n        }\n        selectedLayerParentElement.insertBefore(selectedLayerNextSibling, selectedLayer);\n    });\n    //\n    // layerControllerHTMLObject functions\n    //\n    layerControllerHTMLObject.renderCurrentPageLayer = function () {\n        showCurrentPageButtonFunction(mainController, layerView);\n    };\n    layerControllerHTMLObject.addDivLayer = function (e) {\n        let currentPage = mainController.pageController.currentPage;\n        let currentPageHTMLObject = mainController.pageController.currentPage.fullPageHTMLObject;\n        let divLayer = _GreatNoteClass_GreatNoteDataClass__WEBPACK_IMPORTED_MODULE_0__.GNContainerDiv({ name: \"\", arrayID: currentPageHTMLObject.getAccessPointer(), saveToDatabase: true, _classNameList: [\"divLayer\"] });\n        currentPageHTMLObject.append(divLayer);\n        _EventFolder_attachToolBoxEventsToLayers__WEBPACK_IMPORTED_MODULE_2__.attachEventListenerToDivLayer(mainController, divLayer);\n        divLayer.applyStyle({ width: \"100%\", height: \"100%\", \"position\": \"absolute\", \"left\": \"0px\", \"top\": \"0px\" });\n        divLayer.saveHTMLObjectToDatabase();\n        layerControllerHTMLObject.renderCurrentPageLayer();\n    };\n    layerControllerHTMLObject.addSvgLayer = function (e) {\n        let currentPage = mainController.pageController.currentPage;\n        let currentPageHTMLObject = mainController.pageController.currentPage.fullPageHTMLObject;\n        let svgLayer = _GreatNoteClass_GreatNoteSvgDataClass__WEBPACK_IMPORTED_MODULE_1__.GNSvg({ name: \"\", arrayID: currentPageHTMLObject.getAccessPointer(), saveToDatabase: true, _classNameList: [\"svgLayer\"] });\n        mainController.toolBox.registerSvg(svgLayer);\n        _EventFolder_attachToolBoxEventsToLayers__WEBPACK_IMPORTED_MODULE_2__.attachEventListenerToSvgBoard(mainController, svgLayer);\n        currentPageHTMLObject.append(svgLayer);\n        svgLayer.applyStyle({ width: \"100%\", height: \"100%\", \"background\": \"transparent\", position: \"absolute\", left: \"0px\", top: \"0px\" });\n        mainController.saveHTMLObjectToDatabase(svgLayer);\n        svgLayer.classList.add(\"svgLayer\");\n        layerControllerHTMLObject.renderCurrentPageLayer();\n    };\n    mainController.layerController = layerControllerHTMLObject;\n    return layerControllerHTMLObject;\n}\nfunction showCurrentPageButtonFunction(mainController, layerView) {\n    var _a;\n    layerView.innerHTML = \"\";\n    let currentPageData = (_a = mainController.pageController.currentPage.fullPageHTMLObject) === null || _a === void 0 ? void 0 : _a.extract();\n    if (currentPageData.array.length == 0) {\n        let layerArray = mainController.pageController.currentPage.fullPageHTMLObject.children;\n        Array.from(layerArray).forEach((p) => {\n            if (p.extract)\n                currentPageData.array.push(p.extract());\n        });\n    }\n    let layerObject = buildLayerContentFunction(mainController, currentPageData, layerView);\n    layerView.appendChild(layerObject);\n}\n//** aa funciton to build a list of items in a page so that tthey can be shown in the layer panel for switch on and off and lock the layer\nfunction buildLayerContentFunction(mainController, currentPageData, layerView, layerLevel = 0) {\n    // first create an item object that conatin the information of the layerLeevel and pageAccessPointer\n    // pageAccessPointer is used for finding the related HTML obejct show that you can manipulate them\n    let layerRowTemplate = document.querySelector(\"#layerRowTemplate\");\n    let item = document.createElement(\"div\");\n    item.classList.add(\"layerLevel\");\n    item.draggable = true;\n    let itemRow = layerRowTemplate.content.cloneNode(true)\n        .querySelector(\".layerRow\");\n    itemRow.setAttribute(\"layerLevel\", layerLevel.toString());\n    let itemViewSwitch = itemRow.querySelector(\".viewSwitch\");\n    let itemRowName = itemRow.querySelector(\".viewName\");\n    let itemExpandSwitch = itemRow.querySelector(\".expandSwitch\");\n    item.appendChild(itemRow);\n    item.setAttribute(\"layerLevel\", layerLevel.toString());\n    if (layerLevel == 0)\n        itemRow.style.display = \"none\";\n    if (layerLevel > 1)\n        item.setAttribute(\"status\", \"off\");\n    for (let i = 0; i < layerLevel; i++) {\n        itemRowName.innerText += \"-\";\n    }\n    itemRowName.innerText += currentPageData.GNType;\n    addItemRowFunction(layerView, itemRow);\n    // add click event to the item object to change the style of the related html objec tin that page\n    item.setAttribute(\"pageAccessPointer\", currentPageData._identity.accessPointer);\n    // the event on the three buttons\n    itemViewSwitch.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n        let relatedHTMLObject = document.querySelector(`*[accessPointer='${currentPageData._identity.accessPointer}']`);\n        mainController.toolBox.targetPage = relatedHTMLObject;\n        // to test if the style is visible or not\n        relatedHTMLObject.style.visibility = (relatedHTMLObject.style.visibility == \"hidden\") ? \"inherit\" : \"hidden\";\n        switchStatus(itemViewSwitch);\n    });\n    itemExpandSwitch.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n        let newStatus = switchStatus(itemExpandSwitch);\n        let targetItem = Array.from(item.querySelectorAll(`.layerLevel[layerlevel='${layerLevel}']`));\n        targetItem.forEach(p => p.setAttribute(\"status\", newStatus));\n    });\n    itemRowName.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n        let selectedRow = layerView.querySelector(\".selectedRow\");\n        if (selectedRow)\n            selectedRow.classList.remove(\"selectedRow\");\n        itemRow.classList.add(\"selectedRow\");\n    });\n    item.addEventListener(\"dragstart\", function (e) {\n        e.stopPropagation();\n        e.target.classList.add(\"draggedLayerRow\");\n    });\n    item.addEventListener(\"dragleave\", function (e) {\n        e.preventDefault();\n        // console.log(\"dragleave\", e)\n    }, false);\n    item.addEventListener(\"dragover\", function (e) {\n        e.preventDefault();\n    }, false);\n    layerView.addEventListener(\"drop\", function (e) {\n        let draggedLayerRow = document.querySelector(\".draggedLayerRow\");\n        // console.log(draggedLayerRow)\n        if (draggedLayerRow) {\n            draggedLayerRow.classList.remove(\"draggedLayerRow\");\n            draggedLayerRow.style.background = \"red\";\n        }\n    });\n    // to\n    layerLevel += 1;\n    if (currentPageData.array.length > 0) {\n        currentPageData.array.forEach((p) => {\n            let _row = buildLayerContentFunction(mainController, p, layerView, layerLevel);\n            if (_row)\n                item.appendChild(_row);\n        });\n    }\n    return item;\n}\nfunction addItemRowFunction(layerView, itemRow) {\n    itemRow.addEventListener(\"click\", function () {\n        let selectedRow = layerView.querySelector(\".selectedRow\");\n        if (selectedRow)\n            selectedRow.classList.remove(\"selectedRow\");\n        itemRow.classList.add(\"selectedRow\");\n    });\n} // addItemRowFunction\nfunction changeLayerPosition(mainController, updatedChildArray) {\n    let currentPageHTMLObject = document.querySelector(\".currentPage\");\n    let currentPageID = currentPageHTMLObject.getAccessPointer();\n    let microUpdateData = {\n        metaData: {\n            action: \"microUpdate\",\n            description: \"change layer position\",\n            notebookID: mainController.notebookID,\n            accessPointer: currentPageID,\n            modifyField: \"_identity.children\",\n            newData: updatedChildArray\n        }\n    };\n    mainController.changeList.push(microUpdateData);\n} // changeLayerPosition\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/layerControllerFolder/layerController.ts?");

/***/ }),

/***/ "./src/smallTest/mainControllerFolder/mainController.ts":
/*!**************************************************************!*\
  !*** ./src/smallTest/mainControllerFolder/mainController.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MainController\": () => (/* binding */ MainController)\n/* harmony export */ });\n/* harmony import */ var _buildInitialPageHelperFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../buildInitialPageHelperFunctions */ \"./src/smallTest/buildInitialPageHelperFunctions.ts\");\n/* harmony import */ var _socketFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../socketFunction */ \"./src/smallTest/socketFunction.ts\");\n/* harmony import */ var _databaseHelperFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../databaseHelperFunction */ \"./src/smallTest/databaseHelperFunction.ts\");\n/* harmony import */ var _pageControllerFolder_pageController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pageControllerFolder/pageController */ \"./src/smallTest/pageControllerFolder/pageController.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\n/* harmony import */ var _mainControllerFolder_mainControllerHelperFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mainControllerFolder/mainControllerHelperFunction */ \"./src/smallTest/mainControllerFolder/mainControllerHelperFunction.ts\");\n/* harmony import */ var _renderDataToHTML__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./renderDataToHTML */ \"./src/smallTest/mainControllerFolder/renderDataToHTML.ts\");\n\n\n\n\n\n\n\nclass MainController {\n    // *****************************\n    // *     A. Initialization     *\n    // *****************************\n    //@auto-fold here\n    constructor() {\n        this.mainDocArray = {};\n        this.baseArrayID = \"\";\n        this.applyMainDocTemplate = false;\n        this.selectedObjectArray = [];\n        this.changeList = [];\n        this.pageCurrentStatus = {\n            \"pendingObject\": {\n                \"newPage\": new Set(),\n                \"newPageArray\": []\n            },\n            \"fullPageSize\": _settings__WEBPACK_IMPORTED_MODULE_4__.pageSizeInfo.fullPageSize,\n            \"overviewPageSize\": _settings__WEBPACK_IMPORTED_MODULE_4__.pageSizeInfo.overviewPageSize\n        };\n        this.pageController = _pageControllerFolder_pageController__WEBPACK_IMPORTED_MODULE_3__.initializePageController(this);\n        this.notebookID = \"\";\n        this.uniqueNodeId = \"nodeNumber_\" + `${Date.now().toString(36) + Math.random().toString(36).substr(2)}`;\n    }\n    // ******************************************\n    // *     B. Modify data in the database     *\n    // ******************************************\n    /** to append data to the database\n    return: the HTMLObject related to, the accessID of the object in the database\n    the last paraameter is used only for the first tiee to initialize the object, no need to worry about it when used later\n    */\n    //@auto-fold here\n    addData(parentAccessPointer, htmlObject, accessPointer, insertPosition, dataPointer, specialMessage) {\n        // Step 1: register an accessPointer in the database\n        //@auto-fold here\n        let dataMessage = {\n            htmlObjectData: htmlObject.extract(),\n            metaData: {\n                action: \"create\",\n                insertPosition: insertPosition,\n                parentAccessPointer: parentAccessPointer,\n                accessPointer: accessPointer,\n                dataPointer: dataPointer,\n                notebookID: this.notebookID,\n                uniqueNodeId: this.uniqueNodeId,\n                specialMessage: specialMessage\n            }\n        };\n        // socket.emit(\"databaseOperation\", dataMessage)\n        this.changeList.push(dataMessage);\n        return dataMessage;\n    } // addData\n    /** A function to update the data store in the database. There are two types of update, the first is to update the data in the dataAccess Point. Another is to update self  identity and its style.\n    The last parameter updateType has two kinds. The first one is called dataPointer type.\n    The second type is called accessPointer typer.\n    */\n    //@auto-fold here\n    updateData(_object, dataPointerType = true) {\n        let htmlObjectData = _object.extract();\n        let accessPointer = _object.getAccessPointer();\n        let dataPointer = _object.getDataPointer();\n    }\n    //@auto-fold here\n    /** to initiate the data so that you can store the data to the db*/\n    // **** can be deleted later\n    createDummyData(data = {}) {\n        _mainControllerFolder_mainControllerHelperFunction__WEBPACK_IMPORTED_MODULE_5__.createDummyData(data);\n    }\n    //@auto-fold here\n    /** when ever the htmlObject is updated, we fetch newData from thfe HTMLObjectt, and then go to the database and update the relevant data*/\n    saveHTMLObjectToDatabase(htmlObject, insertPosition) {\n        let newData = htmlObject.extract();\n        let latestUpdateTime = htmlObject.getAttribute(\"latestUpdateTime\");\n        // console.log(96969696, newData)\n        let updateMessage = {\n            htmlObjectData: newData,\n            metaData: {\n                action: \"update\",\n                notebookID: this.notebookID,\n                latestUpdateTime: latestUpdateTime,\n                uniqueNodeId: this.uniqueNodeId,\n                insertPosition: insertPosition\n            }\n        };\n        this.changeList.push(updateMessage);\n    } // saveHTMLObjectToDatabase\n    tracePageFromElement(htmlObject) {\n        if (htmlObject) {\n            let isPage = htmlObject.classList.contains(\"fullPage\");\n            if (isPage) {\n                return htmlObject;\n            }\n            else {\n                return this.tracePageFromElement(htmlObject.parentElement);\n            }\n        }\n    }\n    deleteFromDataBase(htmlObject) {\n        let accessPointer = htmlObject.getAccessPointer();\n        let dataPointer = htmlObject.getDataPointer();\n        let parentAccessPointer = htmlObject[\"parentNode\"].getAttribute(\"accessPointer\");\n        // console.log(114, htmlObject._identity.linkArray)\n        if (accessPointer == dataPointer) {\n            htmlObject._identity.linkArray.forEach((linkedObjectPointer, i) => {\n                if (i != 0) {\n                    // console.log(linkedObjectPointer)\n                    let linkedObject = document.querySelector(`*[accessPointer='${linkedObjectPointer}']`);\n                    // console.log(htmlObject, linkedObject)\n                    linkedObject === null || linkedObject === void 0 ? void 0 : linkedObject.deleteFromDatabase();\n                }\n            });\n        }\n        let deleteMessage = {\n            htmlObject: {},\n            metaData: {\n                action: \"delete\",\n                accessPointer: accessPointer,\n                parentAccessPointer: parentAccessPointer,\n                notebookID: this.notebookID,\n                latestUpdateTime: `${new Date()}`,\n                uniqueNodeId: this.uniqueNodeId\n            }\n        };\n        htmlObject.remove();\n        this.changeList.push(deleteMessage);\n    } // deleteFromDataBase\n    sendChangeToServer() {\n        let changes = \"\";\n        if (changes.length > 0) {\n            _socketFunction__WEBPACK_IMPORTED_MODULE_1__.socket.emit(\"clientSendChangesToServer\", { \"changeData\": changes });\n        }\n    }\n    // ******************************************\n    // *     C. Access data in the database     *\n    // ******************************************\n    //@auto-fold here\n    getObjectDataById(objectID, doc = this.mainDoc) {\n        let targetElement = document.querySelector(`*[accessPointer='${objectID}']`);\n        return targetElement.extract();\n    }\n    getHTMLObjectTById(objectID) {\n        let targetElement = document.querySelector(`*[accessPointer='${objectID}']`);\n        return targetElement;\n    }\n    //@auto-fold here\n    getLinkArrayFromID(objectID) {\n        return this.getObjectById(objectID)._identity.linkArray;\n    }\n    //@auto-fold here\n    getHtmlObjectByID(objectID) {\n        return document.querySelector(`*[accessPointer='${objectID}']`);\n    }\n    // **********************************\n    // *     E. Build up the page       *\n    // **********************************\n    buildInitialHTMLSkeleton() {\n        _buildInitialPageHelperFunctions__WEBPACK_IMPORTED_MODULE_0__.buildInitialHTMLSkeleton(this);\n    } // buildInitialHTMLSkeleton\n    buildPageFromMainDoc() {\n        _buildInitialPageHelperFunctions__WEBPACK_IMPORTED_MODULE_0__.buildInitialPage(this, false);\n    } // 2. buildPageFromMainDoc\n    /** To accept data from the mainDoc file and then recreate the whole page according to the data stored in the database, not array, but the object includes array property */\n    renderDataToHTML(data, arrayHTMLObject) {\n        (0,_renderDataToHTML__WEBPACK_IMPORTED_MODULE_6__.renderDataToHTML)(this, data, arrayHTMLObject);\n    } // 3. renderDataToHTML\n    createGNObjectThroughName(objectName, createData) {\n        let { name, arrayID, insertPosition, dataPointer, saveToDatabase, injectedData } = createData;\n        // defined in buildInitialPage function\n        return this.GNDataStructureMapping[objectName](createData);\n    } // 4. createGNObjectThroughName\n    //@auto-fold here\n    loadMainDoc(data) {\n        this.mainDoc = data;\n        console.log(219219, data);\n        let rootArray = data[\"array\"];\n        data[\"array\"].map((p) => {\n            let arrayName = p[\"GNType\"];\n            let accessPointer = p[\"_identity\"][\"accessPointer\"];\n            this.mainDocArray[arrayName] = accessPointer;\n        });\n        // console.log(201201, this.mainDocArray)\n    }\n    savePageChangeToDatabase(newPageOrderArray) {\n        _socketFunction__WEBPACK_IMPORTED_MODULE_1__.socket.emit(\"savePageChangeToDatabase\", {\n            notebookID: this.notebookID,\n            newPageOrderArray: newPageOrderArray\n        });\n    }\n    processChangeData(changeData) {\n        let { htmlObjectData, metaData } = changeData;\n        // console.log(215215, metaData.socketId , socket.id)\n        console.log(254254, changeData);\n        if (changeData.metaData.action == \"create\") {\n            let item = document.querySelector(`*[accessPointe='${changeData.htmlObjectData._identity.accessPointer}']`);\n            console.log(245245, item, changeData.htmlObjectData._identity.accessPointer);\n            if (item)\n                return;\n            // debugger\n            (0,_databaseHelperFunction__WEBPACK_IMPORTED_MODULE_2__.processCreationDataHelper)(this, changeData);\n        } // create\n        if (changeData.metaData.action == \"update\") {\n            let _object = document.querySelector(`*[accessPointer='${htmlObjectData._identity.accessPointer}']`);\n            let pageHtmlObject = this.tracePageFromElement(_object);\n            pageHtmlObject.setAttribute(\"latestUpdateTime\", changeData.metaData.latestUpdateTime);\n            if (changeData.metaData.insertPosition && _object.GNType == \"GNPage\") {\n                this.pageController.movePage(_object, changeData.metaData.insertPosition);\n            }\n            htmlObjectData._identity.linkArray.forEach((p) => {\n                // to chheck if the socket id are different and if the aaaccessPointer of the object is different from the looped aaccessPointer of the linkedObject\n                // console.log(changeData.metaData.socketId, socket.id, _object._identity.accessPointer, p)\n                if (changeData.metaData.socketId != _socketFunction__WEBPACK_IMPORTED_MODULE_1__.socket.id || _object._identity.accessPointer != p) {\n                    let linkedObject = this.getHtmlObjectByID(p);\n                    // console.log(207207, changeData.metaData.socketId, socket.id, _object._identity.accessPointer, p, linkedObject)\n                    // console.log(linkedObject, linkedObject.loadFromData)\n                    // linkedObject.loadFromData(htmlObjectData, true)\n                    linkedObject.loadFromData(htmlObjectData, false);\n                }\n            });\n        } // update\n        if (changeData.metaData.action == \"delete\") {\n            let _object = document.querySelector(`*[accessPointer='${changeData.metaData.accessPointer}']`);\n            if (_object.GNType == \"GNPage\") {\n                let leftButton = document.querySelector(\".leftButton\");\n                leftButton.click();\n            }\n            let pageHtmlObject = this.tracePageFromElement(_object);\n            pageHtmlObject.setAttribute(\"latestUpdateTime\", `${new Date()}`);\n            _object === null || _object === void 0 ? void 0 : _object.remove();\n        }\n    }\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/mainControllerFolder/mainController.ts?");

/***/ }),

/***/ "./src/smallTest/mainControllerFolder/mainControllerHelperFunction.ts":
/*!****************************************************************************!*\
  !*** ./src/smallTest/mainControllerFolder/mainControllerHelperFunction.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createDummyData\": () => (/* binding */ createDummyData)\n/* harmony export */ });\nfunction createDummyData(data) {\n    let _dummyData = {\n        \"data\": data,\n        \"array\": [],\n        \"_identity\": { \"dataPointer\": \"\", \"accessPointer\": \"\", \"linkArray\": [] },\n        \"stylesheet\": {},\n        \"GNType\": \"\"\n    };\n    let htmlObject = document.createElement(\"div\");\n    htmlObject.style.width = \"300px\";\n    htmlObject.style.height = \"200px\";\n    return _dummyData;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/mainControllerFolder/mainControllerHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/mainControllerFolder/renderDataToHTML.ts":
/*!****************************************************************!*\
  !*** ./src/smallTest/mainControllerFolder/renderDataToHTML.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getParentPage\": () => (/* binding */ getParentPage),\n/* harmony export */   \"renderDataToHTML\": () => (/* binding */ renderDataToHTML)\n/* harmony export */ });\nfunction getParentPage(htmlObject) {\n    if (htmlObject.classList.contains(\"fullPage\")) {\n        return htmlObject;\n    }\n    else {\n        if (htmlObject.parentElement) {\n            return getParentPage(htmlObject.parentElement);\n        }\n        else {\n            return null;\n        }\n    }\n}\nfunction renderDataToHTML(mainController, data, arrayHTMLObject) {\n    let newHTMLObject;\n    // cannot save any obeject to the data base here\n    data[\"array\"].forEach(p => {\n        if (p.GNType == \"GNComment\") {\n            newHTMLObject = mainController.createGNObjectThroughName(\"GNComment\", { name: \"\", injectedData: p });\n            arrayHTMLObject.appendChild(newHTMLObject);\n            return;\n        }\n        if (p.GNType == \"GNSvg\") {\n            // cannot save any obeject to the data base here because mainController will create an infinity loop and will append new obejct forever\n            newHTMLObject = mainController.GNDataStructureMapping[\"GNSvg\"]({ name: \"name\", arrayID: arrayHTMLObject.getAccessPointer(), saveToDatabase: false, injectedData: p, _classNameList: p._classNameList });\n            newHTMLObject._identity = p._identity;\n            let objectData = p;\n            newHTMLObject.applyStyle(objectData.stylesheet);\n            newHTMLObject.addEventListener(\"click\", function () {\n                mainController.toolBox.targetPage = newHTMLObject;\n            });\n        }\n        if (p.GNType == \"GNContainerDiv\") {\n            newHTMLObject = mainController.GNDataStructureMapping[\"GNContainerDiv\"]({ name: \"name\", arrayID: arrayHTMLObject.getAccessPointer(), saveToDatabase: false, injectedData: p, _classNameList: p._classNameList });\n            newHTMLObject._identity = p._identity;\n            let objectData = p;\n        }\n        if (p.GNType == \"GNSvgPolyLine\") {\n            newHTMLObject = mainController.GNDataStructureMapping[\"GNSvgPolyLine\"]({ name: \"name\", arrayID: arrayHTMLObject.getAccessPointer(), saveToDatabase: false });\n            newHTMLObject._identity = p._identity;\n            //\n            let newPolylineData = p;\n            newHTMLObject.loadFromData(newPolylineData);\n            let stylesheet = newPolylineData[\"stylesheet\"];\n            newHTMLObject.applyStyle({ \"stroke\": stylesheet[\"stroke\"], \"stroke-width\": stylesheet[\"stroke-width\"], \"fill\": stylesheet[\"fill\"] });\n        }\n        if (p.GNType == \"GNImageContainer\") {\n            newHTMLObject = mainController.GNDataStructureMapping[\"GNImageContainer\"]({ name: \"name\", arrayID: arrayHTMLObject.getAccessPointer(), saveToDatabase: false, imgsrc: p[\"data\"][\"src\"] });\n            newHTMLObject._identity = p._identity;\n            newHTMLObject.loadFromData(p);\n            // newHTMLObject.setImageSize({width:500})\n            newHTMLObject.setMovable();\n        }\n        if (p.GNType == \"GNBookmark\") {\n            newHTMLObject = mainController.GNDataStructureMapping[\"GNBookmark\"]({ name: \"name\", arrayID: arrayHTMLObject.getAccessPointer(), saveToDatabase: false, injectedData: p });\n            newHTMLObject._identity = p._identity;\n            newHTMLObject.loadFromData(p);\n            newHTMLObject.setMovable();\n        }\n        if (p.GNType == \"GNTextBox\") {\n            newHTMLObject = mainController.GNDataStructureMapping[\"GNTextBox\"]({ name: \"name\", arrayID: arrayHTMLObject.getAccessPointer(), saveToDatabase: false, injectedData: p });\n            newHTMLObject._identity = p._identity;\n            newHTMLObject.loadFromData(p);\n            newHTMLObject.setMovable();\n        }\n        if (p.GNType == \"GNTextContainer\" || p.GNType == \"GNTextDiv\") {\n            newHTMLObject = mainController.GNDataStructureMapping[\"GNTextContainer\"]({ name: \"name\", arrayID: arrayHTMLObject.getAccessPointer(), saveToDatabase: false, injectedData: p });\n            newHTMLObject._identity = p._identity;\n            let annotationObject = {\n                accessPointer: newHTMLObject.getAccessPointer(),\n                annotationType: newHTMLObject.getAnnotationType()\n            };\n            let currentPageObject = mainController.pageController.currentPage;\n            // console.log(9696969696, currentPageObject)\n            currentPageObject.pageRelatedData.annotationArray.push(annotationObject);\n            newHTMLObject.loadFromData(p);\n            newHTMLObject.setMovable();\n        }\n        if (newHTMLObject) {\n            newHTMLObject.objectData = p;\n            arrayHTMLObject.appendChild(newHTMLObject);\n            newHTMLObject.setAttribute(\"accessPointer\", p._identity.accessPointer);\n            mainController.renderDataToHTML(p, newHTMLObject);\n        }\n    });\n} // 3. renderDataToHTML\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/mainControllerFolder/renderDataToHTML.ts?");

/***/ }),

/***/ "./src/smallTest/pageControllerFolder/PopUpBoxFunction.ts":
/*!****************************************************************!*\
  !*** ./src/smallTest/pageControllerFolder/PopUpBoxFunction.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createPopUpBox\": () => (/* binding */ createPopUpBox),\n/* harmony export */   \"addItemToCreatePopUpBox\": () => (/* binding */ addItemToCreatePopUpBox)\n/* harmony export */ });\nfunction createPopUpBox() {\n    let popUpBox = document.createElement(\"div\");\n    popUpBox.classList.add(\"popUpBox\");\n    addItemToCreatePopUpBox(popUpBox, \"delete\", () => popUpBox.remove());\n    addItemToCreatePopUpBox(popUpBox, \"delete\", () => popUpBox.remove());\n    addItemToCreatePopUpBox(popUpBox, \"delete\", () => popUpBox.remove());\n    addItemToCreatePopUpBox(popUpBox, \"delete\", () => popUpBox.remove());\n    return popUpBox;\n}\nfunction addItemToCreatePopUpBox(popUpBox, name, buttonFunction) {\n    let button = document.createElement(\"div\");\n    button.classList.add(\"popUpBoxButton\");\n    button.textContent = name;\n    button.addEventListener(\"click\", function (e) {\n        buttonFunction(e);\n    });\n    popUpBox.appendChild(button);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/pageControllerFolder/PopUpBoxFunction.ts?");

/***/ }),

/***/ "./src/smallTest/pageControllerFolder/annotationHelperFunctions.ts":
/*!*************************************************************************!*\
  !*** ./src/smallTest/pageControllerFolder/annotationHelperFunctions.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAllPageAnnotation\": () => (/* binding */ getAllPageAnnotation),\n/* harmony export */   \"buildAnnotationPage\": () => (/* binding */ buildAnnotationPage),\n/* harmony export */   \"renderAnnotationPage\": () => (/* binding */ renderAnnotationPage)\n/* harmony export */ });\nfunction getAllPageAnnotation(currentPage, checkedArray) {\n    let currentPageAnnotationData = currentPage.getCategorizedAnnotationArray();\n    console.log(currentPage, currentPageAnnotationData);\n    let filteredCurrentPageAnnotationData = {};\n    if (checkedArray) {\n        checkedArray.forEach((p) => {\n            filteredCurrentPageAnnotationData[p] = currentPageAnnotationData[p];\n        });\n    }\n    else {\n        filteredCurrentPageAnnotationData = currentPageAnnotationData;\n    }\n    let newItem = {\n        pageNumber: currentPage.pageNumber,\n        currentPageAnnotationData: filteredCurrentPageAnnotationData\n    };\n    let numberOfItem = 0;\n    Object.values(filteredCurrentPageAnnotationData).forEach((p) => {\n        console.log(2323232, p);\n        if (p)\n            numberOfItem += p.length;\n    });\n    if (numberOfItem > 0) {\n        return newItem;\n    }\n    else {\n        return;\n    }\n}\nfunction buildAnnotationPage(mainController) {\n    let annotationPage = document.querySelector(\".annotationPage\");\n    let checkBoxContainer = document.createElement(\"div\");\n    checkBoxContainer.classList.add(\"checkBoxContainer\");\n    let annotationPageContentWrapper = document.createElement(\"div\");\n    annotationPageContentWrapper.classList.add(\"annotationPageContentWrapper\");\n    let checkBoxChoiceArray = [\"section\", \"question\", \"solution\", \"comment\", \"equation\", \"group\"];\n    checkBoxChoiceArray.forEach(p => {\n        let checkBoxChoice = document.createElement(\"div\");\n        let checkBox = document.createElement(\"input\");\n        checkBox.id = \"checkBox_\" + p;\n        checkBox.type = \"checkbox\";\n        checkBox.value = p;\n        let checkBoxLabel = document.createElement(\"label\");\n        checkBoxLabel.setAttribute(\"for\", \"checkBox_\" + p);\n        checkBoxLabel.innerText = p;\n        checkBoxChoice.append(checkBox, checkBoxLabel);\n        checkBoxContainer.append(checkBoxChoice);\n    });\n    let getCheckedValueButton = document.createElement(\"button\");\n    getCheckedValueButton.classList.add(\"getCheckedValueButton\");\n    getCheckedValueButton.innerText = \"getCheckedValue\";\n    getCheckedValueButton.addEventListener(\"click\", e => {\n        let checkedArray = Array.from(document.querySelectorAll(\".checkBoxContainer input:checked\")).map((p) => p.value);\n        console.log(626262, checkedArray);\n        let currentPage = mainController.pageController.startPage.next;\n        let allPageAnnotationArray = [];\n        while (currentPage) {\n            if (!currentPage.getCategorizedAnnotationArray)\n                break;\n            // pageNumber: , currentPageAnnotationData\n            let currentPageAnnotationData = getAllPageAnnotation(currentPage, checkedArray);\n            // console.log(7676767, currentPageAnnotationData)\n            if (currentPageAnnotationData) {\n                allPageAnnotationArray.push(currentPageAnnotationData);\n            }\n            currentPage = currentPage.next;\n        }\n        console.log(allPageAnnotationArray);\n        renderAnnotationPage(allPageAnnotationArray, annotationPageContentWrapper);\n    });\n    let firstRect = document.createElement(\"div\");\n    firstRect.classList.add(\"firstRect\");\n    firstRect.style.width = \"200px\";\n    firstRect.style.height = \"100px\";\n    firstRect.style.position = \"absolute\";\n    firstRect.style.top = \"200px\";\n    firstRect.style.left = \"200px\";\n    firstRect.style.background = \"green\";\n    let secondRect = document.createElement(\"div\");\n    secondRect.classList.add(\"secondRect\");\n    secondRect.style.width = \"200px\";\n    secondRect.style.height = \"250px\";\n    secondRect.style.position = \"absolute\";\n    secondRect.style.top = \"200px\";\n    secondRect.style.left = \"500px\";\n    secondRect.style.background = \"red\";\n    function getPointWidthAndHeight(rect) {\n        let rectData = rect.getBoundingClientRect();\n        let { x, y, width, height } = rectData;\n        let w = width;\n        let h = height;\n        return { x, y, w, h };\n    }\n    function checkPointInsideRect(point, rectData) {\n        return point.x > rectData.x && point.x < rectData.x + rectData.w && point.y > rectData.y && point.y < rectData.y + rectData.h;\n    }\n    function checkCornersInside(rect1Data, rect2Data) {\n        let c1 = { x: rect1Data.x, y: rect1Data.y };\n        let c2 = { x: rect1Data.x + rect1Data.w, y: rect1Data.y };\n        let c3 = { x: rect1Data.x + rect1Data.w, y: rect1Data.y + rect1Data.h };\n        let c4 = { x: rect1Data.x, y: rect1Data.y + rect1Data.h };\n        return [checkPointInsideRect(c1, rect2Data), checkPointInsideRect(c2, rect2Data), checkPointInsideRect(c3, rect2Data), checkPointInsideRect(c4, rect2Data)];\n    }\n    function checkSideInsideRect(rect1Data, rect2Data) {\n        let x1_1 = rect1Data.x;\n        let x1_2 = rect1Data.x + rect1Data.w;\n        let y1_1 = rect1Data.y;\n        let y1_2 = rect1Data.y + rect1Data.h;\n        let x2_1 = rect2Data.x;\n        let x2_2 = rect2Data.x + rect2Data.w;\n        let y2_1 = rect2Data.y;\n        let y2_2 = rect2Data.y + rect2Data.h;\n        if (x1_1 < x2_1 && x1_2 > x2_2 && y1_1 > y2_1 && y1_2 < y2_2) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    let result = document.createElement(\"input\");\n    result.style.width = \"300px\";\n    let checkButton = document.createElement(\"button\");\n    checkButton.innerHTML = \"checkButton\";\n    checkButton.addEventListener(\"click\", e => {\n        let rect1Data = getPointWidthAndHeight(firstRect);\n        let rect2Data = getPointWidthAndHeight(secondRect);\n        let cornerCheck1 = checkCornersInside(rect1Data, rect2Data);\n        let cornerCheck2 = checkCornersInside(rect2Data, rect1Data);\n        let sideCheck1 = checkSideInsideRect(rect1Data, rect2Data);\n        let sideCheck2 = checkSideInsideRect(rect2Data, rect1Data);\n        let resultRect = [cornerCheck1, cornerCheck2, sideCheck1, sideCheck2].flat();\n        result.value = `${resultRect.some(p => p == true)}`;\n    });\n    annotationPage.append(checkBoxContainer, getCheckedValueButton, annotationPageContentWrapper, checkButton, result, firstRect, secondRect);\n    // let testBox = document.createElement(\"div\")\n    // testBox.style.width = \"300px\"\n    // testBox.style.height = \"300px\"\n    // testBox.style.background = \"red\"\n    // testBox.style.position = \"absolute\"\n    // testBox.style.left = \"100px\"\n    // testBox.style.top = \"100px\"\n    //\n    // let testBox2 = document.createElement(\"div\")\n    // testBox2.style.width = \"50px\"\n    // testBox2.style.height = \"300px\"\n    // testBox2.style.background = \"red\"\n    //\n    // let bottomRight = document.createElement(\"div\")\n    // bottomRight.style.width = \"10px\"\n    // bottomRight.style.height = \"10px\"\n    // bottomRight.style.background = \"black\"\n    // bottomRight.style.position = \"absolute\"\n    // bottomRight.style.left = 300 - 10/2 + \"px\"\n    // bottomRight.style.top = 300 - 10/2 + \"px\"\n    // testBox.append(bottomRight)\n    // annotationPage.append(testBox, testBox2)\n    //\n    // bottomRight.draggable = true\n    //\n    // bottomRight.addEventListener(\"dragstart\", e=>{\n    //     let initialPosition = {x: e.x, y: e.y}\n    //     let {left, top} = bottomRight.getBoundingClientRect()\n    //     let initialLeftAndTop = {left, top}\n    //\n    //\n    //     let [deltaX, deltaY] = [0, 0]\n    //     console.log(initialPosition, initialLeftAndTop, e)\n    //\n    //     let dragFunction = (e:DragEvent)=>{\n    //         deltaX = e.x  - initialPosition.x;\n    //         deltaY = e.y - initialPosition.y;\n    //\n    //         bottomRight.style.left = (initialLeftAndTop.left + deltaX) + \"px\"\n    //         bottomRight.style.top = (initialLeftAndTop.top + deltaY) + \"px\"\n    //         // console.log(e)\n    //         // console.log(deltaX, deltaY)\n    //     }\n    //\n    //     let dragEndFunction =(e:DragEvent)=>{\n    //         e.preventDefault()\n    //         // deltaX = e.screenX  - initialPosition.x;\n    //         // deltaY = e.screenY - initialPosition.y;\n    //\n    //         // bottomRight.style.left = initialLeftAndTop.left + deltaX + \"px\"\n    //         // bottomRight.style.top = initialLeftAndTop.top + deltaY + \"px\"\n    //\n    //         bottomRight.removeEventListener(\"drag\", dragFunction)\n    //         bottomRight.removeEventListener(\"dragend\", dragEndFunction)\n    //     }\n    //\n    //     bottomRight.addEventListener(\"drag\", dragFunction)\n    //     bottomRight.addEventListener(\"dragend\", dragEndFunction)\n    // })\n    return [annotationPage, getCheckedValueButton];\n}\nfunction renderAnnotationPage(currentPageAnnotationData, annotationPageContentWrapper) {\n    annotationPageContentWrapper.innerHTML = \"\";\n    currentPageAnnotationData.forEach((p) => {\n        let pageWrapper = document.createElement(\"div\");\n        pageWrapper.style.margin = \"10px 0\";\n        let title = document.createElement(\"div\");\n        title.innerText = `P. ${p.pageNumber}`;\n        pageWrapper.append(title);\n        Object.entries(p.currentPageAnnotationData).forEach(([key, itemArray], _) => {\n            let keyContainer = document.createElement(\"div\");\n            keyContainer.innerText = key;\n            // question, solution or\n            itemArray.forEach((item) => {\n                var _a, _b;\n                let masterObject = document.querySelector(`*[accessPointer='${item.accessPointer}']`);\n                let annotationSummary = document.createElement(\"div\");\n                annotationSummary.innerText = `${(_a = masterObject.querySelector(\"input\")) === null || _a === void 0 ? void 0 : _a.value}`;\n                let annotationContent = document.createElement(\"div\");\n                annotationContent.innerHTML = `${(_b = masterObject.querySelector(\"div\")) === null || _b === void 0 ? void 0 : _b.innerHTML}`;\n                let separationLine = document.createElement(\"hr\");\n                console.log(key, item, masterObject);\n                pageWrapper.append(annotationSummary, annotationContent, separationLine);\n            });\n        }); // p.currentPageAnnotationData).forEach\n        annotationPageContentWrapper.append(pageWrapper);\n    });\n    console.log(currentPageAnnotationData);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/pageControllerFolder/annotationHelperFunctions.ts?");

/***/ }),

/***/ "./src/smallTest/pageControllerFolder/pageController.ts":
/*!**************************************************************!*\
  !*** ./src/smallTest/pageControllerFolder/pageController.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initializePageController\": () => (/* binding */ initializePageController),\n/* harmony export */   \"pageControllerHTMLObject\": () => (/* binding */ pageControllerHTMLObject),\n/* harmony export */   \"highlightCurrentPageInOverviewMode\": () => (/* binding */ highlightCurrentPageInOverviewMode)\n/* harmony export */ });\n/* harmony import */ var _buildInitialPageHelperFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../buildInitialPageHelperFunctions */ \"./src/smallTest/buildInitialPageHelperFunctions.ts\");\n/* harmony import */ var _pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pageControllerFolder/smallViewHelperFunction */ \"./src/smallTest/pageControllerFolder/smallViewHelperFunction.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\n/* harmony import */ var _ToolboxFolder_rectangleSelectionFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ToolboxFolder/rectangleSelectionFunction */ \"./src/smallTest/ToolboxFolder/rectangleSelectionFunction.ts\");\n\n\n\n\nclass PageObject {\n    constructor() {\n        this.pageNumber = 1;\n        this.previous = null;\n        this.next = null;\n        this.fullPageHTMLObject = null;\n        this.smallViewHTMLObject = null;\n        this.pageRelatedData = {\n            sectionArray: [],\n            annotationArray: []\n        };\n    }\n    createAnnotationDummyObject() {\n        return {\n            comment: [], group: [], question: [], solution: [], section: [], equation: []\n        };\n    }\n    getCategorizedAnnotationArray() {\n        let annotationDummyObject = this.createAnnotationDummyObject();\n        this.pageRelatedData.annotationArray.forEach((p) => {\n            var _a;\n            (_a = annotationDummyObject[p.annotationType]) === null || _a === void 0 ? void 0 : _a.push(p);\n        });\n        return annotationDummyObject;\n    }\n}\nfunction initializePageController(mainController) {\n    let startPage = {\n        previous: null,\n        next: null,\n        pageNumber: 0,\n        name: \"startPage\"\n    };\n    let endPage = { previous: startPage, next: null, pageNumber: 1, name: \"endPage\" };\n    startPage.next = endPage;\n    let pageController = {\n        startPage: startPage,\n        endPage: endPage,\n        currentPage: startPage,\n        EventReceiver: document.createElement(\"span\"),\n        totalPageNumber: 0,\n        fullPageSize: _settings__WEBPACK_IMPORTED_MODULE_2__.pageSizeInfo.fullPageSize,\n        overviewPageSize: _settings__WEBPACK_IMPORTED_MODULE_2__.pageSizeInfo.overviewPageSize,\n        selectedObject: null\n    };\n    pageController.updatePageNumber = function (initialPage = pageController.startPage) {\n        let _currentPageNumber = initialPage.pageNumber;\n        let _currentPage = initialPage;\n        while (_currentPage && _currentPage.pageNumber < pageController.totalPageNumber) {\n            console.log(108109, _currentPage);\n            _currentPage.pageNumber = _currentPageNumber;\n            _currentPageNumber += 1;\n            _currentPage = _currentPage.next;\n        }\n    };\n    pageController.updateCurrentPage = function (previousCurrentPageHTMLObject, newCurrentPageHTMLObject) {\n        previousCurrentPageHTMLObject === null || previousCurrentPageHTMLObject === void 0 ? void 0 : previousCurrentPageHTMLObject.classList.remove(\"currentPage\");\n        newCurrentPageHTMLObject.classList.add(\"currentPage\");\n    };\n    pageController.getAnnotationFromAccessPointer = function (pageAccessPointer, annotationAccessPointer) {\n        let pageObject = pageController.getPageObjectFromAccessPointer(pageAccessPointer);\n        let annotationObject = pageObject.annotationArray.filter(p => p.accessPointer == annotationAccessPointer);\n        return annotationObject;\n    };\n    pageController.movePage = function (fullPageHtmlObject, pageNumber, relativePosition = \"after\") {\n        // connect the new bonding\n        console.log(130130, fullPageHtmlObject.soul);\n        let alpha = pageController.getPage(pageNumber);\n        // remove the original bonding\n        let oldPreviousPage = fullPageHtmlObject.soul.previous;\n        let oldNextPage = fullPageHtmlObject.soul.next;\n        console.log(137137, oldPreviousPage, oldNextPage);\n        oldPreviousPage.next = oldNextPage;\n        oldNextPage.previous = oldPreviousPage;\n        let beta = alpha.next;\n        alpha.next = fullPageHtmlObject.soul;\n        beta.previous = fullPageHtmlObject.soul;\n        fullPageHtmlObject.previous = alpha;\n        fullPageHtmlObject.next = beta;\n        fullPageHtmlObject.parentElement.insertBefore(fullPageHtmlObject, alpha.fullPageHTMLObject);\n        fullPageHtmlObject.parentElement.insertBefore(alpha.fullPageHTMLObject, fullPageHtmlObject);\n        pageController.updatePageNumber(pageController.startPage);\n    };\n    pageController.addPage = function (fullPageHTMLObject, targetPage) {\n        var _a;\n        let alpha;\n        console.log(160160160, targetPage);\n        if (targetPage) {\n            alpha = pageController.startPage.next;\n            while (alpha) {\n                if (alpha.pageNumber == targetPage)\n                    break;\n                console.log(9384, alpha.pageNumber, targetPage);\n                alpha = alpha.next;\n            }\n        }\n        else {\n            alpha = pageController.currentPage;\n        }\n        let newPage = new PageObject();\n        fullPageHTMLObject.soul = newPage;\n        let beta = pageController.currentPage.next;\n        newPage.previous = alpha;\n        newPage.next = beta;\n        alpha.next = newPage;\n        beta.previous = newPage;\n        pageController.currentPage = newPage;\n        newPage.fullPageHTMLObject = fullPageHTMLObject;\n        // newPage.smallViewHTMLObject = smallViewHTMLObject\n        newPage.fullPageHTMLObject.style.display = \"block\";\n        pageController.updateCurrentPage(alpha.fullPageHTMLObject, newPage.fullPageHTMLObject);\n        if (alpha.fullPageHTMLObject) {\n            alpha.fullPageHTMLObject.style.display = \"none\";\n        }\n        pageController.updatePageNumber(alpha);\n        pageController.totalPageNumber += 1;\n        fullPageHTMLObject.style.width = pageController.fullPageSize[0] + \"px\";\n        fullPageHTMLObject.style.height = pageController.fullPageSize[1] + \"px\";\n        //\n        let overviewModeDiv = document.querySelector(\".overviewModeDiv\");\n        let smallViewDivWrapper = document.createElement(\"div\");\n        let smallViewHTMLObject = document.createElement(\"div\");\n        smallViewHTMLObject.classList.add(\"smallView\");\n        overviewModeDiv.append(smallViewHTMLObject);\n        //\n        smallViewHTMLObject.style.width = pageController.overviewPageSize[0] + \"px\";\n        smallViewHTMLObject.style.height = pageController.overviewPageSize[1] + \"px\";\n        smallViewHTMLObject.fullPageHTMLObject = fullPageHTMLObject;\n        fullPageHTMLObject.smallViewHTMLObject = smallViewHTMLObject;\n        smallViewHTMLObject.setAttribute(\"smallViewAccessPoiniter\", fullPageHTMLObject.getAccessPointer());\n        smallViewHTMLObject.classList.add(fullPageHTMLObject.getAccessPointer());\n        let smallViewContent = document.createElement(\"div\");\n        smallViewContent.classList.add(\"smallViewContent\");\n        smallViewContent.innerText = pageController.currentPage.pageNumber;\n        smallViewHTMLObject.append(smallViewContent);\n        (0,_pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_1__.addFunctionToSmallViewHTMLObject)(pageController, smallViewHTMLObject, smallViewContent);\n        let smallViewData = (_a = fullPageHTMLObject.objectData) === null || _a === void 0 ? void 0 : _a.data.smallViewData;\n        if (smallViewData)\n            smallViewHTMLObject.loadFromData(smallViewData);\n        let overlay = document.createElement(\"div\");\n        overlay.classList.add(\"pageOverlay\");\n        overlay.style.position = \"fixed\";\n        overlay.style.width = \"100%\";\n        overlay.style.height = \"100%\";\n        // overlay.style.opacity = \"0.1\"\n        fullPageHTMLObject.append(overlay);\n        overlay.addEventListener(\"mousedown\", (e) => {\n            _ToolboxFolder_rectangleSelectionFunction__WEBPACK_IMPORTED_MODULE_3__.overallMouseDownFunction(e, mainController, overlay, \"mousemove\", \"mouseup\");\n        });\n        // render current Page\n        let showCurrentPageButton = document.querySelector(\".showCurrentPageButton\");\n        showCurrentPageButton.click();\n    };\n    pageController.getPageObjectFromAccessPointer = function (accessPointer) {\n        let _currentPage = pageController.startPage.next;\n        while (_currentPage) {\n            if (_currentPage.fullPageHTMLObject.getAttribute(\"accessPointer\") == accessPointer)\n                break;\n            _currentPage = _currentPage.next;\n        }\n        return _currentPage;\n    };\n    pageController.getPage = function (pageNumber) {\n        if (pageNumber == -999) {\n            let lastPage = pageController.endPage.previous;\n            return lastPage;\n        }\n        let _currentPage = pageController.startPage;\n        while (_currentPage) {\n            if (_currentPage.pageNumber == pageNumber)\n                break;\n            _currentPage = _currentPage.next;\n        }\n        return _currentPage;\n    };\n    pageController.deletePage = function (targetPageNumber) {\n        let targetPage = pageController.getPage(targetPageNumber);\n        let alpha = targetPage.previous;\n        let beta = targetPage.next;\n        pageController.totalPageNumber -= 1;\n        alpha.next = beta;\n        beta.previous = alpha;\n    };\n    pageController.goToPage = function (pageNumber, pageNumberInput) {\n        var _a;\n        if (pageNumber == pageController.currentPage.pageNumber)\n            return;\n        let _targetPage = pageController.getPage(pageNumber);\n        if (_targetPage.name == \"startPage\" || _targetPage.name == \"endPage\") {\n            console.log(_targetPage.name);\n            console.log(\"You are hitting the start page or the end page.\");\n            return;\n        }\n        _targetPage.fullPageHTMLObject.style.display = \"block\";\n        // set the position of the page according to the position relative to the targetPage\n        pageController.currentPage.fullPageHTMLObject.classList.remove(\"currentPage\");\n        pageController.currentPage.fullPageHTMLObject.style.display = \"none\";\n        // turn targetPage to current Page\n        pageController.currentPage = _targetPage;\n        pageController.currentPage.fullPageHTMLObject.classList.add(\"currentPage\");\n        pageController.pagNumberInput.value = `${pageNumber}`;\n        mainController.layerController.renderCurrentPageLayer();\n        function loadPageData(pageObject) {\n            if (!pageObject || !(pageObject === null || pageObject === void 0 ? void 0 : pageObject.previous) || !(pageObject === null || pageObject === void 0 ? void 0 : pageObject.next))\n                return;\n            let loaded = pageObject.fullPageHTMLObject.getAttribute(\"loaded\");\n            if (loaded != \"true\") {\n                let pageID = pageObject.fullPageHTMLObject.getAccessPointer();\n                (0,_buildInitialPageHelperFunctions__WEBPACK_IMPORTED_MODULE_0__.getPageDataFromServer)(mainController, pageID);\n                pageObject.fullPageHTMLObject.setAttribute(\"loaded\", \"true\");\n            }\n        }\n        let notebookID = mainController.notebookID;\n        let range = 2;\n        let currentPage_in_back_direction = pageController.currentPage;\n        for (let i = 0; i < range; i++) {\n            loadPageData(currentPage_in_back_direction);\n            currentPage_in_back_direction = currentPage_in_back_direction === null || currentPage_in_back_direction === void 0 ? void 0 : currentPage_in_back_direction.previous;\n        }\n        let currentPage_in_forward_direction = pageController.currentPage.next;\n        for (let i = 0; i < range; i++) {\n            loadPageData(currentPage_in_forward_direction);\n            currentPage_in_forward_direction = currentPage_in_forward_direction === null || currentPage_in_forward_direction === void 0 ? void 0 : currentPage_in_forward_direction.next;\n        }\n        if ((_a = mainController.toolBox.currentActiveButton) === null || _a === void 0 ? void 0 : _a.classList.contains(\"MoveObjectInDiv\")) {\n            console.log(\"click the move object in div again.\");\n            let moveObjectInDivButton = document.querySelector(\".MoveObjectInDiv\");\n            moveObjectInDivButton.click();\n        }\n    }; // go To Page\n    pageController.printAllPage = function () {\n        let array = [];\n        let _currentPage = pageController.startPage;\n        while (_currentPage) {\n            array.push(_currentPage);\n            _currentPage = _currentPage.next;\n        }\n    }; // printAllPage\n    pageController.transvereList = function (action) {\n        let _currentPage = pageController.startPage;\n        while (_currentPage) {\n            action(_currentPage);\n            _currentPage = _currentPage.next;\n        }\n    }; // transvereList\n    pageController.EventReceiver.addEventListener(\"goToPageEvent\", (e) => {\n        pageController.goToPage(e[\"detail\"].pageNumber);\n    });\n    pageController.getPageNumberFromPageID = function (accessPoiniter) {\n        var _a;\n        let pageNumber = 0;\n        let _currentPage = pageController.startPage;\n        while (_currentPage) {\n            if (((_a = _currentPage.fullPageHTMLObject) === null || _a === void 0 ? void 0 : _a.getAccessPointer()) == accessPoiniter) {\n                pageNumber = _currentPage.pageNumber;\n                break;\n            }\n            _currentPage = _currentPage.next;\n        }\n        return pageNumber;\n    };\n    pageController.savePageChangeToDatabase = function (newPageOrderArray) {\n        mainController.savePageChangeToDatabase(newPageOrderArray);\n    };\n    window.pageController = pageController;\n    return pageController;\n}\n//@auto-fold here\nfunction pageControllerHTMLObject(pageController, subPanelContainer) {\n    let pageNavigator = document.createElement(\"div\");\n    pageNavigator.classList.add(\"pageController\");\n    pageNavigator.soul = pageController;\n    let pageNumberInput = document.createElement(\"input\");\n    pageNumberInput.classList.add(\"pageNumberInput\");\n    pageController.pagNumberInput = pageNumberInput;\n    pageNumberInput.addEventListener(\"keyup\", function (event) {\n        if (event.key === \"Enter\") {\n            let goToPageEvent = new CustomEvent(\"goToPageEvent\", { 'detail': { pageNumber: parseInt(pageNumberInput.value) } });\n            pageController.EventReceiver.dispatchEvent(goToPageEvent);\n        }\n    });\n    let leftButton = document.createElement(\"button\");\n    leftButton.classList.add(\"leftButton\");\n    let rightButton = document.createElement(\"button\");\n    rightButton.classList.add(\"rightButton\");\n    leftButton.innerHTML = \"L\";\n    pageNumberInput.value = \"1\";\n    pageNumberInput.style.margin = \"0 auto\";\n    rightButton.innerHTML = \"R\";\n    pageNavigator.append(leftButton, pageNumberInput, rightButton);\n    subPanelContainer.append(pageNavigator);\n    //@auto-fold here\n    function leftButtonClickEvent() {\n        if (pageController.currentPage.pageNumber > 1) {\n            removeCurrrentPageChildren(pageController.currentPage.fullPageHTMLObject);\n            pageController.goToPage(+pageNumberInput.value - 1, pageNumberInput);\n        }\n    }\n    function removeCurrrentPageChildren(fullPageHTMLObject) {\n        let children = Array.from(fullPageHTMLObject.children);\n        // children.forEach(child=>{\n        //       child.remove()\n        // })\n    }\n    leftButton.addEventListener(\"click\", leftButtonClickEvent);\n    leftButton.addEventListener(\"touchstart\", leftButtonClickEvent);\n    // turn to next page\n    //@auto-fold here\n    function rightButtonClickEvent() {\n        removeCurrrentPageChildren(pageController.currentPage.fullPageHTMLObject);\n        if (pageController.currentPage.pageNumber < pageController.totalPageNumber) {\n            pageController.goToPage(+pageNumberInput.value + 1, pageNumberInput);\n        }\n        else {\n            console.log(4100, \"Over size\");\n        }\n    }\n    rightButton.addEventListener(\"click\", rightButtonClickEvent);\n} // right Button\nfunction highlightCurrentPageInOverviewMode(smallPageView, currentPageNumber, currentStatus) {\n    // for (let i = 1; i < currentStatus.pageArraySmallView.length; i++){\n    //     currentStatus.pageArraySmallView[i].style.border = \"0px\"\n    // }\n    // let currentPageHtml = currentStatus.pageArraySmallView[currentPageNumber]\n    //  // smallPageView.parentNode.querySelector(`.divPageSmall[pageNumber='${currentPageNumber}']`)\n    // currentPageHtml.style.border = \"3px red solid\"\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/pageControllerFolder/pageController.ts?");

/***/ }),

/***/ "./src/smallTest/pageControllerFolder/smallViewHelperFunction.ts":
/*!***********************************************************************!*\
  !*** ./src/smallTest/pageControllerFolder/smallViewHelperFunction.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createColorPicker\": () => (/* binding */ createColorPicker),\n/* harmony export */   \"extractSmallViewData\": () => (/* binding */ extractSmallViewData),\n/* harmony export */   \"createSmallViewPageController\": () => (/* binding */ createSmallViewPageController),\n/* harmony export */   \"addFunctionToSmallViewHTMLObject\": () => (/* binding */ addFunctionToSmallViewHTMLObject),\n/* harmony export */   \"renderSmallView\": () => (/* binding */ renderSmallView)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings */ \"./src/smallTest/settings.ts\");\nlet overviewModeDiv = document.querySelector(\".overviewModeDiv\");\nfunction createColorPicker() {\n    let colorPickerDiv = document.createElement(\"div\");\n    colorPickerDiv.classList.add(\"colorPickerDiv\");\n    let availableColors = [\"#FFFFFF\", \"#C0C0C0\", \"#808080\", \"#000000\", \"#FF0000\", \"#800000\", \"#FFFF00\", \"#808000\", \"#00FF00\", \"#008000\", \"#00FFFF\", \"#008080\", \"#0000FF\", \"#000080\", \"#FF00FF\", \"#800080\"];\n    availableColors.forEach((color) => {\n        let colorBlock = document.createElement(\"div\");\n        colorBlock.style.width = \"20px\";\n        colorBlock.style.height = \"20px\";\n        colorBlock.style.background = color;\n        colorBlock.style.display = \"inline-block\";\n        colorPickerDiv.append(colorBlock);\n        colorBlock.addEventListener(\"click\", e => {\n            let selectedSmallViewArray = Array.from(document.querySelectorAll(\".selectedSmallViewHTMLObject\"));\n            selectedSmallViewArray.forEach((p) => {\n                p.querySelector(\".smallViewContent\").style.background = color;\n            });\n            selectedSmallViewArray.forEach(smallView => {\n                smallView.fullPageHTMLObject.saveHTMLObjectToDatabase();\n            });\n        });\n    });\n    return colorPickerDiv;\n}\nfunction extractSmallViewData() {\n}\nfunction createSmallViewPageController(mainController) {\n    let overViewmodePageController = document.querySelector(\".overViewModePageController\");\n    let colorPicker = document.createElement(\"input\");\n    colorPicker.type = \"color\";\n    let colorPickerDiv = createColorPicker();\n    let setTagNameInput = document.createElement(\"input\");\n    setTagNameInput.classList.add(\"setTagNameInput\");\n    let setTagNameButton = document.createElement(\"button\");\n    setTagNameButton.classList.add(\"setTagName\");\n    setTagNameButton.innerText = \"setTag\";\n    setTagNameButton.addEventListener(\"click\", e => {\n        let selectedSmallViewArray = Array.from(document.querySelectorAll(\".selectedSmallViewHTMLObject\"));\n        if (selectedSmallViewArray.length > 0) {\n            selectedSmallViewArray.forEach((smallView) => {\n                smallView.innerText += setTagNameInput.value;\n                smallView.tagsArray.add(setTagNameInput.value);\n                smallView.fullPageHTMLObject.saveHTMLObjectToDatabase();\n            });\n        }\n    }); // setTagNameButton click function\n    let deleteButton = document.createElement(\"button\");\n    deleteButton.classList.add(\"smallViewDeleteButton\");\n    deleteButton.innerText = \"deleteButton\";\n    deleteButton.addEventListener(\"click\", e => {\n        let selectedSmallViewArray = document.querySelectorAll(\".selectedSmallViewHTMLObject\");\n        Array.from(selectedSmallViewArray).forEach((p) => {\n            p.fullPageHTMLObject.deleteFromDatabase();\n            p.remove();\n        });\n    }); // deleteButton click function\n    // not finished\n    let copyButton = document.createElement(\"button\");\n    copyButton.classList.add(\"smallViewCopyButton\");\n    copyButton.innerText = \"copyButton\";\n    copyButton.addEventListener(\"click\", e => {\n        let selectedSmallViewArray = Array.from(document.querySelectorAll(\".selectedSmallViewHTMLObject\"));\n        let pageAccessPointerArray = selectedSmallViewArray.map((p) => p.fullPageHTMLObject.getAttribute(\"accessPointer\"));\n        let lastItem = selectedSmallViewArray[selectedSmallViewArray.length - 1];\n    }); // copyButton click function\n    overViewmodePageController.append(copyButton, deleteButton, setTagNameButton, setTagNameInput);\n    overViewmodePageController.append(colorPicker, colorPickerDiv);\n}\nfunction addFunctionToSmallViewHTMLObject(pageController, smallViewHTMLObject, smallViewContent) {\n    smallViewHTMLObject.draggable = true;\n    smallViewHTMLObject.tagsArray = new Set();\n    let clickCounter = 0;\n    smallViewHTMLObject.addEventListener(\"click\", e => {\n        clickCounter += 1;\n        if (clickCounter == 2) {\n            clickCounter = 0;\n            let pageID = smallViewHTMLObject.fullPageHTMLObject.getAccessPointer();\n            let pageNumber = pageController.getPageNumberFromPageID(pageID);\n            pageController.goToPage(pageNumber);\n            let switchViewModeButton = document.querySelector(\".switchViewModeButton\");\n            switchViewModeButton.click();\n            return;\n        }\n        setTimeout(() => {\n            clickCounter = 0;\n        }, 500);\n        if (e.metaKey) {\n            console.log(\"controlkey pressed\");\n            smallViewHTMLObject.classList.toggle(\"selectedSmallViewHTMLObject\");\n        }\n        else if (e.shiftKey) {\n            let allSelectedSmallView = Array.from(overviewModeDiv.querySelectorAll(\".selectedSmallViewHTMLObject\"));\n            let lastElement = allSelectedSmallView[allSelectedSmallView.length - 1];\n            if (smallViewHTMLObject.parentElement) {\n                let childList = Array.from(smallViewHTMLObject.parentElement.children);\n                let lastElementIndex = childList.indexOf(lastElement);\n                let selectedElementIndex = childList.indexOf(smallViewHTMLObject);\n                if (lastElementIndex > selectedElementIndex) {\n                    for (let i = selectedElementIndex; i < lastElementIndex; i++) {\n                        if (!childList[i].classList.contains(\"selectedSmallViewHTMLObject\"))\n                            childList[i].classList.add(\"selectedSmallViewHTMLObject\");\n                    }\n                }\n                else {\n                    for (let i = lastElementIndex; i <= selectedElementIndex; i++) {\n                        if (!childList[i].classList.contains(\"selectedSmallViewHTMLObject\"))\n                            childList[i].classList.add(\"selectedSmallViewHTMLObject\");\n                    }\n                }\n            } // if (smallViewHTMLObject.parentElement\n        }\n        else {\n            let selectedSmallViewHTMLObjectArray = overviewModeDiv.querySelectorAll(\".selectedSmallViewHTMLObject\");\n            Array.from(selectedSmallViewHTMLObjectArray).forEach(p => {\n                p.classList.remove(\"selectedSmallViewHTMLObject\");\n            });\n            smallViewHTMLObject.classList.add(\"selectedSmallViewHTMLObject\");\n        }\n    });\n    smallViewHTMLObject.addEventListener(\"dragstart\", e => {\n        smallViewHTMLObject.classList.add(\"draggedItem\");\n    });\n    smallViewHTMLObject.addEventListener(\"dragleave\", function (e) {\n        e.preventDefault();\n        // console.log(\"dragleave\", e)\n    }, false);\n    smallViewHTMLObject.addEventListener(\"dragover\", function (e) {\n        e.preventDefault();\n    }, false);\n    smallViewHTMLObject.addEventListener(\"drop\", e => {\n        var _a, _b;\n        let rect = smallViewHTMLObject.getBoundingClientRect();\n        let middleLine = rect.x + rect.width / 2;\n        let draggedItem = document.querySelector(\".smallView.draggedItem\");\n        let allSelectedSmallView = document.querySelectorAll(\".selectedSmallViewHTMLObject\");\n        let targetPgeObject = smallViewHTMLObject.fullPageHTMLObject.soul;\n        let currentObject;\n        let nextObject;\n        // this is the node before the first selected item. It will be aassigned to a new value for the next disconnected item.\n        let alphaNode = allSelectedSmallView[0].fullPageHTMLObject.soul.previous;\n        let betaNode;\n        for (let i = 0; i < allSelectedSmallView.length; i++) {\n            currentObject = allSelectedSmallView[i].fullPageHTMLObject.soul;\n            nextObject = (_a = allSelectedSmallView[i + 1]) === null || _a === void 0 ? void 0 : _a.fullPageHTMLObject.soul;\n            if (!nextObject) {\n                console.log(\"no nextObject. At the ned of the chain\");\n                alphaNode.next = currentObject.next;\n                currentObject.next.prevous = alphaNode;\n                currentObject.next = null;\n                continue;\n            } // if no nextObject, thaat means the item is at the end of the chain. connect the alphaNode with the next node of currentNode\n            // skip if two are linked\n            if (currentObject.next == nextObject) {\n                // that means the  currentOBject and the nextObject are connected\n                continue;\n            }\n            else {\n                // that means the  currentOBject and the nextObject are disconnected. The nodeNeededToConnect will connect with the currentObject.next. ANd then node will become the next nodeNeededToConnect\n                if (!alphaNode)\n                    continue;\n                betaNode = currentObject.next;\n                alphaNode.next = betaNode;\n                betaNode.previous = alphaNode;\n                alphaNode = betaNode;\n                currentObject.next = nextObject;\n            }\n        }\n        if (e.pageX > middleLine) {\n            console.log(\"insert to the right\");\n            for (let i = allSelectedSmallView.length - 1; i >= 0; i--) {\n                alphaNode = smallViewHTMLObject.fullPageHTMLObject.soul.previous;\n                betaNode = smallViewHTMLObject.fullPageHTMLObject.soul;\n                if (i == allSelectedSmallView.length - 1) {\n                    console.log(\"the end node of the lefts\");\n                    betaNode.previous = allSelectedSmallView[i].fullPageHTMLObject.soul;\n                    allSelectedSmallView[i].fullPageHTMLObject.soul.next = betaNode;\n                }\n                if (i == 0) {\n                    console.log(\"the end node of the right\");\n                    alphaNode.next = allSelectedSmallView[0].fullPageHTMLObject.soul;\n                    allSelectedSmallView[0].fullPageHTMLObject.soul.previoous = alphaNode;\n                }\n                overviewModeDiv.insertBefore(allSelectedSmallView[i], smallViewHTMLObject);\n                overviewModeDiv.insertBefore(smallViewHTMLObject, allSelectedSmallView[i]);\n            }\n        } //e.pageX > middleLine\n        if (e.pageX < middleLine) {\n            console.log(\"insert to the left\");\n            alphaNode = smallViewHTMLObject.fullPageHTMLObject.soul.previous;\n            betaNode = smallViewHTMLObject.fullPageHTMLObject.soul;\n            for (let i = 0; i < allSelectedSmallView.length; i++) {\n                if (i == 0) {\n                    console.log(\"the end node of the lefts\");\n                    alphaNode.next = allSelectedSmallView[0].fullPageHTMLObject.soul;\n                    allSelectedSmallView[0].fullPageHTMLObject.soul.previoous = alphaNode;\n                }\n                if (i == allSelectedSmallView.length - 1) {\n                    console.log(\"the end node of the lefts\");\n                    betaNode.previous = allSelectedSmallView[i].fullPageHTMLObject.soul;\n                    allSelectedSmallView[i].fullPageHTMLObject.soul.next = betaNode;\n                }\n                overviewModeDiv.insertBefore(allSelectedSmallView[i], smallViewHTMLObject);\n            } // for loop with allSelectedSmallView.length\n        } // e.pageX < middleLine\n        currentObject = pageController.startPage.next;\n        let newPageOrderArray = [];\n        while (currentObject) {\n            let accessPointer = (_b = currentObject.fullPageHTMLObject) === null || _b === void 0 ? void 0 : _b.getAccessPointer();\n            if (accessPointer)\n                newPageOrderArray.push(accessPointer);\n            currentObject = currentObject.next;\n        }\n        console.log(newPageOrderArray);\n        pageController.savePageChangeToDatabase(newPageOrderArray);\n        draggedItem.classList.toggle(\"draggedItem\");\n    }); // smallViewHTMLObject.addEventListener(\"drop0\n    smallViewHTMLObject.extract = function () {\n        return {\n            color: smallViewContent.style.background,\n            tagsArray: Array.from(smallViewHTMLObject.tagsArray)\n        };\n    }; // smallViewHTMLObject.extract\n    smallViewHTMLObject.loadFromData = function (injectedData) {\n        var _a;\n        smallViewContent.style.background = injectedData.color;\n        (_a = injectedData.tagsArray) === null || _a === void 0 ? void 0 : _a.forEach((title) => {\n            smallViewHTMLObject.tagsArray.add(\"title\");\n            let tagDiv = document.createElement(\"div\");\n            tagDiv.innerText = title;\n            smallViewHTMLObject.append(tagDiv);\n        });\n    }; // smallViewHTMLObject.loadFromData\n}\n\nfunction renderSmallView(fullPageHTMLObject, smallViewHTMLObject, pageNumber) {\n    let smallViewPictureWrapper = smallViewHTMLObject.querySelector(\".smallViewContent\");\n    // let smallViewPictureWrapper = document.createElement(\"div\")\n    smallViewPictureWrapper.style.position = \"relative\";\n    smallViewPictureWrapper.style.top = \"0px\";\n    smallViewPictureWrapper.style.left = \"0px\";\n    let _div = document.createElement(\"div\");\n    _div.innerHTML = fullPageHTMLObject.innerHTML;\n    _div.style.position = \"absolute\";\n    _div.style.width = _settings__WEBPACK_IMPORTED_MODULE_0__.pageSizeInfo.fullPageSize[0] + \"px\";\n    _div.style.height = _settings__WEBPACK_IMPORTED_MODULE_0__.pageSizeInfo.fullPageSize[1] + \"px\";\n    _div.style.transformOrigin = \"left top\";\n    _div.style.transform = `scale(${_settings__WEBPACK_IMPORTED_MODULE_0__.pageSizeInfo.ratio})`;\n    // _div.style.transform = \"scale(0.125)\"\n    _div.style.top = \"0px\";\n    _div.style.left = \"0px\";\n    _div.style.background = \"white\";\n    let allItem = Array.from(_div.querySelectorAll(\"*\"));\n    allItem.forEach(p => p.setAttribute(\"accessPointer\", \"\"));\n    // smallViewHTMLObject.insertBefore(smallViewPictureWrapper)\n    let pageNumberDiv = document.createElement(\"div\");\n    pageNumberDiv.innerText = `${pageNumber}`;\n    pageNumberDiv.style.position = \"absolute\";\n    pageNumberDiv.style.top = \"3px\";\n    pageNumberDiv.style.left = \"3px\";\n    smallViewPictureWrapper.append(_div);\n    smallViewHTMLObject.append(pageNumberDiv);\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/pageControllerFolder/smallViewHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/pageViewHelperFunction.ts":
/*!*************************************************!*\
  !*** ./src/smallTest/pageViewHelperFunction.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"shortNotice\": () => (/* binding */ shortNotice),\n/* harmony export */   \"subPanelTab\": () => (/* binding */ subPanelTab),\n/* harmony export */   \"createSubPanel\": () => (/* binding */ createSubPanel),\n/* harmony export */   \"createSubPanelItem\": () => (/* binding */ createSubPanelItem),\n/* harmony export */   \"functionButtonCreater\": () => (/* binding */ functionButtonCreater),\n/* harmony export */   \"createSwitchViewModeButton\": () => (/* binding */ createSwitchViewModeButton),\n/* harmony export */   \"createNewPage\": () => (/* binding */ createNewPage),\n/* harmony export */   \"insertNewPage\": () => (/* binding */ insertNewPage),\n/* harmony export */   \"createNewPageEvent\": () => (/* binding */ createNewPageEvent)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./src/index.ts\");\n/* harmony import */ var _GreatNoteClass_GNPage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GreatNoteClass/GNPage */ \"./src/smallTest/GreatNoteClass/GNPage.ts\");\n/* harmony import */ var _pageControllerFolder_pageController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pageControllerFolder/pageController */ \"./src/smallTest/pageControllerFolder/pageController.ts\");\n/* harmony import */ var _pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pageControllerFolder/smallViewHelperFunction */ \"./src/smallTest/pageControllerFolder/smallViewHelperFunction.ts\");\n\n\n\n\n// import {pageController, updatePageController, updatePageNumberInNewOrder, highlightCurrentPageInOverviewMode} from \"./pageControllerFolder/pageController\"\nfunction shortNotice(noticeText) {\n    let shortNoticeDiv = document.createElement(\"div\");\n    shortNoticeDiv.textContent = noticeText;\n    shortNoticeDiv.style.position = \"fixed\";\n    shortNoticeDiv.style.width = \"10%\";\n    shortNoticeDiv.style.left = \"45%\";\n    shortNoticeDiv.style.top = \"45%\";\n    shortNoticeDiv.style.background = \"wheat\";\n    shortNoticeDiv.style.padding = \"20px\";\n    shortNoticeDiv.style.zIndex = \"10000\";\n    setTimeout(() => {\n        shortNoticeDiv.remove();\n    }, 1500);\n    document.body.appendChild(shortNoticeDiv);\n}\nfunction subPanelTab(panelClassName) {\n    let tabWrapper = document.createElement(\"div\");\n    tabWrapper.classList.add(\"tabWrapper\", panelClassName + \"TabWrapper\");\n    let tabBar = document.createElement(\"div\");\n    tabBar.classList.add(\"tabBar\", panelClassName + \"TabBar\");\n    let tabContent = document.createElement(\"div\");\n    tabContent.classList.add(\"tabContent\", panelClassName + \"TabContent\");\n    let subPanelSwitch = document.createElement(\"span\");\n    subPanelSwitch.classList.add(\"tabSwitch\", panelClassName + \"TabSwitch\");\n    subPanelSwitch.setAttribute(\"status\", \"open\");\n    subPanelSwitch.addEventListener(\"click\", function (event) {\n        let newStatus = subPanelSwitch.getAttribute(\"status\") == \"open\" ? \"close\" : \"open\";\n        subPanelSwitch.setAttribute(\"status\", newStatus);\n    });\n    tabBar.append(subPanelSwitch);\n    tabWrapper.append(tabBar, tabContent);\n    tabWrapper.addTabAndTabContent = function (_tab, _tabContent, showTabContent = true) {\n        _tab.setAttribute(\"status\", \"on\");\n        if (!showTabContent) {\n            _tab.setAttribute(\"status\", \"off\");\n            _tabContent.style.display = \"none\";\n        }\n        _tab.addEventListener(\"click\", (e) => {\n            Array.from(tabBar.children)\n                .forEach(p => p.setAttribute(\"status\", \"off\"));\n            Array.from(tabContent.children)\n                .forEach((p) => p.style.display = \"none\");\n            _tab.setAttribute(\"status\", \"off\");\n            _tabContent.style.display = \"block\";\n        });\n        tabBar.insertBefore(_tab, tabBar.firstChild);\n        tabContent.append(_tabContent);\n    };\n    return [tabWrapper, tabBar, tabContent];\n}\n//@auto-fold here\nfunction createSubPanel(name) {\n    let subPanelNavbarTitle = document.createElement(`div`);\n    subPanelNavbarTitle.classList.add(`subPanelTitle`);\n    subPanelNavbarTitle.innerHTML = `${name}`;\n    let subPanelContent = document.createElement(`div`);\n    subPanelContent.classList.add(\"subPanelContent\", `${name}SubPanel`);\n    return [subPanelNavbarTitle, subPanelContent];\n}\n//@auto-fold here\nfunction createSubPanelItem(name) {\n    // to create subpanel and fill with subPanelItem\n    let subPanelItem = document.createElement(\"div\");\n    subPanelItem.classList.add(\"subPanelItem\", `${name}SubPanelItem`);\n    subPanelItem.innerText = name[0];\n    subPanelItem.addEventListener(\"click\", function () {\n        let subPanelArrayParentNode = subPanelItem.parentNode;\n        let subPanelArray = subPanelArrayParentNode.querySelectorAll(\".subPanelItem\");\n        Array.from(subPanelArray).forEach(p => {\n            p.setAttribute(\"status\", \"off\");\n        });\n        subPanelItem.setAttribute(\"status\", \"on\");\n    });\n    return subPanelItem;\n}\n//@auto-fold here\nfunction functionButtonCreater(name, buttonFunction) {\n    let functionButton = document.createElement(\"div\");\n    functionButton.innerHTML = name;\n    functionButton.classList.add(\"functionButton\");\n    functionButton.addEventListener(\"click\", buttonFunction);\n    return functionButton;\n}\nfunction createSwitchViewModeButton(fullPageModeDiv, overviewModeDiv) {\n    let switchViewModeButton = document.createElement(\"button\");\n    switchViewModeButton.classList.add(\"switchViewModeButton\");\n    switchViewModeButton.innerText = \"pageMode\";\n    switchViewModeButton.setAttribute(\"mode\", \"pageMode\");\n    let overviewModeDivWrapper = document.querySelector(\".overviewModeDivWrapper\");\n    switchViewModeButton.addEventListener(\"click\", function (e) {\n        let mode = (switchViewModeButton.getAttribute(\"mode\") == \"overviewMode\") ? \"pageMode\" : \"overviewMode\";\n        switchViewModeButton.setAttribute(\"mode\", mode);\n        switchViewModeButton.innerText = mode;\n        if (mode == \"overviewMode\") {\n            // to turn on smaall View\n            fullPageModeDiv.setAttribute(\"status\", \"off\");\n            overviewModeDivWrapper.setAttribute(\"status\", \"on\");\n            let _currentPage = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.pageController.startPage.next;\n            while (_currentPage) {\n                if (_currentPage.name == \"endPage\")\n                    break;\n                let fullPageHTMLObject = _currentPage.fullPageHTMLObject;\n                let smallViewHTMLObject = fullPageHTMLObject.smallViewHTMLObject;\n                smallViewHTMLObject.style.position = \"relative\";\n                let fullPageHTMLObjectLatestDate = fullPageHTMLObject.getAttribute(\"latestUpdateTime\");\n                let smallViewHTMLObjectLatestDate = smallViewHTMLObject.getAttribute(\"latestUpdateTime\");\n                // to render the smallView\n                if (!smallViewHTMLObjectLatestDate || fullPageHTMLObjectLatestDate != smallViewHTMLObjectLatestDate) {\n                    (0,_pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_3__.renderSmallView)(fullPageHTMLObject, smallViewHTMLObject, _currentPage.pageNumber);\n                }\n                _currentPage = _currentPage.next;\n            }\n        }\n        else {\n            fullPageModeDiv.setAttribute(\"status\", \"on\");\n            overviewModeDivWrapper.setAttribute(\"status\", \"off\");\n        }\n        let smallViewHTMLObjectArray = Array.from(overviewModeDivWrapper.querySelectorAll(\".smallView\"));\n        // html2canvas(smallViewHTMLObjectArray[0].fullPageHTMLObject).then(p=>smallViewHTMLObjectArray[0].append(p))\n    });\n    return switchViewModeButton;\n}\nfunction createNewPage(pageController, fullPageModeDiv, fullPageData, saveToDatabase = true, insertPosition = false) {\n    let newPage = (0,_GreatNoteClass_GNPage__WEBPACK_IMPORTED_MODULE_1__.GNPage)({\n        name: \"fullPage\", arrayID: _index__WEBPACK_IMPORTED_MODULE_0__.mainController.mainDocArray.mainArray_pageFull, insertPosition: insertPosition,\n        dataPointer: false,\n        saveToDatabase: saveToDatabase,\n        specialCreationMessage: \"createNewFullPageObject\",\n        contentEditable: false,\n        _classNameList: [\"fullPage\"], injectedData: fullPageData\n    });\n    newPage.classList.add(\"divPage\", \"fullPage\");\n    newPage._dataStructure = [];\n    newPage._styleStructure = [\"background\", \"width\", \"height\"];\n    // newPage.style.width = `${pageController.fullPageSize[0]}px`\n    // newPage.style.height = `${pageController.fullPageSize[1]}px`\n    // if saveToDatabase is false, then you do not need to save it\n    if (saveToDatabase) {\n        newPage.saveHTMLObjectToDatabase();\n    }\n    if (fullPageData) {\n        newPage.initializeHTMLObjectFromData(fullPageData);\n        newPage.objectData = fullPageData;\n    }\n    return newPage;\n}\nfunction insertNewPage(pageController, newFullPage, fullPageModeDiv) {\n    pageController.addPage(newFullPage);\n    // ==========================\n    // appending new pages to the fullPageModeDiv and overviewModeDiv\n    //==========================\n    // newFullPage.setAttribute(\"pageNumber\", newPageNumber)\n    console.log(211211, fullPageModeDiv, newFullPage);\n    fullPageModeDiv.append(newFullPage);\n    //\n    // highlight and update the pageNumberInput\n    let pageNumberInput = document.querySelector(\".pageNumberInput\");\n    pageNumberInput.value = pageController.currentPage.pageNumber;\n    // highlightCurrentPageInOverviewMode(newSmallView, pageController)\n}\n//@auto-fold here\nfunction createNewPageEvent(currentStatus, fullPageModeDiv, pageDummyContent, htmlObject) {\n    // when click the new page button, a new page is created.\n    let clickEventAction = function () {\n        let insertPosition = currentStatus.currentPage.pageNumber;\n        console.log(227227, insertPosition);\n        let saveToDatabase = true;\n        let newPage = createNewPage(currentStatus, fullPageModeDiv, false, saveToDatabase, insertPosition);\n        // console.log(229229, newPage, newPage.getAccessPointer())\n        insertNewPage(currentStatus, newPage, fullPageModeDiv);\n        newPage.style.display = \"block\";\n        // console.log(23323, fullPageModeDiv)\n        // the functinos are defined at layerController\n        let addDivLayereButton = document.querySelector(\".addDivLayerButton\");\n        addDivLayereButton.click();\n        let addSvgLayerButton = document.querySelector(\".addSvgLayerButton\");\n        addSvgLayerButton.click();\n        fullPageModeDiv.append(newPage);\n    };\n    return clickEventAction;\n}\nfunction clickEventOfSmallPage(currentStatus, smallPage) {\n    // click\n    smallPage.addEventListener(\"click\", function () {\n        let clickedPageNumber = parseInt(smallPage.getAttribute(\"pageNumber\"));\n        // the next page is the clicked page + 1\n        currentStatus.newPageNumber = clickedPageNumber + 1;\n        (0,_pageControllerFolder_pageController__WEBPACK_IMPORTED_MODULE_2__.highlightCurrentPageInOverviewMode)(smallPage, clickedPageNumber, currentStatus);\n    });\n}\n// extract and create data object do not directly save object to the database.\n// What is saved to the database is controlled by the saveHTMLOBjectTODatabase function in the mainController file\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/pageViewHelperFunction.ts?");

/***/ }),

/***/ "./src/smallTest/sectionControllerFolder/sectionController.ts":
/*!********************************************************************!*\
  !*** ./src/smallTest/sectionControllerFolder/sectionController.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"test\": () => (/* binding */ test),\n/* harmony export */   \"createAllSectionRow\": () => (/* binding */ createAllSectionRow),\n/* harmony export */   \"createSectionController\": () => (/* binding */ createSectionController)\n/* harmony export */ });\nfunction test() {\n}\nfunction createAllSectionRow(pageSectionData) {\n    let row = document.createElement(\"div\");\n    row.innerHTML = pageSectionData.name;\n    // row.innerHTML = pageSectionData.name\n    return row;\n}\nfunction createSectionController(mainController) {\n    let controllerHTMLObject = document.createElement(\"div\");\n    controllerHTMLObject.classList.add(\"sectionControllerHTMLObject\");\n    let titleNameInput = document.createElement(\"input\");\n    let tagNameInput = document.createElement(\"input\");\n    let addRowButton = document.createElement(\"button\");\n    addRowButton.innerHTML = \"addRowButton\";\n    addRowButton.addEventListener(\"click\", e => {\n        let currentPageHTMLObject = mainController.pageController.currentPage.fullPageHTMLObject;\n        console.log(525252, currentPageHTMLObject.sectionDataArray);\n        let sectionData = {\n            name: titleNameInput.value,\n            tag: tagNameInput.value\n        };\n        currentPageHTMLObject.sectionDataArray.push(sectionData);\n        currentPageHTMLObject.saveHTMLObjectToDatabase();\n        titleNameInput.value = \"\";\n        tagNameInput.value = \"\";\n    });\n    let editRowButton = document.createElement(\"button\");\n    editRowButton.innerHTML = \"editRowButton\";\n    let deleteRowButton = document.createElement(\"button\");\n    deleteRowButton.innerHTML = \"delete\";\n    deleteRowButton.addEventListener(\"click\", e => {\n        console.log(deleteRowButton.pageSectionData);\n    });\n    let cancelEditButton = document.createElement(\"button\");\n    cancelEditButton.innerHTML = \"cancel\";\n    // to show the sections of all pages\n    let allSectionViewWrapper = document.createElement(\"div\");\n    allSectionViewWrapper.classList.add(\"allSectionViewWrapper\");\n    let allSectionView = document.createElement(\"div\");\n    allSectionView.classList.add(\"allSectionView\");\n    // add a new row o the secttion viewer, read the row datta and then \n    allSectionView.addNewRow = function (pageNumber, accessPointer, pageSectionData) {\n        if (pageSectionData && pageSectionData.length > 0) {\n            let pageSectionRowWrapper = document.createElement(\"div\");\n            allSectionView.append(pageSectionRowWrapper);\n            let pageDiv = document.createElement(\"div\");\n            pageDiv.innerText = `p.${pageNumber}`;\n            pageDiv.addEventListener(\"click\", e => {\n                let targetPageObject = mainController.pageController.getPageObjectFromAccessPointer(accessPointer);\n                mainController.pageController.goToPage(targetPageObject.pageNumber);\n            });\n            pageSectionRowWrapper.append(pageDiv);\n            pageSectionRowWrapper.style.marginBottom = \"10px\";\n            pageSectionData.forEach((pageSectionData) => {\n                let row = document.createElement(\"div\");\n                row.innerHTML = pageSectionData.name;\n                pageSectionRowWrapper.append(row);\n                row.pageSectionData = pageSectionData;\n                // to highlight the selected row and enter edit mode\n                row.addEventListener(\"click\", e => {\n                    let selectedRow = allSectionView.querySelector(\".selectedRow\");\n                    if (selectedRow == row)\n                        return;\n                    selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.classList.remove(\"selectedRow\");\n                    row.classList.add(\"selectedRow\");\n                    titleNameInput.value = pageSectionData.name;\n                    tagNameInput.value = pageSectionData.tag;\n                    deleteRowButton.pageSectionData = {\n                        accessPointer: accessPointer,\n                        pageSectionData: pageSectionData\n                    };\n                });\n            });\n        }\n    };\n    for (let i = 0; i < 100; i++) {\n        allSectionView.addNewRow({ name: \"name\", tag: \"tag\" });\n    }\n    allSectionViewWrapper.append(allSectionView);\n    // section controller, to add title and tag to the info of the section\n    // show the things in this page\n    controllerHTMLObject.append(allSectionViewWrapper, titleNameInput, tagNameInput, addRowButton, editRowButton, deleteRowButton, cancelEditButton);\n    return controllerHTMLObject;\n}\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/sectionControllerFolder/sectionController.ts?");

/***/ }),

/***/ "./src/smallTest/settings.ts":
/*!***********************************!*\
  !*** ./src/smallTest/settings.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClassNameCollection\": () => (/* binding */ ClassNameCollection),\n/* harmony export */   \"fullPageSizeWidth\": () => (/* binding */ fullPageSizeWidth),\n/* harmony export */   \"fullPageSizeHeight\": () => (/* binding */ fullPageSizeHeight),\n/* harmony export */   \"ratio\": () => (/* binding */ ratio),\n/* harmony export */   \"pageSizeInfo\": () => (/* binding */ pageSizeInfo),\n/* harmony export */   \"defaultEraserRadius\": () => (/* binding */ defaultEraserRadius)\n/* harmony export */ });\nlet ClassNameCollection = {\n    commentContainer: \"_commentContainer\"\n};\nlet fullPageSizeWidth = 1126;\nlet fullPageSizeHeight = 1500;\nlet ratio = 0.125;\nlet pageSizeInfo = {\n    fullPageSize: [fullPageSizeWidth, fullPageSizeHeight],\n    overviewPageSize: [fullPageSizeWidth * ratio, fullPageSizeHeight * ratio],\n    ratio: ratio\n};\nlet defaultEraserRadius = 20;\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/settings.ts?");

/***/ }),

/***/ "./src/smallTest/socketFunction.ts":
/*!*****************************************!*\
  !*** ./src/smallTest/socketFunction.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"socket\": () => (/* binding */ socket)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./src/index.ts\");\n/* harmony import */ var _pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pageControllerFolder/smallViewHelperFunction */ \"./src/smallTest/pageControllerFolder/smallViewHelperFunction.ts\");\nlet io = __webpack_require__(/*! socket.io-client */ \"./node_modules/socket.io-client/build/index.js\");\n\nvar socket;\n\nsocket = io.io();\nwindow.socket = socket;\nsocket.emit(\"message\", \"I want to connect\");\nsocket.on(\"connect\", () => {\n    // emit to everybody\n    socket.emit('joinRoom', { notebookID: _index__WEBPACK_IMPORTED_MODULE_0__.mainController.notebookID, nodeID: _index__WEBPACK_IMPORTED_MODULE_0__.mainController.uniqueNodeId });\n    socket.emit(\"message\", \"user connected\");\n    // socket.emit(\"initialDataRequest\")\n});\nsocket.on(\"serverSendSocketIdArray\", (data) => {\n    // emit to everybody\n    // console.log(1616, data)\n    // socket.emit(\"initialDataRequest\")\n});\nsocket.on(\"message\", (msg) => {\n    console.log(msg);\n});\nsocket.on(\"mongoDBError\", (msg) => {\n    console.log(\"error from DB\");\n    let allTabBar = Array.from(document.querySelectorAll(\".tabBar\"));\n    allTabBar.forEach(p => p.style.background = \"purple\");\n    document.body.innerHTML = \"mongoDB error. Please refresh\";\n});\nsocket.on(\"broadcastMessage\", (msg) => {\n    console.log(msg);\n});\nsocket.on(\"saveDataToServer\", (data) => {\n    _index__WEBPACK_IMPORTED_MODULE_0__.mainController.saveMainDoc(true);\n});\nsocket.on(\"receivePageDataFromServer\", (data) => {\n    console.log(49494949, data);\n    data[\"array\"].forEach((p) => {\n        let layerHTMLObject = document.querySelector(`*[accessPointer='${p._identity.accessPointer}']`);\n        let fullPageHTMLObject = _index__WEBPACK_IMPORTED_MODULE_0__.mainController.tracePageFromElement(layerHTMLObject);\n        let smallViewHTMLObject = fullPageHTMLObject.smallViewHTMLObject;\n        fullPageHTMLObject.setAttribute(\"latestUpdateTime\", `${new Date()}`);\n        (0,_pageControllerFolder_smallViewHelperFunction__WEBPACK_IMPORTED_MODULE_1__.renderSmallView)(fullPageHTMLObject, smallViewHTMLObject, fullPageHTMLObject.soul.pageNumber);\n        _index__WEBPACK_IMPORTED_MODULE_0__.mainController.renderDataToHTML(p, layerHTMLObject);\n    });\n    // socket.off(\"receivePageDataFromServer\")\n});\nsocket.on(\"serverResponseToLoadMainDocRequest\", (data) => {\n    // console.log(323232)\n    _index__WEBPACK_IMPORTED_MODULE_0__.mainController.loadMainDoc(data);\n    _index__WEBPACK_IMPORTED_MODULE_0__.mainController.buildInitialHTMLSkeleton();\n    _index__WEBPACK_IMPORTED_MODULE_0__.mainController.buildPageFromMainDoc();\n});\nfunction Decodeuint8arr(uint8array) {\n    return new TextDecoder(\"utf-8\").decode(uint8array);\n}\nsocket.on(\"processInitialData\", (data) => {\n    // let convertedData = Decodeuint8arr(data)\n    // console.log(data)\n    // console.log(444444, data)\n    _index__WEBPACK_IMPORTED_MODULE_0__.mainController.loadMainDoc(data);\n    _index__WEBPACK_IMPORTED_MODULE_0__.mainController.buildInitialHTMLSkeleton();\n    _index__WEBPACK_IMPORTED_MODULE_0__.mainController.buildPageFromMainDoc();\n    // TestFunction.testFunction(mainController)\n});\nsocket.on(\"serverSendUserData\", (data) => {\n    // data = []\n    console.log(9349343, data);\n});\nsocket.on(\"socketConnectionUpdate\", (data) => {\n    // nodeID, socket.it, notebookID mainController.communitcationController.update(data)\n    console.log(9349343, data);\n});\nsocket.on('disconnected', function () {\n    socket.emit('deleteNode', _index__WEBPACK_IMPORTED_MODULE_0__.mainController.uniqueNodeId);\n});\nsocket.on(\"serverSendChangeFileToClient\", (changeData) => {\n    // changeData: meta, htmlObjectData\n    console.log(9292929, changeData, socket.id, changeData.metaData.socketId, changeData.metaData.uniqueNodeId);\n    if (_index__WEBPACK_IMPORTED_MODULE_0__.mainController.uniqueNodeId != changeData.metaData.uniqueNodeId) {\n        _index__WEBPACK_IMPORTED_MODULE_0__.mainController.processChangeData(changeData);\n    }\n    else {\n        console.log(\"I don't process the received data.\");\n    }\n});\n\n\n//# sourceURL=webpack://reactInAction/./src/smallTest/socketFunction.ts?");

/***/ }),

/***/ "./node_modules/yeast/index.js":
/*!*************************************!*\
  !*** ./node_modules/yeast/index.js ***!
  \*************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n\n\n//# sourceURL=webpack://reactInAction/./node_modules/yeast/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;